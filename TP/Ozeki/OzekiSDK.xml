<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OzekiSDK</name>
    </assembly>
    <members>
        <member name="M:Ozeki.Camera.ICamera.Start">
            <summary>
            Starts the capturing from the selected device.
            <remarks>
            Throws an <see cref="T:System.Exception"/> when no device selected.
            </remarks>
            </summary>
        </member>
        <member name="M:Ozeki.Camera.ICamera.Stop">
            <summary>
            Stops the capturing.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.ICamera.Connect">
            <summary>
            Connects to the camera.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.ICamera.Disconnect">
            <summary>
            Disconnects from the camera.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.ICamera.Dispose">
            <summary>
            Closes the camera and frees up its resources.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICamera.Host">
            <summary>
            Represents the camera domain address
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICamera.UserName">
            <summary>
            Represents the camera user
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICamera.Password">
            <summary>
            Represents the password of the camera user
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICamera.Capturing">
            <summary>
            Gets a boolean value indicating whether the capuring is started. 
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICamera.Initialized">
            <summary>
            Gets a boolean value indicating whether the device has been initialized.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICamera.AudioChannel">
            <summary>
            Represents the audio stream of the IP Camera, which can be connected to speaker objects.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICamera.VideoChannel">
            <summary>
            Represents the video stream of the IP Camera, which can be connected to video player objects.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICamera.Resolution">
            <summary>
            Gets or sets the current resolution of the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICamera.State">
            <summary>
            Gets the current state of the camera.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.ICamera.CameraStateChanged">
            <summary>
            Occurs, when the camera's state has been changed.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.ASCII">
            <see href="http://www.asciitable.com/">The ASCII Table</see>
        </member>
        <member name="T:Ozeki.Camera.BaseDisposable">
            <summary>
            Provides an implementation which contains the members required to adhere to the IDisposable implementation
            </summary>
        </member>
        <member name="M:Ozeki.Camera.BaseDisposable.#ctor">
            <summary>
            Constructs a new BaseDisposable
            </summary>
        </member>
        <member name="M:Ozeki.Camera.BaseDisposable.Finalize">
            <summary>
            Finalizes the BaseDisposable by calling Dispose.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.BaseDisposable.CheckDisposed">
            <summary>
            Throws an ObjectDisposedException if Disposed is true.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.BaseDisposable.Dispose">
            <summary>
            Allows derived implemenations a chance to destory manged or unmanged resources.
            The System.Runtime.CompilerServices.MethodImplOptions.Synchronized attribute prevents two threads from being in this method at the same time.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.BaseDisposable.Disposed">
            <summary>
            Indicates if Dispose has been called previously.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.BaseDisposable.ShouldDispose">
            <summary>
            Indicates if the instance should dispose any resourced when disposed.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.Binary">
            <summary>
            Provides methods which are useful when working with binary data
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.BitSize">
            <summary>
            The amount of bits it a single octet
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.FourBitMaxValue">
            <summary>
            (0000)1111 in Binary
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.FiveBitMaxValue">
            <summary>
            (000)11111 in Binary
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.SevenBitMaxValue">
            <summary>
            An octet which represents a set of 8 bits with only the 0th  bit clear.
            </summary>
            <remarks>
            01111111 in Binary
            </remarks>
        </member>
        <member name="F:Ozeki.Camera.Binary.U24MaxValue">
            <summary>
            00000000 11111111 11111111 11111111 in binary
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.QuarterBitOverflow">
            <summary>
            An exception utilized when a value larger than allowed is utilized in a quarter bit.
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.NybbleOverflow">
            <summary>
            An exception utilized when a value larger than allowed is utilized in a nibble.
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.FiveBitOverflow">
            <summary>
            An exception utilized when a value larger than allowed is utilized in a 5 bit field.
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.SevenBitOverflow">
            <summary>
            An exception utilized when a value larger than allowed is utilized in a 7 bit field (sbyte.MaxValue is not utilized because of the dependence on the value of sign bit)
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.SixteenBitOverflow">
            <summary>
            An exception utilized when a value larger than allowed is utilized in a 16 bit field.
            </summary>
        </member>
        <member name="F:Ozeki.Camera.Binary.OverFlowExceptionFormat">
            <summary>
            A string which contains has a format in which all Overflow exceptions Readd by the ReadBinaryOverflowException function utilize.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Binary.ReadBitsWithShift(System.Byte,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads the given amount of bits from an octet via shifting.
            </summary>
            <param name="octet">The octet to read the bits from</param>
            <param name="shiftLeft">The amount of bits to shift left</param>
            <param name="shiftRight">The amount of bits to shift right</param>
            <returns>The 32 bit value remanining in the register after shifting.</returns>
        </member>
        <member name="M:Ozeki.Camera.Binary.ReadBitWithShift(System.Byte@,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Retrieves a bit from the given octet via shifting to discard bits.
            </summary>
            <param name="octet">The octet to reveal the bit field in</param>
            <param name="shiftLeft">The amount of shifting requried to put the bit at index 0</param>
            <param name="shiftRight">The amount of shifting requried to put the bit at index 7</param>
            <returns>True if the bit field is set, otherwise false.</returns>
        </member>
        <member name="M:Ozeki.Camera.Binary.GetBit(System.Byte@,System.Int32)">
            <summary>
            Retrieves a bitfield from the given octet via shifting to discard bits.
            </summary>
            <param name="octet">The octet to reveal the bit field in</param>
            <param name="index">The non 0 based index of the octet to retrieve a bit from</param>
            <returns>True if the bit field is set, otherwise false.</returns>
        </member>
        <member name="M:Ozeki.Camera.Binary.SetBit(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            Provides an implementation of setting a bit in a highly optomized fashion.
            Returns the value previously set in the bit.
            If the given bit is already set then no further modification is perfored.
            </summary>
            <param name="octet">The octet to set the bit in</param>
            <param name="index">The index of the bit to set</param>
            <param name="newValue">The value to put in the bit, where true = 1 and false = 0</param>
            <returns>The value which was previously set in the bit where true = 1 and false = 0</returns>
        </member>
        <member name="M:Ozeki.Camera.Binary.SetBit(System.Byte@,System.Int32)">
            <summary>
            Sets the index of the given bit to 1 if not already set
            </summary>
            <param name="octet"></param>
            <param name="index"></param>
        </member>
        <member name="M:Ozeki.Camera.Binary.ClearBit(System.Byte@,System.Int32)">
            <summary>
            Sets the index of the given bit to 0 if not already set
            </summary>
            <param name="octet"></param>
            <param name="index"></param>
        </member>
        <member name="M:Ozeki.Camera.Binary.ToggleBit(System.Byte,System.Int32)">
            <summary>
            Provides a method of setting a bit with XOR
            </summary>
            <param name="octet">The octet to set the bit in</param>
            <param name="index">The index of the bit to set</param>
            <remarks>
            http://stackoverflow.com/questions/2605913/invert-1-bit-in-c-sharp
            </remarks>
        </member>
        <member name="M:Ozeki.Camera.Binary.Or(System.Int32,System.Int32)">
            <summary>
            Combines two integers into a single byte using the binary | operator truncating the higher 24 bits.
            </summary>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.Camera.Binary.And(System.Int32,System.Int32)” -->
        <member name="M:Ozeki.Camera.Binary.ReadInteger(System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calculates a 64 bit value from the given parameters.
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="sizeInBytes"/> is less than or equal to 0.
            </summary>
            <param name="octets">The sequence of <see cref="T:System.Byte"/> to enumerate</param>
            <param name="offset">The offset to skip to in the enumeration</param>
            <param name="sizeInBytes">The size of the binary representation of the integer to calculate</param>
            <param name="reverse">If true the sequence will be reversed before being calculated</param>
            <returns>The calculated result</returns>
        </member>
        <member name="M:Ozeki.Camera.Binary.ReadU8(System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Reads a unsigned 8 bit value from the buffer at the given index.
            </summary>
            <param name="buffer">The buffer to read from</param>
            <param name="index">The index to read</param>
            <param name="reverse">A value indicating if the value should be reversed</param>
            <returns>
            The unsigned 8 bit value with respect to the reverse parameter.
            </returns>
            <summary>
            Note if <paramref name=" reverse"/> is true then a cast to a unsigned 64 bit value is performed.
            </summary>
            <remarks>
            Provided for completeness, the call overhead let alone performing the check on the reverse condition and not to mention the cast is much worse than simply hardcoding for the particular application when required to.
            </remarks>
        </member>
        <member name="M:Ozeki.Camera.Binary.ReadU16(System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Reads an unsigned 16 bit value type from the given buffer.
            </summary>
            <param name="buffer">The buffer to Read the unsigned 16 bit value from</param>
            <param name="index">The index in the buffer to Read the value from</param>
            <param name="reverse">A value which indicates if the value should be reversed</param>
            <returns>The unsigned 16 bit value from the given buffer</returns>
            <summary>
            The <paramref name="reverse"/> is typically utilized when creating Big Endian \ Network Byte Order or encrypted values.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Binary.ReadU24(System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Reads a 24 bit unsigned integer from the given buffer at the given index.
            </summary>
            <param name="buffer">The buffer to Read the unsigned 24 bit value from</param>
            <param name="index">The index in the buffer to Read the value from</param>
            <param name="reverse">A value which indicates if the value should be reversed</param>
            <returns>The unsigned 24 bit value in the form of a 32 bit unsigned integer</returns>
        </member>
        <member name="M:Ozeki.Camera.Binary.ReadU32(System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Reads an unsgined 32 bit value from the given buffer at the specified index.
            </summary>
            <param name="buffer">The buffer to Read the unsigned 32 bit value from</param>
            <param name="index"></param>
            <param name="reverse">A value which indicates if the value should be reversed</param>
            <returns>The unsigned 32 bit value from the given buffer</returns>
            <summary>
            The <paramref name="reverse"/> is typically utilized when creating Big Endian \ Network Byte Order or encrypted values.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Binary.WriteNetwork16(System.Byte[],System.Int32,System.Boolean,System.Int16)">
            <summary>
            Writes a the given unsgined 16 bit value to the buffer at the given index.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ozeki.Camera.Binary.WriteNetwork64(System.Byte[],System.Int32,System.Boolean,System.UInt64)">
            <summary>
            Writes a Big Endian 64 bit value to the given buffer at the given index
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="reverse">A value indicating if the given value should be written in reverse</param>
            <param name="value"></param>
        </member>
        <member name="M:Ozeki.Camera.Binary.ReverseU8(System.Byte)">
            <summary>
            Reverses the given unsigned 8 bit value via calulcation of the reverse value.
            </summary>
            <param name="source">The unsigned 8 bit value which is requried to be reversed</param>
            <returns>The reversed unsigned 8 bit value</returns>
        </member>
        <member name="M:Ozeki.Camera.Binary.ReverseU16(System.UInt16)">
            <summary>
            Reverses the given unsigned 16 bit value via left and right shift and casting to a unsigned 64 bit value.
            </summary>
            <param name="source">The unsigned 16 bit value which is required to be reversed</param>
            <returns>The reversed unsigned 16 bit value</returns>
        </member>
        <member name="M:Ozeki.Camera.Binary.ReverseU32(System.UInt32)">
            <summary>
            Reverses the given unsigned 32 value via left and right shift and casting to a unsigned 64 bit value.
            </summary>
            <param name="source">The unsigned 32 bit value which is requried to be reversed</param>
            <returns>The reversed unsigned 32 bit value</returns>            
        </member>
        <member name="M:Ozeki.Camera.Binary.RollU64(System.UInt64,System.Int32)">
            <summary>
            Reverses the given unsigned 64 bit value via left and right shift on the register(s) in use to perform this operation.
            </summary>
            <param name="source">The unsgined 64 bit value to reverse</param>
            <param name="amount">The amount of shifting left and right to perform</param>
            <returns>The reversed unsigned 64 bit value</returns>
            <remarks>
            On 32 bit Architectures two registers are beging used to perform this operation
            </remarks>
        </member>
        <member name="T:Ozeki.Camera.CommonHeaderBits">
            <summary>
            Dervived from the fact that both abstractions presented utilize the first two octets.
            Represents all standard bit fields which can be found in the first 16 bits of any Rtp or Rtcp packet.
            </summary>    
            <remarks>        
            
            Not a struct because: 
                1) bit fields are utilized, structures can only be offset in bytes with a whole integer number. (Double precision would be required in FieldOffset this get to work or a BitFieldOffset which takes double.)
                2) structures must be passed by reference and would force this abstraction to be copied unless every call took reference.
                3) You cannot manually remove references to a value type or set a structure to null which then causes the GC to maintin the pointer and refrerence count for more time and would lead to more memory leaks.
                4) You can't inherit a struct and subsequently any derived implementation would need to redudantly store reference to something it can't be rid of manually.
                
            public to allow derived implementation, hence not sealed.
            
            This instance only declares 2 fields which are value types and owns no other references.
            </remarks>
        </member>
        <member name="F:Ozeki.Camera.CommonHeaderBits.VersionMask">
            <summary>
            3 SHL 6 produces a 8 bit value of 11000000
            </summary>
        </member>
        <member name="F:Ozeki.Camera.CommonHeaderBits.RtpMarkerMask">
            <summary>
            1 SHL 7 produces a 8 bit value of 1000000 (127) Decimal
            </summary>
        </member>
        <member name="F:Ozeki.Camera.CommonHeaderBits.PaddingMask">
            <summary>
            1 SHL 5 produces a 8 bit value of 00100000 (32 Decimal)
            </summary>
        </member>
        <member name="F:Ozeki.Camera.CommonHeaderBits.ExtensionMask">
            <summary>
            1 SHL 4 produces a 8 bit value of 00010000 (16) Decimal
            </summary>
        </member>
        <member name="M:Ozeki.Camera.CommonHeaderBits.PackOctet(System.Int32,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Composes an octet with the common bit fields utilized by both the Rtp and Rtcp abstractions in the 1st octet of the first word.
            If <paramref name="extension"/> is true then only the high nybble of the <paramref name="remainingBits"/> integer will be masked into the resulting octet.
            </summary>
            <param name="version">a 2 bit value, 0, 1, 2 or 3.</param>
            <param name="padding">Indicates the value of the 2nd Bit</param>
            <param name="extension">Indicates the value of the 3rd Bit</param>
            <param name="remainingBits">Bits 4, 5, 6, 7 and 8</param>
            <returns>The octet which has been composed as a result of packing the bit fields</returns>
        </member>
        <member name="M:Ozeki.Camera.CommonHeaderBits.PackOctet(System.Boolean,System.Int32)">
            <summary>
            Composes an octet with the common bit fields utilized by both Rtp and Rtcp abstractions in the 2nd octet of the first word.
            </summary>
            <param name="marker"></param>
            <param name="payloadTypeBits"></param>
            <returns></returns>
        </member>
        <member name="F:Ozeki.Camera.CommonHeaderBits.m_Memory">
            <summary>
            If created from memory existing
            </summary>
        </member>
        <member name="F:Ozeki.Camera.CommonHeaderBits.leastSignificant">
            <summary>
            The first and octets themselves, utilized by both Rtp and Rtcp.
            Seperated to prevent checks on endian.
            </summary>
        </member>
        <member name="F:Ozeki.Camera.CommonHeaderBits.mostSignificant">
            <summary>
            The first and octets themselves, utilized by both Rtp and Rtcp.
            Seperated to prevent checks on endian.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.CommonHeaderBits.ToInt32">
            <summary>
            Converts the 16 bits utilized in this implemention into a 32 bit integer
            </summary>
            <returns>The 32 bit value created as a result of interpreting the 16 bits as a 32 bit value</returns>
        </member>
        <member name="M:Ozeki.Camera.CommonHeaderBits.#ctor(Ozeki.Camera.CommonHeaderBits)">
            <summary>
            Creates a exact copy of the given CommonHeaderBits
            </summary>
            <param name="other">The CommonHeaderBits instance to copy</param>
        </member>
        <member name="M:Ozeki.Camera.CommonHeaderBits.#ctor(System.Byte,System.Byte)">
            <summary>
            Constructs a managed representation around a copy of the given two octets
            </summary>
            <param name="lsb">The least significant 8 bits</param>
            <param name="msb">The most significant 8 bits</param>
        </member>
        <member name="M:Ozeki.Camera.CommonHeaderBits.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of the CommonHeaderBits with the given values packed into the bit fields.
            </summary>
            <param name="version">The version of the common header bits</param>
            <param name="padding">The value of the Padding bit</param>
            <param name="extension">The value of the Extension bit</param>
        </member>
        <member name="M:Ozeki.Camera.CommonHeaderBits.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Byte)">
            <summary>
            Constructs a new instance of the CommonHeaderBits with the given values packed into the bit fields.
            The <paramref name="payloadTypeBits"/> usually refer to count of Contributing Sources and will be stored in the managed <propertyref name="RtpContributingSourceCount"/> property.
            </summary>
            <param name="version">The version of the common header bits</param>
            <param name="padding">The value of the Padding bit</param>
            <param name="extension">The value of the Extension bit</param>
            <param name="marker">The value of the Marker bit</param>
            <param name="payloadTypeBits">The value of the PayloadType bits</param>
            /// <param name="otherbits">The value of the remaning bits which are not utilized. (4 bits)</param>
        </member>
        <member name="P:Ozeki.Camera.CommonHeaderBits.Version">
            <summary>
            Gets or sets bits 0 and 1; from the lowest quartet of the first octet.
            Throws a Overflow exception if the value is less than 0 or greater than 3.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CommonHeaderBits.Padding">
            <summary>
            Gets or sets the Padding bit.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CommonHeaderBits.Extension">
            <summary>
            Gets or sets the Extension bit.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CommonHeaderBits.RtcpBlockCount">
            <summary>
            Gets or sets 5 bits value stored in the first octet of all RtcpPackets.
            Throws an Overflow exception if the value cannot be stored in the bit field.
            Throws an Argument exception if the value is equal to <see cref="F:Ozeki.Camera.Binary.FiveBitMaxValue"/> and the <see cref="P:Ozeki.Camera.CommonHeaderBits.Extension"/> bit is set.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CommonHeaderBits.RtpContributingSourceCount">
            <summary>
            Gets or sets the nybble assoicted with the Rtp CC bit field.
            Throws an Overflow exception if the value is greater than <see cref="F:Ozeki.Camera.Binary.FourBitMaxValue"/>.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CommonHeaderBits.RtpMarker">
            <summary>
            Gets or sets the RtpMarker bit.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CommonHeaderBits.RtpPayloadType">
            <summary>
            Gets or sets the 7 bit value associated with the RtpPayloadType.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CommonHeaderBits.RtcpPayloadType">
            <summary>
            Gets or sets the 8 bit value associated with the RtcpPayloadType.
            Note that in RtpPackets that this field is shared with the Marker bit and if the value has Bit 0 set then the RtpMarker property will be true.
            </summary>
            <remarks>
            A SendersReport has the RtpPayloadType of 72.
            </remarks>
        </member>
        <member name="T:Ozeki.Camera.IExceptionEx">
            <summary>
            Provides an interface to allow access to the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IExceptionEx.InnerException">
            <summary>
            <see cref="P:System.Exception.InnerException"/>.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IExceptionEx.Tag">
            <summary>
            The <see cref="T:System.Object"/> which corresponds to the underlying exception.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.Exception`1">
             <summary>
             In short,
             All exceptions can be recovered from, only some can be resumed. 
             This class provides [a scope when used in conjunction with the `using` construct] methods to share data through as well as pass messages during programming if required.
            
             Define a real class, e.g. myException : Exception<paramref name="T"/> to only mangle the typename once if possible.
             
             This class provides a base class which is derived from <see cref="T:System.Exception"/>.
            
             It allows a construct of programming based on scopes and exceptions.
             
             It is not marked abstract because it would be useless.
             </summary>
             <typeparam name="T">The type data in the Tag property</typeparam>
        </member>
        <member name="F:Ozeki.Camera.Exception`1.ExceptionFormat">
            <summary>
            The string which will be used on all instances if no message was provided when instantiated.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Exception`1.#ctor">
            <summary>
            Creates the default for <typeparamref name="T"/> in the <see cref="P:Ozeki.Camera.Exception`1.Tag"/> property.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Exception`1.#ctor(`0,System.String)">
            <summary>
            Creates the default for <typeparamref name="T"/> from <paramref name="tag"/> in <see cref="P:Ozeki.Camera.Exception`1.Tag"/> and assigns <see cref="P:System.Exception.Message"/>
            </summary>
            <param name="tag">The value to store.</param>
            <param name="message">The message realted to the exception</param>
        </member>
        <member name="M:Ozeki.Camera.Exception`1.#ctor(`0,System.String,System.Exception)">
            <summary>
            Creates the default for <typeparamref name="T"/> from <paramref name="tag"/> in <see cref="P:Ozeki.Camera.Exception`1.Tag"/> and assigns <see cref="P:System.Exception.Message"/> and <see cref="P:System.Exception.InnerException"/>
            </summary>
            <param name="tag">The value to store.</param>
            <param name="message">The message realted to the exception</param>
            <param name="innerException">The exception which superceeds this exception</param>
        </member>
        <member name="M:Ozeki.Camera.Exception`1.#ctor(`0)">
            <summary>
            Creates the default for <typeparamref name="T"/> from <paramref name="tag"/> in <see cref="P:Ozeki.Camera.Exception`1.Tag"/> and assigns a default message describing the <typeparamref name="T"/>.
            </summary>
            <param name="tag">The value to store.</param>
        </member>
        <member name="M:Ozeki.Camera.Exception`1.#ctor(`0,System.String,System.Exception,System.Object[])">
            <summary>
            Creates the default for <typeparamref name="T"/> from <paramref name="tag"/> in <see cref="P:Ozeki.Camera.Exception`1.Tag"/> and assigns <see cref="P:System.Exception.Message"/> and <see cref="P:System.Exception.InnerException"/> and optionally assigns any given Data.
            </summary>
            <param name="tag">The element related to the exception</param>
            <param name="message">The message realted to the exception, if not provided a default message will be used.</param>
            <param name="innerException">any <see cref="T:System.Exception"/> which is related to the exception being thrown</param>
            <param name="data">Any data which should be also stored with the exception</param>
        </member>
        <member name="M:Ozeki.Camera.Exception`1.Finalize">
            <summary>
            Finalizes the instace by calling Dispose.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Exception`1.Dispose">
            <summary>
            Disposes the exception
            </summary>
        </member>
        <member name="P:Ozeki.Camera.Exception`1.InException">
            <summary>
            Check if we are in a exception unwind scenario or not.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.Exception`1.Tag">
            <summary>
            The element which corresponds to the underlying exception
            </summary>
        </member>
        <member name="P:Ozeki.Camera.Exception`1.Ozeki#Camera#IExceptionEx#InnerException">
            <summary>
            <see cref="P:System.Exception.InnerException"/>.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.Exception`1.Ozeki#Camera#IExceptionEx#Tag">
            <summary>
            A boxed representation of the Tag property.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.Exception`1.Disposed">
            <summary>
            Indicates if the Exception has been previously disposed
            </summary>
        </member>
        <member name="M:Ozeki.Camera.ExceptionExtensions.CreateAndRaiseException``1(``0,System.String,System.Exception)">
            <summary>
            Raises an <see cref="!:Common.Exception"/> on the calling thread.
            </summary>
            <typeparam name="T">The type of the exception to raise.</typeparam>
            <param name="tag">The element related to the exception</param>
            <param name="message">The message realted to the exception, if not provided a default message will be used.</param>
            <param name="innerException">any <see cref="T:System.Exception"/> which is related to the exception being thrown</param>
        </member>
        <member name="P:Ozeki.Camera.ExceptionExtensions.InException">
            <summary>
            Check if we are in a exception unwind scenario or not.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.IPacket">
            <summary>
            Packets are <see cref="T:System.IDisposable">disposable</see> contigous allocations of memory which have been created or transferred.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPacket.CompleteFrom(System.Net.Sockets.Socket)">
            <summary>
            Completes the IPacket if IsComplete and Disposed is false.
            </summary>
            <param name="socket">The socket to complete from</param>
        </member>
        <member name="M:Ozeki.Camera.IPacket.Prepare">
            <summary>
            Creates a sequence of bytes which correspond to the IPacket in binary format suitable to be sent on a network.
            </summary>
            <returns>The sequence</returns>
        </member>
        <member name="P:Ozeki.Camera.IPacket.Created">
            <summary>
            Gets a value indciating when the IPacket was created.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPacket.Transferred">
            <summary>
            Gets a value indicating when the NetworkPacket was sent.
            If null then the IPacket was not yet set.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPacket.IsComplete">
            <summary>
            Determines if the IPacket is completely in memory.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPacket.IsReadOnly">
            <summary>
            Determines if the IPacket can be modified.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPacket.Length">
            <summary>
            The length in bytes of the packet
            </summary>
        </member>
        <member name="T:Ozeki.Camera.IPacketExtensions">
            <summary>
            Defines commony used extension methods for IPacket instances.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPacketExtensions.GetConverganceTime(Ozeki.Camera.IPacket)">
            <summary>
            Determines the amount of time taken to send the packet based on the time the packet was <see cref="P:Ozeki.Camera.IPacket.Created">created</see>
            </summary>
            <param name="packet">The packet</param>
            <returns>Null if the packet was not yet sent, otherwise the amount of time</returns>
        </member>
        <member name="T:Ozeki.Camera.CameraUriType">
            <summary>
            Type of the given Camera Uri.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraInfo.RefreshProperties">
            <summary>
            Gets the current attributes from the camera device and refreshes the camera info properties.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraInfo.SetAttributes(System.Boolean)">
            <summary>
            Enables or disables the ONVIF discovery mode.
            </summary>
            <param name="discoverable"></param>
        </member>
        <member name="P:Ozeki.Camera.IPCameraInfo.DeviceInfo">
            <summary>
            Gets information about the device, such as Firmware, HardwareId, Manufacturer, Model, Serialnumber.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.ListenedMedia">
            <summary>
            Streams to be listened.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraDateAndTime.RefreshProperties">
            <summary>
            Gets the current attributes from the camera, and refreshes the date and time properties.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraDateAndTime.SetAttributes(Ozeki.Camera.CameraDateTimeSetter)">
            <summary>
            Sets the current date, time and timezone.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraDateAndTime.TimeZone">
            <summary>
            Gets the current time zone, used to calculate local time from UTC.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraDateAndTime.DayLightSaving">
            <summary>
            Gets if the camera is using daylight saving mode or not.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraDateAndTime.UTCDate">
            <summary>
            Represents the UTC Date, set to the camera.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraDateAndTime.UTCTime">
            <summary>
            Represents the UTC Time, set to the camera.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.IPCameraDeviceDiscovery.DeviceDiscovered">
            <summary>
            Occurs, when the Device Discovery has been complated.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.Start(Ozeki.Camera.IPCameraStream)">
            <summary>
            Connects and starts the listening process.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.Start(Ozeki.Camera.IPCameraStream,Ozeki.Camera.ListenedMedia)">
            <summary>
            Connects and starts the listening process.
            </summary>
            <param name="stream"></param>
            <param name="listenedMedia"></param>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.StopListening">
            <summary>
            Stops the listening process.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.HardReset">
            <summary>
            Resets to the factory settings.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.SoftReset">
            <summary>
            Resets the factory defaults, except basic network settings such as IP Address, Subnet, Gateway or DHCP settings.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.RebootCamera">
            <summary>
            Reboots the camera device.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.GetSystemBackup">
            <summary>
            Retrieves system backup configuration file(s). Returned with reference to a name and mime-type together with binary data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.RestoreSystem(System.Collections.Generic.List{Ozeki.Camera.IPCameraBackupFile})">
            <summary>
            Restores the system backup configuration.
            </summary>
            <param name="backupFiles"></param>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.UpgradeFirmware">
            <summary>
            Begins to upgrade the device firmware - if supported.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.SendOnvifRequest(Ozeki.Camera.OnvifRequestEventArgs)">
            <summary>
            Sends Onvif request to an IP Camera. (e.g.: PTZ)
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IIPCamera.TakeOnvifSnapshot">
            <summary>
            Gets a snapshot from the ONVIF camera device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.ID">
            <summary>
            Random id 
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.Error">
            <summary>
            Gets the current error of the IP camera.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.CameraMovement">
            <summary>
            Gives control of the IPCamera, and allowes to configure it's movement.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.CertificateManager">
            <summary>
            Gets the manager that handles the certificates for the IP camera.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.NetworkManager">
            <summary>
            Gets the network settings of the camera device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.UserManager">
            <summary>
            Gives control of user managing, such as removing, adding, modifiyng users, or getting the users' list.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.AvailableStreams">
            <summary>
            Gets the available streams of the IP camera.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.ImagingSettings">
            <summary>
            Provides the opportunity to manage the imaging settings of the camera.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.ConnectionLostTimeout">
            <summary>
            Gets or sets the connection timeout in seconds if no RTP packets has arrived.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.Log">
            <summary>
            Gets the camera's log
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.CameraAddress">
            <summary>
            Returns the address, which has been set at the initialization.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.CameraInfo">
            <summary>
            Gets information about the camera and the streams.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.CurrentStream">
            <summary>
            Gets the currently connected stream.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.CurrentRtspUri">
            <summary>
            Gets the RTSP uri of the selected stream.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.DateAndTime">
            <summary>
            Sends a request for the current date and time.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.Port">
            <summary>
            Gets the IP Camera's port number.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.IsPTZSupported">
            <summary>
            Gets if PTZ is supported by the camera or not.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.UriType">
            <summary>
            Gets the camera URI's type.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IIPCamera.Transport">
            <summary>
            Gets the camera transport type.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.IIPCamera.CameraErrorOccurred">
            <summary>
            Occurs, when error happens using the camera or the streams.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.IIPCamera.StreamAttributesReady">
            <summary>
            Occurs, when the stream attributes have became available.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.IIPCamera.EncodeTypesReady">
            <summary>
            Occurs, when the stream encode types become available.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.IIPCamera.OnvifMessageReceived">
            <summary>
            Occurs, when an Onvif message has been received.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.IIPCamera.RtspUriReceived">
            <summary>
            Occurs, when the rtsp uri received
            </summary>
        </member>
        <member name="E:Ozeki.Camera.IIPCamera.AuthenticationRequested">
            <summary>
            Occurs, when need authentication to camera connection
            </summary>
        </member>
        <member name="M:Ozeki.Camera.CameraImaging.RefreshProperties">
            <summary>
            Gets the current attributes from the camera device and refreshes the imaging properties.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.IIPCameraFactory">
            <summary>
            Belso IP camera factory interface
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.Connect">
            <summary>
            Connects to the IP camera.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.Start">
            <summary>
            Connects and starts the listening process.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.Start(Ozeki.Camera.IPCameraStream)">
            <summary>
            Connects and starts the listening process.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.Start(Ozeki.Camera.IPCameraStream,Ozeki.Camera.ListenedMedia)">
            <summary>
            Connects and starts the listening process.
            </summary>
            <param name="stream"></param>
            <param name="listenedMedia"></param>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.Disconnect">
            <summary>
            Disconnects from the camera.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.HardReset">
            <summary>
            Resets to the factory settings.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.RebootCamera">
            <summary>
            Reboots the camera device.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.SoftReset">
            <summary>
            Resets the factory defaults, except basic network settings such as IP Address, Subnet, Gateway or DHCP settings.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.StopListening">
            <summary>
            Stops the listening process.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.GetSystemBackup">
            <summary>
            Retrieves system backup configuration file(s). Returned with reference to a name and mime-type together with binary data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.RestoreSystem(System.Collections.Generic.List{Ozeki.Camera.IPCameraBackupFile})">
            <summary>
            Restores the system backup configuration.
            </summary>
            <param name="backupFiles"></param>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.UpgradeFirmware">
            <summary>
            Begins to upgrade the device firmware - if supported.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraImpl.SendOnvifRequest(Ozeki.Camera.OnvifRequestEventArgs)">
            <summary>
            Sends Onvif request to an IP Camera. (e.g.: PTZ)
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.UserManager">
            <summary>
            Gives control of user managing, such as removing, adding, modifiyng users, or getting the users' list.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.CertificateManager">
            <summary>
            Gets the manager that handles the certificates for the IP camera.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.AudioChannel">
            <summary>
            Represents the audio stream of the IP Camera, which can be connected to speaker objects.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.VideoChannel">
            <summary>
            Represents the video stream of the IP Camera, which can be connected to video player objects.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.AvailableStreams">
            <summary>
            Gets the available streams
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.CameraAddress">
            <summary>
            Returns the address, which has been set at the initialization.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.CameraInfo">
            <summary>
            Gets information about the camera and the streams.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.CurrentStream">
            <summary>
            Gets the currently connected stream.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.CurrentRtspUri">
            <summary>
            Gets the RTSP uri of the selected stream.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.DateAndTime">
            <summary>
            Sends a request for the current date and time.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.DomainHost">
            <summary>
            Gets the IP Camera's domain host.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.NetworkManager">
            <summary>
            Gets the network settings of the camera device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.ImagingSettings">
            <summary>
            Provides the opportunity to manage the imaging settings of the camera.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.IsPTZSupported">
            <summary>
            Gets if PTZ is supported by the camera or not.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.UriType">
            <summary>
            Gets the camera URI's type.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.UserName">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraImpl.ConnectionLostTimeout">
            <summary>
            Gets or sets the connection timeout in seconds if no RTP packets has arrived.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraFactory.GetCamera(System.String,System.String,System.String,Ozeki.Camera.CameraTransportType,System.Boolean)">
            <summary>
            Gets the IPCamera with the given parameters.
            </summary>
            <param name="domainHost"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="preferredTransportType"></param>
            <param name="getCameraInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Camera.IPCameraFactory.GetCamera(Ozeki.Camera.IPCameraAccount)">
            <summary>
            Gets the IPCamera with the given account
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Camera.IPCameraFactory.DiscoverDevices(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Automatically searches for IPCamera devices.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraFactory.TakeOnvifSnapshot(System.String,System.String,System.String,Ozeki.Media.Resolution)">
            <summary>
            Gets a snapshot image from the onvif camera.
            </summary>
            <param name="cameraUrl"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="E:Ozeki.Camera.IPCameraFactory.DeviceDiscovered">
            <summary>
            Occurrs when an IP camera device detected on the local network.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.IPCameraFactory.OnvifImageTaken">
            <summary>
            Occurrs when an image has been received from the onvif camera.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.IPCameraAudioEncoding">
            <summary>
            This class represents the audio encoding attributes, which are available to be set, and to be sent to the camera device.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraAudioEncoding.#ctor">
            <summary>
            This class represents the audio encoding attributes, which are available to be set, and to be sent to the camera device.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraAudioEncoding.RefreshProperties">
            <summary>
            Gets the current attribute from the camera device, and sets the audio encoding properties.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraAudioEncoding.SetAttributes(Ozeki.Camera.IPCameraAudioEncoding)">
            <summary>
            Sets the audio encoding attributes of the camera device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraAudioEncoding.Bitrate">
            <summary>
            Gets or sets the bitrate of the audio (if supported by the device).
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraAudioEncoding.Encoding">
            <summary>
            Gets or sets the encoder codec's type (if supported by the device).
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraAudioEncoding.SampleRate">
            <summary>
            Gets or sets the sample rate of the audio (if supported by the device).
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraAudioEncoding.Name">
            <summary>
            Gets the name of the audio configuration object.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraAudioEncoding.SessionTimeOut">
            <summary>
            Gets how much time should elapse to timeout from the session.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraAudioEncoding.Token">
            <summary>
            Gets the token of the video encoder object.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraAudioEncoding.UseCount">
            <summary>
            Gets the use count of the video encoder object.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.IPCameraVideoEncoding">
            <summary>
            This class represents the video encoding attributes, which are available to be set, and to be sent to the camera device.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraVideoEncoding.#ctor">
            <summary>
            This class represents the video encoding attributes, which are available to be set, and to be sent to the camera device.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraVideoEncoding.RefreshProperties">
            <summary>
            Gets the current attributes from the camera device and refreshes the video encoder properties.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IPCameraVideoEncoding.SetAttributes(Ozeki.Camera.IPCameraVideoEncoding)">
            <summary>
            Sets the video encoding of the camera's current stream.
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.BitRate">
            <summary>
            Gets or sets the bitrate (if supported by the device).
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.Encoding">
            <summary>
            Gets or sets the encoder codec's type (if supported by the device).
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.EncodingInterval">
            <summary>
            Gets or sets the encoding interval (if supported by the device).
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.FrameRate">
            <summary>
            Gets or sets the framerate (if supported by the device).
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.Quality">
            <summary>
            Gets or sets the quality of the video (if supported by the device).
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.Resolution">
            <summary>
            Gets or sets the resolution of the video image (if supported by the device).
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.Name">
            <summary>
            Gets the name of the video encoder object.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.SessionTimeout">
            <summary>
            Gets how much time should elapse to timeout from the session.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.Token">
            <summary>
            Gets the token of the video encoder object.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IPCameraVideoEncoding.UseCount">
            <summary>
            Gets the use count of the video encoder object.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.ResponseParser">
            <summary>
            
            </summary>
            <remarks>Status-Line =   RTSP-Version SP Status-Code SP Reason-Phrase CRLF</remarks>
        </member>
        <member name="T:Ozeki.Media.VideoHandler">
            <summary>
            Base class for video handlers.
            </summary>
        </member>
        <member name="T:Ozeki.Media.IMediaSender`2">
            <summary>
            Defines members for media senders.
            </summary>
            <typeparam name="TData">The type of the media data.</typeparam>
            <typeparam name="TFormat">The type of the media format.</typeparam>
        </member>
        <member name="M:Ozeki.Media.IMediaSender`2.SetPreferredSendFormats(System.Collections.Generic.List{`1})">
            <summary>
            Sets the preferred send formats of the media sender. It will be send the media data in that media format if it is possible.
            </summary>
            <param name="formats">The media formats in order.</param>
        </member>
        <member name="E:Ozeki.Media.IMediaSender`2.MediaDataSent">
            <summary>
            Occurs when the media data is ready to send.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IVideoSender.ReceiverConnected(Ozeki.Media.IVideoReceiver)">
            <summary>
            This will be called when this object has been connected to a video receiver.
            </summary>
            <param name="receiver">The video receiver which this object is connected to.</param>
        </member>
        <member name="M:Ozeki.Media.IVideoSender.ReceiverDisconnected(Ozeki.Media.IVideoReceiver)">
            <summary>
            This will be called when this object has been disconnected from a video receiver.
            </summary>
            <param name="receiver">The video receiver which this object was connected to.</param>
        </member>
        <member name="T:Ozeki.Media.IMediaReceiver`2">
            <summary>
            Defines members for media receivers.
            </summary>
            <typeparam name="TData">The type of the media data.</typeparam>
            <typeparam name="TFormat">The type of the media format.</typeparam>
        </member>
        <member name="M:Ozeki.Media.IMediaReceiver`2.OnDataReceived(System.Object,`0)">
            <summary>
            This will be called when media data received from a media handler.
            </summary>
            <param name="sender">The object that sent the media data.</param>
            <param name="data">The data with format information.</param>
        </member>
        <member name="E:Ozeki.Media.IMediaReceiver`2.ReceiveFormatsChanged">
            <summary>
            Occurs when an item is added or removed from the <see cref="P:Ozeki.Media.IMediaReceiver`2.ReceiveFormats"/> collection.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaReceiver`2.ReceiveFormats">
            <summary>
            Gets a list of media formats that the media handler can receive. If no media format specified, all formats are supported.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IVideoReceiver.SenderConnected(Ozeki.Media.IVideoSender)">
            <summary>
            This will be called when a video sneder has been connected to this object.
            </summary>
            <param name="sender">The connected video sender.</param>
        </member>
        <member name="M:Ozeki.Media.IVideoReceiver.SenderDisconnected(Ozeki.Media.IVideoSender)">
            <summary>
            This will be called when a video sender has been disconnected from this object.
            </summary>
            <param name="sender">The disconnected video sender.</param>
        </member>
        <member name="M:Ozeki.Media.VideoHandler.OnDataReceived(System.Object,Ozeki.Media.VideoData)">
            <summary>
            This will be called when media data received from a media handler.
            </summary>
            <param name="sender">The object that sent the media data.</param>
            <param name="data">The data with format information.</param>
        </member>
        <member name="M:Ozeki.Media.VideoHandler.SendData(Ozeki.Media.VideoData)">
            <summary>
            Sends media data to the connected audio handlers.
            </summary>
            <param name="data">The data with format information.</param>
        </member>
        <member name="M:Ozeki.Media.VideoHandler.SetSupportedFormats(Ozeki.Media.VideoFormat[])">
            <summary>
            Sets the video formats that the video handler can receive. If no video format specified, all formats are supported.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoHandler.SenderConnected(Ozeki.Media.IVideoSender)">
            <summary>
            This will be called when a video sneder has been connected to this object.
            </summary>
            <param name="sender">The connected video sender.</param>
        </member>
        <member name="M:Ozeki.Media.VideoHandler.SenderDisconnected(Ozeki.Media.IVideoSender)">
            <summary>
            This will be called when a video sender has been disconnected from this object.
            </summary>
            <param name="sender">The disconnected video sender.</param>
        </member>
        <member name="M:Ozeki.Media.VideoHandler.ReceiverConnected(Ozeki.Media.IVideoReceiver)">
            <summary>
            This will be called when this object has been connected to a video receiver.
            </summary>
            <param name="receiver">The video receiver which this object is connected to.</param>
        </member>
        <member name="M:Ozeki.Media.VideoHandler.ReceiverDisconnected(Ozeki.Media.IVideoReceiver)">
            <summary>
            This will be called when this object has been disconnected from a video receiver.
            </summary>
            <param name="receiver">The video receiver which this object was connected to.</param>
        </member>
        <member name="E:Ozeki.Media.VideoHandler.MediaDataSent">
            <summary>
            Occurs when the video data is ready to send.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoHandler.ReceiveFormats">
            <summary>
            Gets a list of video formats that the video handler can receive. If no video format specified, all formats are supported.
            </summary>
        </member>
        <member name="E:Ozeki.Media.VideoHandler.ReceiveFormatsChanged">
            <summary>
            Occurs when an item is added or removed from the <see cref="P:Ozeki.Media.VideoHandler.ReceiveFormats"/> collection.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.DemoVideo.ImageTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Demo kep kuldese vege
            </summary>
        </member>
        <member name="T:Ozeki.Camera.ICameraMovement">
            <summary>
            Gives control of the camera movement (PTZ), which means different horizontal and vertical movements and zooming.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.AbsoluteMove(Ozeki.Camera.MoveDirection,Ozeki.Camera.MoveDirection)">
            <summary>
            Moves the camera in the selected direction with the movement mode: Absolute.
            </summary>
            <param name="panTilt"></param>
            <param name="zoom"></param>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.ContinuousMove(Ozeki.Camera.MoveDirection,System.Boolean,System.Double)">
            <summary>
            Moves the camera in the selected direction with the movement mode: Continuous.
            </summary>
            <param name="panTilt"></param>
            <param name="continuousMove"></param>
            <param name="sec"></param>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.LimitedMovement(Ozeki.Camera.MoveDirection)">
            <summary>
            Moves to the direction with Continuous movement, but for limited duration - set by SetPanLimit() and SetTiltLimit().
            </summary>
            <param name="panTilt"></param>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.RelativeMove(Ozeki.Camera.MoveDirection,Ozeki.Camera.MoveDirection)">
            <summary>
            Moves the camera in the selected direction with the movement mode: Relative.
            </summary>
            <param name="panTilt"></param>
            <param name="zoom"></param>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.SetPanLimit(System.Boolean,System.Nullable{System.Double})">
            <summary>
            Sets the maximum of horizontal movement in seconds.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.SetTiltLimit(System.Boolean,System.Nullable{System.Double})">
            <summary>
            Sets the maximum of vertical movement in seconds.
            </summary>
            <param name="sec"></param>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.Zoom(Ozeki.Camera.MoveDirection,System.Boolean,System.Double)">
            <summary>
            Zooms with the camera.
            </summary>
            <param name="zoom"></param>
            <param name="continuousMove"></param>
            <param name="sec"></param>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.Patrol(Ozeki.Camera.PatrolDirection,System.Double)">
            <summary>
            Starts scanning to the set direction for the set duration, than goes back to the starting position.
            </summary>
            <param name="direction"></param>
            <param name="duration"></param>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.StopMovement">
            <summary>
            Stops the camera's current (PTZ) movement.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.SetHome">
            <summary>
            Sets the camera's HomePosition.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.ICameraMovement.GoToHome">
            <summary>
            Moves to the PTZ home position.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxPreset">
            <summary>
            Gets the maximum number of presets, supported by the camera device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.IsPTZSupported">
            <summary>
            Gets if PTZ is supported by the camera or not.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.IsPresetSupported">
            <summary>
            Gets if presets are supported by the camera device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.IsHomeSupported">
            <summary>
            Gets if Home Position is supported by the camera device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxAbsolutePanSpeed">
            <summary>
            Gets the maximum of absolute pan speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxAbsoluteTiltSpeed">
            <summary>
            Gets the maximum of absolute tilt speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxAbsoluteZoomSpeed">
            <summary>
            Gets the maximum of absolute zoom speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxContinuousPanSpeed">
            <summary>
            Gets the maximum of continuous pan speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxContinuousTiltSpeed">
            <summary>
            Gets the maximum of continuous tilt speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxContinuousZoomSpeed">
            <summary>
            Gets the maximum of continuous zoom speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxRelativePanSpeed">
            <summary>
            Gets the maximum of relative pan speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxRelativeTiltSpeed">
            <summary>
            Gets the maximum of relative tilt speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.MaxRelativeZoomSpeed">
            <summary>
            Gets the maximum of relative zoom speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.CurrentAbsolutePanSpeed">
            <summary>
            Gets or sets the absolute pan speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.CurrentAbsoluteTiltSpeed">
            <summary>
            Gets or sets the absolute tilt speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.CurrentAbsoluteZoomSpeed">
            <summary>
            Gets or sets the absolute zoom speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.CurrentContinuousPanSpeed">
            <summary>
            Gets or sets the continuous pan speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.CurrentContinuousTiltSpeed">
            <summary>
            Gets or sets the continuous tilt speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.CurrentContinuousZoomSpeed">
            <summary>
            Gets or sets the continuous zoom speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.CurrentRelativePanSpeed">
            <summary>
            Gets or sets the relative pan speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.CurrentRelativeTiltSpeed">
            <summary>
            Gets or sets the relative tilt speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.CurrentRelativeZoomSpeed">
            <summary>
            Gets or sets the relative zoom speed.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.PanSpeed">
            <summary>
            Gets or sets the speed of Pan for all of the movement types.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.TiltSpeed">
            <summary>
            Gets or sets the speed of Tilt for all of the movement types.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.ZoomSpeed">
            <summary>
            Gets or sets the speed of Zoom for all of the movement types.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraMovement.Preset">
            <summary>
            Gets the preset informations
            </summary>
        </member>
        <member name="T:Ozeki.Camera.MoveDirection">
            <summary>
            Direction of the PTZ component's Pan, Tilt and Zoom
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.Right">
            <summary>
            Move to right
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.Left">
            <summary>
            Move to left
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.Up">
            <summary>
            Move to up
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.Down">
            <summary>
            Move to down
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.LeftUp">
            <summary>
            Move to left and up
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.RightUp">
            <summary>
            Move to right and up
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.LeftDown">
            <summary>
            Move to left and down
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.RightDown">
            <summary>
            Move to right and down
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.In">
            <summary>
            Zoom in
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.Out">
            <summary>
            Zoom Out
            </summary>
        </member>
        <member name="F:Ozeki.Camera.MoveDirection.None">
            <summary>
            Standby
            </summary>
        </member>
        <member name="T:Ozeki.Camera.PatrolDirection">
            <summary>
            Represents the camera's patrol direction. The device will move to the direction, than moves back to it's starter position.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Preset.Add(System.String)">
            <summary>
            Adds the current position to the camera's presets' list.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Preset.Remove(System.String)">
            <summary>
            Removes the selected preset from the presets' list.
            </summary>
            <param name="presetName"></param>
        </member>
        <member name="M:Ozeki.Camera.Preset.GetPresets">
            <summary>
            Gets the camera's presets' list.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Preset.MoveTo(System.String)">
            <summary>
            Moves to the selected preset's position.
            </summary>
            <param name="presetName"></param>
        </member>
        <member name="M:Ozeki.Camera.Preset.Clear">
            <summary>
            Clears the preset list.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.RtspHeaders">
            <summary>
            Header Definitions from RFC2326
            http://www.ietf.org/rfc/rfc2326.txt
            </summary>
        </member>
        <member name="T:Ozeki.Camera.RtspMessage">
            <summary>
            Base class of RtspRequest and RtspResponse
            </summary>
        </member>
        <member name="F:Ozeki.Camera.RtspMessage.m_Body">
            <summary>
            The firstline of the RtspMessage and the Body
            </summary>
        </member>
        <member name="F:Ozeki.Camera.RtspMessage.m_Headers">
            <summary>
            Dictionary containing the headers of the RtspMessage
            </summary>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.#ctor">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.#ctor(Ozeki.Camera.RtspMessageType,System.Nullable{System.Double},System.Text.Encoding)">
            <summary>
            Constructs a RtspMessage
            </summary>
            <param name="messageType">The type of message to construct</param>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a RtspMessage from the given bytes
            </summary>
            <param name="bytes">The byte array to create the RtspMessage from</param>
            <param name="offset">The offset within the bytes to start creating the message</param>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.#ctor(System.ArraySegment{System.Byte})">
             <summary>
             Creates a managed representation of an abstract RtspMessage concept from RFC2326.
             </summary>
             <param name="packet">The array segment which contains the packet in whole at the offset of the segment. The Count of the segment may not contain more bytes than a RFC2326 message may contain.</param>
             <reference>
             RFC2326 - http://tools.ietf.org/html/rfc2326 - [Page 19]
             4.4 Message Length
            When a message body is included with a message, the length of that
            body is determined by one of the following (in order of precedence):
            1.     Any response message which MUST NOT include a message body
                    (such as the 1xx, 204, and 304 responses) is always terminated
                    by the first empty line after the header fields, regardless of
                    the entity-header fields present in the message. (Note: An
                    empty line consists of only CRLF.)
            2.     If a Content-Length header field (section 12.14) is present,
                    its value in bytes represents the length of the message-body.
                    If this header field is not present, a value of zero is
                    assumed.
            3.     By the server closing the connection. (Closing the connection
                    cannot be used to indicate the end of a request body, since
                    that would leave no possibility for the server to send back a
                    response.)
            Note that RTSP does not (at present) support the HTTP/1.1 "chunked"
            transfer coding(see [H3.6]) and requires the presence of the
            Content-Length header field.
                Given the moderate length of presentation descriptions returned,
                the server should always be able to determine its length, even if
                it is generated dynamically, making the chunked transfer encoding
                unnecessary. Even though Content-Length must be present if there is
                any entity body, the rules ensure reasonable behavior even if the
                length is not given explicitly.
             </reference>        
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.#ctor(Ozeki.Camera.RtspMessage)">
            <summary>
            Creates a RtspMessage by copying the properties of another.
            </summary>
            <param name="other">The other RtspMessage</param>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.ToString">
            <summary>
            Creates a 'string' representation of the RtspMessage including all binary data contained therein.
            </summary>
            <returns>A string which contains the entire message itself in the encoding of the RtspMessage.</returns>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.GetHeaders">
            <summary>
            Gets an array of all headers present in the RtspMessage
            </summary>
            <returns>The array containing all present headers</returns>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.GetHeader(System.String,System.String@)">
            <summary>
            Gets a header value with cases insensitivity
            </summary>
            <param name="name">The name of the header</param>
            <returns>The header value if found, otherwise null.</returns>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets or adds a header value
            </summary>
            <param name="name">The name of the header</param>
            <param name="value">The value of the header</param>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.ContainsHeader(System.String,System.String@)">
            <summary>
            Indicates of the RtspMessage contains a header with the given name.
            </summary>
            <param name="name">The name of the header to find</param>
            <param name="headerName">The value which is actually the name of the header searched for</param>
            <returns>True if contained, otherwise false</returns>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.RemoveHeader(System.String)">
            <summary>
            Removes a header from the RtspMessage
            </summary>
            <param name="name">The name of the header to remove</param>
            <returns>True if removed, false otherwise</returns>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.ToBytes">
            <summary>
            Creates a Packet from the RtspMessage which can be sent on the network
            </summary>
            <returns>The packet which represents this RtspMessage</returns>
        </member>
        <member name="M:Ozeki.Camera.RtspMessage.Dispose">
            <summary>
            Disposes of all resourced used by the RtspMessage
            </summary>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.UserAgent">
            <summary>
            Indicates the UserAgent of this RtspRquest
            </summary>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.StatusCode">
            <summary>
            Indicates the StatusCode of the RtspResponse
            </summary>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.Length">
            <summary>
            The length of the RtspMessage in bytes.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.Body">
            <summary>
            The body of the RtspMessage
            </summary>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.MessageType">
            <summary>
            Indicates if this RtspMessage is a request or a response
            </summary>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.CSeq">
            <summary>
            Indicates the CSeq of this RtspMessage
            </summary>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.Item(System.String)">
            <summary>
            Accesses the header value 
            </summary>
            <param name="header">The header name</param>
            <returns>The header value</returns>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.Encoding">
            <summary>
            The encoding of this RtspMessage. (Defaults to UTF-8)
            </summary>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.Transferred">
            <summary>
            Indicates when the RtspMessage was transferred if sent.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.RtspMessage.IsComplete">
            <summary>
            Indicates if the RtspMessage is complete
            </summary>
        </member>
        <member name="T:Ozeki.Camera.RtspMessage.RtspMessageException">
            <summary>
            Thrown when parsing a RtpMessage fails. The Tag property will usually have the data remnant from the operation.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.RtspMessageType">
            <summary>
            Enumeration to indicate the type of RtspMessage
            </summary>
        </member>
        <member name="F:Ozeki.Camera.RtspMessageType.Invalid">
            <summary>
            Invalid message
            </summary>
        </member>
        <member name="F:Ozeki.Camera.RtspMessageType.Request">
            <summary>
            Request message
            </summary>
        </member>
        <member name="F:Ozeki.Camera.RtspMessageType.Response">
            <summary>
            Response message
            </summary>
        </member>
        <member name="T:Ozeki.Camera.CameraMediaDescription">
            <summary>
            Represents the MediaDescription in a Session Description.
            Parses and Creates.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CameraMediaDescription.MediaType">
            <summary>
            The MediaType of the MediaDescription
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CameraMediaDescription.MediaPort">
            <summary>
            The MediaPort of the MediaDescription
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CameraMediaDescription.MediaProtocol">
            <summary>
            The MediaProtocol of the MediaDescription
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CameraMediaDescription.MediaFormat">
            <summary>
            The MediaFormat of the MediaDescription
            </summary>
        </member>
        <member name="T:Ozeki.Camera.SessionDescriptionLine">
            <summary>
            Low level class for dealing with Sdp lines with a format of 'X=V{st:sv0,sv1;svN}'    
            </summary>
            <remarks>Should use byte[] and should have Encoding as a property</remarks>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.Camera.SessionDescriptionLine.#ctor(System.Char,System.Int32)” -->
        <member name="M:Ozeki.Camera.SessionDescriptionLine.#ctor(System.String)">
            <summary>
            Parses and creates a SessionDescriptionLine from the given line
            </summary>
            <param name="line">The line from a SessionDescription</param>
        </member>
        <member name="M:Ozeki.Camera.SessionDescriptionLine.ToString">
            <summary>
            The string representation of the SessionDescriptionLine including the required new lines.
            </summary>
            <returns>The string representation of the SessionDescriptionLine including the required new lines.</returns>
        </member>
        <member name="T:Ozeki.Camera.CameraSessionDescription">
            <summary>
            Provides facilities for parsing and creating SessionDescription data
            http://en.wikipedia.org/wiki/Session_Description_Protocol
            http://tools.ietf.org/html/rfc4566
            </summary>
        </member>
        <member name="M:Ozeki.Camera.CameraSessionDescription.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructs a new Session Description
            </summary>
            <param name="protocolVersion">Usually 0</param>
            <param name="originatorAndSession">Compound string identifying origionator and session identifier</param>
            <param name="sessionName">name of the session</param>
        </member>
        <member name="M:Ozeki.Camera.CameraSessionDescription.#ctor(System.String)">
            <summary>
            Constructs a SessionDescription from the given contents of a Session Description Protocol message
            </summary>
            <param name="sdpContents">The Session Description Protocol usually recieved in the Describe request of a RtspClient</param>
        </member>
        <member name="M:Ozeki.Camera.CameraSessionDescription.#ctor(Ozeki.Camera.CameraSessionDescription)">
            <summary>
            Creates a copy of another SessionDescription
            </summary>
            <param name="other">The SessionDescription to copy</param>
        </member>
        <member name="T:Ozeki.Camera.CameraTimeDescription">
            <summary>
            Represents a TimeDescription with optional Repeat times.
            Parses and Creates.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.CameraServer.SetOnvifListenAddress(Ozeki.Camera.OnvifConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Ozeki.Camera.CameraServer.UnsubscribeOnvifListenAddress(Ozeki.Camera.OnvifConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Ozeki.Camera.CameraServer.SetListenAddress(System.String,System.Int32)">
            <summary>
            Sets the local address and port on which the IP camera server will listen for connections.
            </summary>
            <returns>True, if success; otherwise false</returns>
            <exception cref="T:Ozeki.Common.VoIPException">Throws a VoIPException when the local address is invalid.</exception>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.#ctor">
            <summary>
            Basic constructor for initializing.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.AddNewServer(Ozeki.Camera.CameraServerConfig)">
            <summary>
            Creates a new server with the given configuration.
            </summary>
            <param name="config">
            Configuration for the new server.
            </param>
            <returns>
            Returns true if the server has been created, otherwise false.
            </returns>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.GetServer(Ozeki.Camera.CameraServerConfig)">
            <summary>
            Gets the server definied by the given config.
            </summary>
            <param name="conf">
            CameraServerConfiguration object which identifies the server based on the Ip Address and port number.
            </param>
            <returns>
            Returns the server.
            </returns>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.RemoveServer(Ozeki.Camera.CameraServerConfig)">
            <summary>
            Removes a server definied by the given config.
            </summary>
            <param name="conf">
            CameraServerConfiguration object which identifies the server based on the Ip Address and port number.
            </param>
            <returns>
            Returns true if the server has been removed, otherwise false.
            </returns>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.StartServer(Ozeki.Camera.CameraServerConfig)">
            <summary>
            Starts the server definied by the given config.
            </summary>
            <param name="conf">
            CameraServerConfiguration object which identifies the server based on the Ip Address and port number.
            </param>
            <returns>
            Returns true if the server has been stated, otherwise false.
            </returns>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.StopServer(Ozeki.Camera.CameraServerConfig)">
            <summary>
            Stops the server definied by the given config.
            </summary>
            <param name="conf">
            CameraServerConfiguration object which identifies the server based on the Ip Address and port number.
            </param>
            <returns>
            Returns true if the server has been stopped, otherwise false.
            </returns>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.StopAllServers">
            <summary>
            Stops all servers.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.StartAllServers">
             <summary>
             Starts all servers.
             </summary>
             <returns>
            Returns true if and only if every server has been started, otherwise false.
             </returns>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.ClearAll">
            <summary>
            Removes all the servers managed by the MultiCameraServer object.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.MultiCameraServer.ModifyServerConfig(Ozeki.Camera.CameraServerConfig,Ozeki.Camera.CameraServerConfig)">
            <summary>
            Modifies a server identified by the oldconf parameter.
            If the server was running it will be stopped and restared after the modification.
            </summary>
            <param name="oldconf">
            CameraServerConfiguration object which identifies the server based on the Ip Address and port number.
            </param>
            <param name="config">
            New configuration which will replace the old.
            </param>
            <returns>
            returns true if the modification was successful, otherwise false.
            </returns>
        </member>
        <member name="P:Ozeki.Camera.MultiCameraServer.ServerCount">
            <summary>
            Gets the number of servers managed by the MultiCameraServer object.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.MultiCameraServer.ClientConnected">
            <summary>
            ClientConnected is raised when a client connects to a server managed by the MultiCameraServer object.
            This event must always be handled in order to connect the server's VideoSender and AudioSender with the client's VideoChannel and AudioChannel.
            In the handler you will be able to lay down conditions about the clients, the CameraServerConnectionArgs object will contain the server and client which wants to connect.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.MultiCameraServer.ClientDisconnected">
            <summary>
            ClientDisconnected is raised when a client disconnects from a server managed by the MultiCameraServer.
            It is recommended to handle this event
            </summary>
        </member>
        <member name="E:Ozeki.Camera.MultiCameraServer.ServerStarted">
            <summary>
            ServerStarted raised when StartServer() method is called. 
            </summary>
        </member>
        <member name="E:Ozeki.Camera.MultiCameraServer.ServerStopped">
            <summary>
            ServerStopped is raised when StopServer() method is called .
            </summary>
        </member>
        <member name="E:Ozeki.Camera.MultiCameraServer.AllServersStarted">
            <summary>
            AllServerStarted is raised when StartAllServers() method is called.
            </summary>
        </member>
        <member name="E:Ozeki.Camera.MultiCameraServer.AllServersStopped">
            <summary>
            AllServerStopped is raised when StopAllServers() method is called.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.MultiCameraServer.ServerList">
            <summary>
            Gets the list of the servers.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.MultiCameraServer.ConfigList">
            <summary>
            Gets the list of the server configurations.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.CameraUser">
            <summary>
            Represents the registered user of the camera device
            </summary>
        </member>
        <member name="T:Ozeki.Camera.ICameraUser">
            <summary>
            Represents the registered user of the camera device
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraUser.UserName">
            <summary>
            Gets the user's username.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.ICameraUser.UserLevel">
            <summary>
            Gets the user's level
            </summary>
        </member>
        <member name="M:Ozeki.Camera.CameraUser.#ctor(Ozeki.Camera.CameraUserLevel)">
            <summary>
            Represents the registered user of the camera device
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CameraUser.UserName">
            <summary>
            Gets or sets the user's username.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CameraUser.Password">
            <summary>
            Gets or sets the user's password
            </summary>
        </member>
        <member name="P:Ozeki.Camera.CameraUser.UserLevel">
            <summary>
            Gets the user's level
            </summary>
        </member>
        <member name="M:Ozeki.Camera.IUserManager.GetUsersList">
            <summary>
            Gets the list of users from the camera.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Camera.IUserManager.AddCameraUser(Ozeki.Camera.CameraUser)">
            <summary>
            Adds a user to the user list of the device (if the device supports it).
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Ozeki.Camera.IUserManager.RemoveCameraUser(System.String)">
            <summary>
            Removes a user from the user list of the device (if the device supports it).
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Ozeki.Camera.IUserManager.ModifyCameraUser(System.String,Ozeki.Camera.CameraUser)">
            <summary>
            Modifies the selected user of the device (if the device supports it).
            </summary>
            <param name="userName"></param>
            <param name="user"></param>
        </member>
        <member name="T:Ozeki.Camera.UserManager">
            <summary>
            Gives control of user management.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.UserManager.GetUsersList">
            <summary>
            Gets the current users' list from the camera.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Camera.UserManager.AddCameraUser(Ozeki.Camera.CameraUser)">
            <summary>
            Adds a user to the device's user's list (if the device supports it).
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Ozeki.Camera.UserManager.RemoveCameraUser(System.String)">
            <summary>
            Removes a user from the device's user's list (if the device supports it).
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Ozeki.Camera.UserManager.ModifyCameraUser(System.String,Ozeki.Camera.CameraUser)">
            <summary>
            Modifies the selected user of the device (if the device supports it).
            </summary>
            <param name="userName"></param>
            <param name="user"></param>
        </member>
        <member name="T:Ozeki.Camera.Utility">
            <summary>
            Contains common functions
            </summary>
        </member>
        <member name="M:Ozeki.Camera.Utility.IsOnIntranet(System.Net.IPAddress)">
            <summary>
            Retuns true if the ip address is one of the following
            IANA-reserved private IPv4 network ranges (from http://en.wikipedia.org/wiki/IP_address)
             Start 	      End 	
             10.0.0.0 	    10.255.255.255 	
             172.16.0.0 	  172.31.255.255 	
             192.168.0.0   192.168.255.255 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Camera.Utility.HexStringToBytes(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a String in the form 0011AABB to a Byte[] using the chars in the string as bytes to caulcate the decimal value.
            Lower case values are not supported and no error checking is performed.
            </summary>
            <notes>
            Reduced string allocations from managed version substring
            About 10 milliseconds faster then Managed when doing it 100,000 times. otherwise no change
            </notes>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Camera.Utility.FoundValidUniversalTextFormat(System.Byte[],System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Checks the first two bits and the last two bits of each byte while moving the count to the correct position while doing so.
            The function does not check array bounds or preserve the stack and prevents math overflow.
            </summary>
            <param name="buffer">The array to check</param>
            <param name="start">The offset to start checking</param>
            <param name="count">The amount of bytes in the buffer</param>
            <param name="reverse">optionally indicates if the bytes being checked should be reversed before being checked</param>
            <returns></returns>
            <remarks>If knew the width did you, faster it could be..</remarks>
        </member>
        <member name="M:Ozeki.Camera.Utility.ContainsBytes(System.Byte[],System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Indicates the position of the match in a given buffer to a given set of octets.
            If the match fails the start parameter will reflect the position of the last partial match, otherwise it will be incremented by <paramref name="octetCount"/>
            Additionally start and count will reflect the position of the last partially matched byte, E.g. if 1 octets were match start was incremented by 1.
            </summary>
            <param name="buffer">The bytes to search</param>
            <param name="start">The 0 based index to to start the forward based search</param>
            <param name="count">The amount of bytes to search in the buffer</param>
            <param name="octets">The bytes to search for</param>
            <param name="octetStart">The 0 based offset in the octets to search from</param>
            <param name="octetCount">The amount of octets required for a successful match</param>
            <returns>
            -1 if the match failed or could not be performed; otherwise,
            the position within the buffer reletive to the start position in which the first occurance of octets given the octetStart and octetCount was matched.
            If more than 1 octet is required for a match and the buffer does not encapsulate the entire match start will still reflect the occurance of the partial match.
            </returns>
        </member>
        <member name="M:Ozeki.Camera.Utility.AlignedReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.Socket,System.Net.Sockets.SocketError@)">
            <summary>
            Receives the given amount of bytes into the buffer given a offset and an amount.
            </summary>
            <param name="buffer">The array to receive into</param>
            <param name="offset">The location to receive into</param>
            <param name="amount">The 0 based amount of bytes to receive, 0 will have no result</param>
            <param name="socket">The socket to receive on</param>
            <returns>The amount of bytes recieved which will be equal to the amount paramter unless the data was unable to fit in the given buffer</returns>
        </member>
        <member name="M:Ozeki.Camera.Utility.GetFirstV4IPAddress">
            <summary>
            Determine the computers first Ipv4 Address 
            </summary>
            <returns>The First IPV4 Address Found on the Machine</returns>
        </member>
        <member name="M:Ozeki.Camera.Utility.DateTimeToNptTimestamp32(System.DateTime)">
            <summary>
            Converts specified DateTime value to short NPT time.
            </summary>
            <param name="value">DateTime value to convert.</param>
            <returns>Returns NPT value.</returns>
            <notes>
            In some fields where a more compact representation is
            appropriate, only the middle 32 bits are used; that is, the low 16
            bits of the integer part and the high 16 bits of the fractional part.
            The high 16 bits of the integer part must be determined independently.
            </notes>
        </member>
        <member name="M:Ozeki.Camera.Utility.DateTimeToNptTimestamp(System.DateTime)">
            <summary>
            Converts specified DateTime value to long NPT time.
            </summary>
            <param name="value">DateTime value to convert. This value must be in local time.</param>
            <returns>Returns NPT value.</returns>
            <notes>
            Wallclock time (absolute date and time) is represented using the
            timestamp format of the Network Time Protocol (NPT), which is in
            seconds relative to 0h UTC on 1 January 1900 [4].  The full
            resolution NPT timestamp is a 64-bit unsigned fixed-point number with
            the integer part in the first 32 bits and the fractional part in the
            last 32 bits. In some fields where a more compact representation is
            appropriate, only the middle 32 bits are used; that is, the low 16
            bits of the integer part and the high 16 bits of the fractional part.
            The high 16 bits of the integer part must be determined independently.
            </notes>
        </member>
        <member name="M:Ozeki.Camera.IWebCamera.DisplayPropertiesWindow">
            <summary>
            Displays the properties window of the camera.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IWebCamera.DeviceID">
            <summary>
            Gets the identifier of the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IWebCamera.DeviceName">
            <summary>
            Gets the name of the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IWebCamera.Capabilities">
            <summary>
            Gets the supported resolutions and frame rates for the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IWebCamera.CurrentFrameRate">
            <summary>
            Gets the current frame rate of the capture.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.IWebCamera.DesiredFrameRate">
            <summary>
            Gets or sets the average frame rate of the capturing device.
            </summary>
        </member>
        <member name="T:Ozeki.Camera.WebCamera">
            <summary>
            Class for capturing video data with webcamera devices.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMedia.Start">
            <summary>
            Starts the media.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMedia.Stop">
            <summary>
            Stops the media.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.WebCamera.Start">
            <summary>
            Starts the capturing from the selected webcamera.
            <remarks>
            Throws an <see cref="T:System.Exception"/> when no webcamera selected.
            </remarks>
            </summary>
        </member>
        <member name="M:Ozeki.Camera.WebCamera.Stop">
            <summary>
            Stops the capturing.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.WebCamera.Connect">
            <summary>
            Starts the capturing from the selected webcamera.
            <remarks>
            Throws an <see cref="T:System.Exception"/> when no webcamera selected.
            </remarks>
            </summary>
        </member>
        <member name="M:Ozeki.Camera.WebCamera.Disconnect">
            <summary>
            Stops the capturing.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.WebCamera.DisplayPropertiesWindow">
            <summary>
            Displays the properties window of the camera.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.WebCamera.DeviceID">
            <summary>
            Gets the identifier of the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.WebCamera.Moniker">
            <summary>
            Gets the moniker of the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.WebCamera.DeviceName">
            <summary>
            Gets the name of the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.WebCamera.Capabilities">
            <summary>
            Gets the supported resolutions and frame rates for the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.WebCamera.Resolution">
            <summary>
            Gets or sets the current resolution of the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.WebCamera.CurrentFrameRate">
            <summary>
            Gets the current frame rate of the capture.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.WebCamera.DesiredFrameRate">
            <summary>
            Gets or sets the average frame rate of the capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Camera.WebCamera.Capturing">
            <summary>
            Gets a boolean value indicating whether the capuring is started. 
            </summary>
        </member>
        <member name="P:Ozeki.Camera.WebCamera.Initialized">
            <summary>
            Gets a boolean value indicating whether the device has been initialized.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.WebCameraFactory.GetDevices">
            <summary>
            Retrieves the available webcamera devices.
            </summary>
        </member>
        <member name="M:Ozeki.Camera.WebCameraFactory.GetDevice(Ozeki.Media.VideoDeviceInfo,Ozeki.Media.Resolution,System.Int32)">
            <summary>
            Retreives the specified webcamera device with additional parameters.
            </summary>
            <param name="info">Device information.</param>
            <param name="resolution">Size of the captured frame.</param>
            <param name="desiredFrameRate">Desired frame rate.</param>
            <returns>The webcamera object.</returns>
        </member>
        <member name="M:Ozeki.Camera.WebCameraFactory.GetDefaultDevice">
            <summary>
            Retreives the default webcamera device.
            </summary>
            <returns>The default webcamera device or null if no devices found.</returns>
        </member>
        <member name="M:Ozeki.Camera.WebCameraFactory.GetDevice(Ozeki.Media.VideoDeviceInfo)">
            <summary>
            Retreives the specified webcamera device.
            </summary>
            <param name="info">The specific device by the given parameter.</param>
            <returns>The webcamera object.</returns>
        </member>
        <member name="T:Ozeki.Media.AudioApi">
            <summary>
            Defines API types for handling native audio resources.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioApi.WASAPI">
            <summary>
            Core Audio API (supported only on Vista and above)
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioApi.Waveform">
            <summary>
            Older Windows audio API
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioApi.PortAudio">
            <summary>
            PortAudio API (Supported only on Linux)
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioConverterType">
            <summary>
            Defines API types for audio resampling.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioConverterType.Speex">
            <summary>
            Linux audio compression converter
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioConverterType.ACM">
            <summary>
            Windows Multimedia Audio Compression Manager converter
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioConverterType.DMO">
            <summary>
            DirectX Media Object converter. Supported OS: Vista and above
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioConverterType.None">
            <summary>
            Using no converter.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioData">
            <summary>
            Provides data with format information for audio.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MediaData">
            <summary>
            Provides information for media data.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaData.#ctor(Ozeki.Media.MediaType,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaData"/> class.
            </summary>
            <param name="mediaType">The type of the media data.</param>
            <param name="timestamp">The timestamp for the media data.</param>
            <param name="data">The media data.</param>
        </member>
        <member name="P:Ozeki.Media.MediaData.MediaType">
            <summary>
            Gets the type of the media data.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaData.Data">
            <summary>
            Gets the media data as byte array.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaData.Timestamp">
            <summary>
            Gets the timestamp of the media data.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioData.#ctor(Ozeki.Media.AudioFormat,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioData"/> class.
            </summary>
            <param name="format">The format of the audio data.</param>
            <param name="data">The audio data.</param>
            <param name="timestamp">The timestamp for the audio data.</param>
        </member>
        <member name="P:Ozeki.Media.AudioData.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioFormat">
            <summary>
            Defines format information of audio data.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioFormat"/> class with default values. (8000 Hz, 16 bit, mono)
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.#ctor(Ozeki.Media.AudioType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioFormat"/> class with default values. (8000 Hz, 16 bit, mono)
            </summary>
            <param name="audioType">The encoding type of the audio.</param>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioFormat"/> class.
            </summary>
            <param name="sampleRate">Sample rate.</param>
            <param name="channels">Channels.</param>
            <param name="bitRate">Bits per sample.</param>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.#ctor(System.Int32,System.Int32,System.Int32,Ozeki.Media.AudioType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioFormat"/> class.
            </summary>
            <param name="sampleRate">Sample rate.</param>
            <param name="channels">Channels.</param>
            <param name="bitRate">Bits per sample.</param>
            <param name="audioType">The encoding type of the audio.</param>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioFormat"/> class.
            </summary>
            <param name="sampleRate">Sample rate.</param>
            <param name="channels">Channels.</param>
            <param name="bitRate">Bits per sample.</param>
            <param name="packetizationTime">Packetization time.</param>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Ozeki.Media.AudioType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioFormat"/> class.
            </summary>
            <param name="sampleRate">Sample rate.</param>
            <param name="channels">Channels.</param>
            <param name="bitRate">Bits per sample.</param>
            <param name="packetizationTime">Packetization time.</param>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Ozeki.Media.AudioFormat"/> is equal to the current <see cref="T:Ozeki.Media.AudioFormat"/>.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns>true if the specified <see cref="T:Ozeki.Media.AudioFormat"/> is equal to the current <see cref="T:Ozeki.Media.AudioFormat"/>; otherwise, false.</returns>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.GetByteSize">
            <summary>
            Specifies that the size of audio data of the given audio type in bytes
            </summary>
            <returns>The size of the audio data in bytes</returns>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:Ozeki.Media.AudioFormat"/>.</returns>
        </member>
        <member name="M:Ozeki.Media.AudioFormat.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioFormat.SampleRate">
            <summary>
            Gets the sample rate, in samples per second (hertz).
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioFormat.mpeg4_aac_conf">
            <summary>
            mpeg4 aac formátumnál ezt is tovább kell adni az elején az inicializáláshoz
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioFormat.Channels">
            <summary>
            Gets the number of channels.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioFormat.BitRate">
            <summary>
            Gets the bitrate of the sample.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioFormat.PacketizationTime">
            <summary>
            Gets the packetization time.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioFormat.AudioCodecType">
            <summary>
            Gets the codec type of data.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioFormat.AudioCodecBitrate">
            <summary>
            Gets the bitrate of the vocoder the data encoded with.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioType">
            <summary>
            Defines types for audio data.
            </summary>
        </member>
        <member name="T:Ozeki.Media.ACMStream">
            <summary>
            AcmStream encapsulates an Audio Compression Manager Stream
            used to convert audio from one format to another
            </summary>
        </member>
        <member name="M:Ozeki.Media.ACMStream.#ctor(Ozeki.Media.WaveFormat,Ozeki.Media.WaveFormat)">
            <summary>
            Creates a new ACM stream to convert one format to another. Note that
            not all conversions can be done in one step
            </summary>
            <param name="sourceFormat">The source audio format</param>
            <param name="destFormat">The destination audio format</param>
        </member>
        <member name="M:Ozeki.Media.ACMStream.#ctor(System.Int32,Ozeki.Media.WaveFormat,Ozeki.Media.WaveFilter)">
            <summary>
            Creates a new ACM stream to convert one format to another, using a 
            specified driver identified and wave filter
            </summary>
            <param name="driverId">the driver identifier</param>
            <param name="sourceFormat">the source format</param>
            <param name="waveFilter">the wave filter</param>
        </member>
        <member name="M:Ozeki.Media.ACMStream.SourceToDest(System.Int32)">
            <summary>
            Returns the number of output bytes for a given number of input bytes
            </summary>
            <param name="source">Number of input bytes</param>
            <returns>Number of output bytes</returns>
        </member>
        <member name="M:Ozeki.Media.ACMStream.DestToSource(System.Int32)">
            <summary>
            Returns the number of source bytes for a given number of destination bytes
            </summary>
            <param name="dest">Number of destination bytes</param>
            <returns>Number of source bytes</returns>
        </member>
        <member name="M:Ozeki.Media.ACMStream.SuggestPcmFormat(Ozeki.Media.WaveFormat)">
            <summary>
            Suggests an appropriate PCM format that the compressed format can be converted
            to in one step
            </summary>
            <param name="compressedFormat">The compressed format</param>
            <returns>The PCM format</returns>
        </member>
        <member name="M:Ozeki.Media.ACMStream.Convert(System.Int32,System.Int32@)">
            <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
            <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
            <param name="sourceBytesConverted">The number of source bytes actually converted</param>
            <returns>The number of converted bytes in the DestinationBuffer</returns>
        </member>
        <member name="M:Ozeki.Media.ACMStream.Convert(System.Int32)">
            <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
            <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
            <returns>The number of converted bytes in the DestinationBuffer</returns>
        </member>
        <member name="M:Ozeki.Media.ACMStream.Dispose">
            <summary>
            Frees resources associated with this ACM Stream
            </summary>
        </member>
        <member name="M:Ozeki.Media.ACMStream.Dispose(System.Boolean)">
            <summary>
            Frees resources associated with this ACM Stream
            </summary>
        </member>
        <member name="M:Ozeki.Media.ACMStream.Finalize">
            <summary>
            Frees resources associated with this ACM Stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.ACMStream.SourceBuffer">
            <summary>
            Returns the Source Buffer. Fill this with data prior to calling convert
            </summary>
        </member>
        <member name="P:Ozeki.Media.ACMStream.DestBuffer">
            <summary>
            Returns the Destination buffer. This will contain the converted data
            after a successful call to Convert
            </summary>
        </member>
        <member name="M:Ozeki.Media.IAudioDataConverter.Convert(System.Byte[])">
            <summary>
            Converts the input PCM data to the destination format.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IAudioDataConverter.Dispose">
            <summary>
            Disposes the converter.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IAudioDataConverter.InputFormat">
            <summary>
            Gets the source AudioWaveFormat
            </summary>
        </member>
        <member name="P:Ozeki.Media.IAudioDataConverter.OutputFormat">
            <summary>
            Gets the destination AudioWaveFormat
            </summary>
        </member>
        <member name="P:Ozeki.Media.IAudioDataConverter.Disposed">
            <summary>
            Gets a boolean value indicating whether the converted is disposed.
            </summary>
        </member>
        <member name="T:Ozeki.Media.ACMAudioDataConverter">
            <summary>
            Converts audio from a specified AudioWaveFormat to another AudioWaveFormat.
            </summary>
        </member>
        <member name="M:Ozeki.Media.ACMAudioDataConverter.#ctor(Ozeki.Media.WaveFormat,Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.ACMAudioDataConverter"/> class.
            </summary>
            <param name="sourceFormat">The AudioWaveFormat of the source.</param>
            <param name="destinationFormat">The AudioWaveFormat of the destination.</param>
        </member>
        <member name="M:Ozeki.Media.ACMAudioDataConverter.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ozeki.Media.ACMAudioDataConverter.Convert(System.Byte[])">
            <summary>
            Converts the value of the source AudioWaveFormat to the destination AudioWaveFormat.
            </summary>
            <param name="source">Raw PCM data</param>
            <returns>Converted PCM data</returns>
        </member>
        <member name="M:Ozeki.Media.ACMAudioDataConverter.DestToSource(System.Int32)">
            <summary>
            Azt adja vissza, hogy megadott konvertált hosszt, hány byteon lehet ábrázolni a forrásban
            </summary>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.ACMAudioDataConverter.SourceToDest(System.Int32)">
            <summary>
            Azt adja vissza, hogy megadott source hosszt, hány byteon lehet ábrázolni a konvertálás után
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.ACMAudioDataConverter.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="P:Ozeki.Media.ACMAudioDataConverter.InputFormat">
            <summary>
            Gets the source AudioWaveFormat
            </summary>
        </member>
        <member name="P:Ozeki.Media.ACMAudioDataConverter.OutputFormat">
            <summary>
            Gets the destination AudioWaveFormat
            </summary>
        </member>
        <member name="P:Ozeki.Media.ACMAudioDataConverter.Disposed">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:Ozeki.Media.ACMAudioDataConverter"/> has been disposed.
            </summary>
        </member>
        <member name="T:Ozeki.Media.Mp3DataConverter">
            <summary>
            Converts MP3 to WAV
            </summary>
        </member>
        <member name="M:Ozeki.Media.Mp3DataConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Mp3DataConverter"/> class. with default AudioWaveFormat (8 KHz, 16 bit, mono)
            </summary>
        </member>
        <member name="M:Ozeki.Media.Mp3DataConverter.#ctor(Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Mp3DataConverter"/> class.
            </summary>
            <param name="destinationFormat">The specified AudioWaveFormat</param>
        </member>
        <member name="M:Ozeki.Media.Mp3DataConverter.Convert(System.Byte[])">
            <summary>
            Converts mp3 data into wave data.
            </summary>
            <param name="data">The mp3 data.</param>
            <returns>The wave data.</returns>
        </member>
        <member name="T:Ozeki.Media.StreamConverter">
            <summary>
            Can write a stream to another stream and converting its format.
            </summary>
        </member>
        <member name="M:Ozeki.Media.StreamConverter.#ctor(Ozeki.Media.WaveFileReader,Ozeki.Media.WaveFileWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.StreamConverter"/> class.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="destinationStream">The destination stream.</param>
        </member>
        <member name="M:Ozeki.Media.StreamConverter.ConvertAsync">
            <summary>
            Begins converting asynchronously the source stream into the destination stream. 
            </summary>
        </member>
        <member name="M:Ozeki.Media.StreamConverter.Convert">
            <summary>
            Converts the source stream into the destination stream. 
            </summary>
        </member>
        <member name="P:Ozeki.Media.StreamConverter.IsBusy">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:Ozeki.Media.StreamConverter"/> is busy.
            </summary>
        </member>
        <member name="E:Ozeki.Media.StreamConverter.ConversionCompleted">
            <summary>
            Occurs when the conversion finished.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioClient">
            <summary>
            Core Audio IAudioClient wrapper
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioClient.Initialize(Ozeki.Media.AudioClientShareMode,Ozeki.Media.AudioClientStreamFlags,System.Int64,System.Int64,Ozeki.Media.WaveFormat,System.Guid)">
            <summary>
            Initializes the audio stream.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioClient.IsFormatSupported(Ozeki.Media.AudioClientShareMode,Ozeki.Media.WaveFormat)">
            <summary>
            Gets whether the audio endpoint device supports a particular stream format.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioClient.IsFormatSupported(Ozeki.Media.AudioClientShareMode,Ozeki.Media.WaveFormat,Ozeki.Media.WaveFormatExtensible@)">
            <summary>
            Gets whether the audio endpoint device supports a particular stream format.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioClient.Reset">
            <summary>
            Resets the audio stream. Requires initialization.
            Reset is a control method that the client calls to reset a stopped audio stream. 
            Resetting the stream flushes all pending data and resets the audio clock stream 
            position to 0. This method fails if it is called on a stream that is not stopped
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioClient.SetEventHandle(System.IntPtr)">
            <summary>
            Sets the event handle that the audio engine will signal each time a buffer becomes ready to be processed by the client. Requires initialization.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioClient.Start">
            <summary>
            Starts the audio stream. Requires initialization.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioClient.Stop">
            <summary>
            Stops the audio stream. Requires initialization.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioClient.BufferSize">
            <summary>
            Gets the maximum capacity of the audio buffer. Requires initialization.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioClient.CurrentPadding">
            <summary>
            Gets the number of frames of padding in the endpoint buffer. Requires initialization.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioClient.DefaultDevicePeriod">
            <summary>
            Gets the length of the default periodic interval separating successive processing passes by the audio engine on the data in the endpoint buffer.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioClient.MinimumDevicePeriod">
            <summary>
            Gets the length of the minimum periodic interval separating successive processing passes by the audio engine on the data in the endpoint buffer.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioClient.MixFormat">
            <summary>
            Gets the stream format that the audio engine uses for its internal processing of shared-mode streams. Requires initialization.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioClient.StreamLatency">
            <summary>
            Gets the maximum latency for the current stream. Requires initialization.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioEndpointVolume.Mute">
            <summary>
            Mute
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioClientSessionFlags">
            <summary>
            Characteristics of an audio session associated with the stream.
            </summary>
            <remarks>AUDCLNT_SESSIONFLAGS_XXX Constants</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientSessionFlags.ExpireWhenUnowned">
            <summary>
            The session expires when there are no associated streams and owning session control objects holding references.
            </summary>
            <remarks>AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientSessionFlags.DisplayHide">
            <summary>
            The volume control is hidden in the volume mixer user interface when the audio session is created.
            If the session associated with the stream already exists before IAudioClient::Initialize opens the stream, the volume control is displayed in the volume mixer.
            </summary>
            <remarks>AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientSessionFlags.DisplayHideWhenExpired">
            <summary>
            The volume control is hidden in the volume mixer user interface after the session expires.
            </summary>
            <remarks>AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED</remarks>
        </member>
        <member name="T:Ozeki.Media.AudioClientStreamFlags">
            <summary>
            Specifies characteristics that a client can assign to an audio stream during the initialization of the stream.
            </summary>
            <remarks>AUDCLNT_STREAMFLAGS_XXX Constants</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientStreamFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientStreamFlags.CrossProcess">
            <summary>
            The audio session for the stream is a cross-process session. A cross-process session can accept streams from more than one process.
            </summary>
            <remarks>AUDCLNT_STREAMFLAGS_CROSSPROCESS</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientStreamFlags.Loopback">
            <summary>
            Enables loopback recording. In loopback recording, the audio engine copies the audio stream
            that is being played by a rendering endpoint device into an audio endpoint buffer so that a WASAPI client can capture the stream.
            </summary>
            <remarks>AUDCLNT_STREAMFLAGS_LOOPBACK</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientStreamFlags.EventCallback">
            <summary>
            Enables event-driven buffering.
            </summary>
            <remarks>AUDCLNT_STREAMFLAGS_EVENTCALLBACK</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientStreamFlags.NoPersist">
            <summary>
            The volume and mute settings for an audio session will not persist across system restarts.     
            </summary>
            <remarks>AUDCLNT_STREAMFLAGS_NOPERSIST</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientStreamFlags.RateAdjust">
            <summary>
            This constant is new in Windows 7. The sample rate of the stream is adjusted to a rate specified by an application.
            </summary>
            <remarks>AUDCLNT_STREAMFLAGS_RATEADJUST</remarks>
        </member>
        <member name="T:Ozeki.Media.DeviceState">
            <summary>
            The DEVICE_STATE_XXX constants indicate the current state of an audio endpoint device. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.DeviceState.Active">
            <summary>
            The audio endpoint device is active. That is, the audio adapter that connects to the endpoint device is present and enabled.
            In addition, if the endpoint device plugs into a jack on the adapter, then the endpoint device is plugged in.
            </summary>
            <remarks>DEVICE_STATE_ACTIVE</remarks>
        </member>
        <member name="F:Ozeki.Media.DeviceState.Disabled">
            <summary>
            The audio endpoint device is disabled. The user has disabled the device in the Windows multimedia control panel.
            </summary>
            <remarks>DEVICE_STATE_DISABLED</remarks>
        </member>
        <member name="F:Ozeki.Media.DeviceState.NotPresent">
            <summary>
            The audio endpoint device is not present because the audio adapter that connects to the endpoint device has been removed from the system,
            or the user has disabled the adapter device in Device Manager.
            </summary>
            <remarks>DEVICE_STATE_NOTPRESENT</remarks>
        </member>
        <member name="F:Ozeki.Media.DeviceState.Unplugged">
            <summary>
            The audio endpoint device is unplugged. The audio adapter that contains the jack for the endpoint device is present and enabled,
            but the endpoint device is not plugged into the jack. Only a device with jack-presence detection can be in this state.
            </summary>
            <remarks>DEVICE_STATE_UNPLUGGED</remarks>
        </member>
        <member name="F:Ozeki.Media.DeviceState.All">
            <summary>
            Includes audio endpoint devices in all states—active, disabled, not present, and unplugged.
            </summary>
            <remarks>DEVICE_STATEMASK_ALL</remarks>
        </member>
        <member name="F:Ozeki.Media.EndpointHardwareSupport.SupportVolume">
            <summary>
            The audio endpoint device supports a hardware volume control.
            </summary>
            <remarks>ENDPOINT_HARDWARE_SUPPORT_VOLUME</remarks>
        </member>
        <member name="F:Ozeki.Media.EndpointHardwareSupport.SupportMute">
            <summary>
            The audio endpoint device supports a hardware mute control.
            </summary>
            <remarks>ENDPOINT_HARDWARE_SUPPORT_MUTE</remarks>
        </member>
        <member name="F:Ozeki.Media.EndpointHardwareSupport.SupportMeter">
            <summary>
            The audio endpoint device supports a hardware peak meter.
            </summary>
            <remarks>ENDPOINT_HARDWARE_SUPPORT_METER</remarks>
        </member>
        <member name="T:Ozeki.Media.AudioClientBufferFlags">
            <summary>
            Defines flags that indicate the status of an audio endpoint buffer.
            </summary>
            <remarks>_AUDCLNT_BUFFERFLAGS</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientBufferFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientBufferFlags.DataDiscontinuity">
            <summary>
            The data in the packet is not correlated with the previous packet's device position; this is possibly due to a stream state transition or timing glitch.
            </summary>
            <remarks>AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientBufferFlags.Silent">
            <summary>
            Treat all of the data in the packet as silence and ignore the actual data values.
            </summary>
            <remarks>AUDCLNT_BUFFERFLAGS_SILENT</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientBufferFlags.TimestampError">
            <summary>
            The time at which the device's stream position was recorded is uncertain.
            </summary>
            <remarks>AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.S_OK">
            <summary>
            S_OK
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.S_FALSE">
            <summary>
            S_FALSE
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.NOT_INITIALIZED">
            <summary>
            The audio stream has not been successfully initialized.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.ALREADY_INITIALIZED">
            <summary>
            The IAudioClient object is already initialized.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.WRONG_ENDPOINT_TYPE">
            <summary>
            The caller tried to access an IAudioCaptureClient interface on a rendering endpoint, or an IAudioRenderClient interface on a capture endpoint.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.DEVICE_INVALIDATED">
            <summary>
            The audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.NOT_STOPPED">
            <summary>
            The audio stream was not stopped at the time the call was made.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.BUFFER_TOO_LARGE">
            <summary>
            The NumFramesRequested value exceeds the available buffer space (buffer size minus padding size).
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.OUT_OF_ORDER">
            <summary>
            A previous IAudioRenderClient::GetBuffer call is still in effect.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.UNSUPPORTED_FORMAT">
            <summary>
            The audio engine (shared mode) or audio endpoint device (exclusive mode) does not support the specified format.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.DEVICE_IN_USE">
            <summary>
            The endpoint device is already in use. Either the device is being used in exclusive mode, or the device is being used in shared mode and the caller asked to use the device in exclusive mode. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.BUFFER_OPERATION_PENDING">
            <summary>
            Buffer cannot be accessed because a stream reset is in progress.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.EXCLUSIVE_MODE_NOT_ALLOWED">
            <summary>
            The caller is requesting exclusive-mode use of the endpoint device, but the user has disabled exclusive-mode use of the device.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.ENDPOINT_CREATE_FAILED">
            <summary>
            The method failed to create the audio endpoint for the render or the capture device. This can occur if the audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.SERVICE_NOT_RUNNING">
            <summary>
            The Windows audio service is not running.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.EVENTHANDLE_NOT_EXPECTED">
            <summary>
            The audio stream was not initialized for event-driven buffering.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.BUFDURATION_PERIOD_NOT_EQUAL">
            <summary>
            The AUDCLNT_STREAMFLAGS_EVENTCALLBACK flag is set but parameters hnsBufferDuration and hnsPeriodicity are not equal.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.EVENTHANDLE_NOT_SET">
            <summary>
            The audio stream is configured to use event-driven buffering, but the caller has not called IAudioClient::SetEventHandle to set the event handle on the stream.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.BUFFER_SIZE_ERROR">
            <summary>
            The stream is exclusive mode and uses event-driven buffering, but the client attempted to get a packet that was not the size of the buffer.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientReturnCodes.CPUUSAGE_EXCEEDED">
            <summary>
            Indicates that the process-pass duration exceeded the maximum CPU usage.
            The audio engine keeps track of CPU usage by maintaining the number of times the process-pass duration exceeds the maximum CPU usage.
            The maximum CPU usage is calculated as a percent of the engine's periodicity.
            The percentage value is the system's CPU throttle value (within the range of 10% and 90%).
            If this value is not found, then the default value of 40% is used to calculate the maximum CPU usage. 
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioClientShareMode">
            <summary>
            Defines constants that indicate whether an audio stream will run in shared mode or in exclusive mode.
            </summary>
            <remarks>AUDCLNT_SHAREMODE</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientShareMode.Shared">
            <summary>
            The client can share the audio endpoint device with clients that run in other user-mode processes.
            </summary>
            <remarks>AUDCLNT_SHAREMODE_SHARED</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientShareMode.Exclusive">
            <summary>
            The Windows audio service attempts to establish a connection in which the client has exclusive access to the audio endpoint device.
            </summary>
            <remarks>AUDCLNT_SHAREMODE_EXCLUSIVE</remarks>
        </member>
        <member name="T:Ozeki.Media.AudioClientStreamOptions">
            <summary>
            Defines values that describe the characteristics of an audio stream.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioClientStreamOptions.None">
            <summary>
            No stream options.
            </summary>
            <remarks>AUDCLNT_STREAMOPTIONS_NONE</remarks>
        </member>
        <member name="F:Ozeki.Media.AudioClientStreamOptions.Raw">
            <summary>
            The audio stream is a 'raw' stream that bypasses all signal processing except for endpoint specific, always-on processing in the APO, driver, and hardware. 
            </summary>
            <remarks>AUDCLNT_STREAMOPTIONS_RAW</remarks>
        </member>
        <member name="T:Ozeki.Media.EDataFlow">
            <summary>
            The EDataFlow enumeration defines constants that indicate the direction in which audio data flows between an audio endpoint device and an application.
            </summary>
        </member>
        <member name="F:Ozeki.Media.EDataFlow.Render">
            <summary>
            Audio rendering stream. Audio data flows from the application to the audio endpoint device, which renders the stream.
            </summary>
        </member>
        <member name="F:Ozeki.Media.EDataFlow.Capture">
            <summary>
            Audio capture stream. Audio data flows from the audio endpoint device that captures the stream, to the application.
            </summary>
        </member>
        <member name="F:Ozeki.Media.EDataFlow.All">
            <summary>
            Audio rendering or capture stream. Audio data can flow either from the application to the audio endpoint device, or from the audio endpoint device to the application.
            </summary>
        </member>
        <member name="T:Ozeki.Media.ERole">
            <summary>
            The ERole enumeration defines constants that indicate the role that the system has assigned to an audio endpoint device.
            </summary>
        </member>
        <member name="F:Ozeki.Media.ERole.Console">
            <summary>
            Games, system notification sounds, and voice commands.
            </summary>
        </member>
        <member name="F:Ozeki.Media.ERole.Multimedia">
            <summary>
            Music, movies, narration, and live music recording.
            </summary>
        </member>
        <member name="F:Ozeki.Media.ERole.Communications">
            <summary>
            Voice communications (talking to another person).
            </summary>
        </member>
        <member name="F:Ozeki.Media.StorageAccessMode.Read">
            <summary>
            STGM_READ
            </summary>
        </member>
        <member name="F:Ozeki.Media.StorageAccessMode.Write">
            <summary>
            STGM_WRITE
            </summary>
        </member>
        <member name="F:Ozeki.Media.StorageAccessMode.ReadWrite">
            <summary>
            STGM_READWRITE
            </summary>
        </member>
        <member name="T:Ozeki.Media.PropertyKey">
            <summary>
            Specifies the FMTID/PID identifier that programmatically identifies a property.
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKey.formatId">
            <summary>
            A unique GUID for the property.
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKey.propertyId">
            <summary>
            A property identifier (PID).
            </summary>
        </member>
        <member name="M:Ozeki.Media.PropertyStore.Contains(Ozeki.Media.PropertyKey)">
            <summary>
            Contains property guid
            </summary>
            <param name="key">Looks for a specific key</param>
            <returns>True if found</returns>
        </member>
        <member name="M:Ozeki.Media.PropertyStore.Get(System.Int32)">
            <summary>
            Gets property key at sepecified index
            </summary>
            <param name="index">Index</param>
            <returns>Property key</returns>
        </member>
        <member name="M:Ozeki.Media.PropertyStore.GetValue(System.Int32)">
            <summary>
            Gets property value at specified index
            </summary>
            <param name="index">Index</param>
            <returns>Property value</returns>
        </member>
        <member name="P:Ozeki.Media.PropertyStore.Count">
            <summary>
            Property Count
            </summary>
        </member>
        <member name="P:Ozeki.Media.PropertyStore.Item(System.Int32)">
            <summary>
            Gets property by index
            </summary>
            <param name="index">Property index</param>
            <returns>The property</returns>
        </member>
        <member name="P:Ozeki.Media.PropertyStore.Item(Ozeki.Media.PropertyKey)">
            <summary>
            Indexer by guid
            </summary>
            <param name="key">Property Key</param>
            <returns>Property or null if not found</returns>
        </member>
        <member name="P:Ozeki.Media.PropertyStoreProperty.Key">
            <summary>
            Property Key
            </summary>
        </member>
        <member name="P:Ozeki.Media.PropertyStoreProperty.Value">
            <summary>
            Property Value
            </summary>
        </member>
        <member name="T:Ozeki.Media.PropVariant">
            <summary>
            from Propidl.h.
            http://msdn.microsoft.com/en-us/library/aa380072(VS.85).aspx
            contains a union so we have to do an explicit layout
            </summary>
        </member>
        <member name="M:Ozeki.Media.PropVariant.FromLong(System.Int64)">
            <summary>
            Creates a new PropVariant containing a long value
            </summary>
        </member>
        <member name="M:Ozeki.Media.PropVariant.GetBlob">
            <summary>
            Helper method to gets blob data
            </summary>
        </member>
        <member name="M:Ozeki.Media.PropVariant.GetBlobAsArrayOf``1">
            <summary>
            Interprets a blob as an array of structs
            </summary>
        </member>
        <member name="M:Ozeki.Media.PropVariant.Clear">
            <summary>
            allows freeing up memory, might turn this into a Dispose method?
            </summary>
        </member>
        <member name="P:Ozeki.Media.PropVariant.DataType">
            <summary>
            Gets the type of data in this PropVariant
            </summary>
        </member>
        <member name="P:Ozeki.Media.PropVariant.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMMNotificationClient.OnDeviceStateChanged(System.String,Ozeki.Media.DeviceState)">
            <summary>
            Device State Changed
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMMNotificationClient.OnDeviceAdded(System.String)">
            <summary>
            Device Added
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMMNotificationClient.OnDeviceRemoved(System.String)">
            <summary>
            Device Removed
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMMNotificationClient.OnDefaultDeviceChanged(Ozeki.Media.EDataFlow,Ozeki.Media.ERole,System.String)">
            <summary>
            Default Device Changed
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMMNotificationClient.OnPropertyValueChanged(System.String,Ozeki.Media.PropertyKey)">
            <summary>
            Property Value Changed
            </summary>
            <param name="pwstrDeviceId"></param>
            <param name="key"></param>
        </member>
        <member name="M:Ozeki.Media.MMDevice.DumpPropertyValues">
            <summary>
            Retrieves the keys-value pair of the COM properties.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MMDevice.ID">
            <summary>
            Gets a string that identifies the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MMDevice.Properties">
            <summary>
            Gets an interface to the device's property store.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MMDevice.State">
            <summary>
            Gets the current state of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MMDeviceCollection.Count">
            <summary>
            Retrieves a count of the devices in the device collection.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MMDeviceCollection.Item(System.Int32)">
            <summary>
            Retrieves a pointer to the specified item in the device collection.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MMDeviceEnumerator.EnumAudioEndPoints(Ozeki.Media.EDataFlow,Ozeki.Media.DeviceState)">
            <summary>
            Generates a collection of audio endpoint devices that meet the specified criteria.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MMDeviceEnumerator.GetDefaultAudioEndpoint(Ozeki.Media.EDataFlow,Ozeki.Media.ERole)">
            <summary>
            Retrieves the default audio endpoint for the specified data-flow direction and role.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MMDeviceEnumerator.GetDevice(System.String)">
            <summary>
            Retrieves an endpoint device that is specified by an endpoint device-identification string.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WasapiOutBase">
            <summary>
            WASAPI output base class.
            </summary>
        </member>
        <member name="T:Ozeki.Media.IWaveOut">
            <summary>
            Interface for audio playback
            </summary>
        </member>
        <member name="T:Ozeki.Media.IAudioControl">
            <summary>
            Audio Control interface
            </summary>
        </member>
        <member name="M:Ozeki.Media.IAudioControl.ChangeFormat(Ozeki.Media.WaveFormat)">
            <summary>
            Changes the wave format of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IAudioControl.DeviceInfo">
            <summary>
            Gets some information about the device such as device ID or product name.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IAudioControl.Initialized">
            <summary>
            Gets a boolean value indicating whether the device is initialized and ready to use.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IAudioControl.Volume">
            <summary>
            Gets or sets the volume for this device. (Range: 0-1)
            </summary>
        </member>
        <member name="P:Ozeki.Media.IAudioControl.Level">
            <summary>
            Gets the level of the input/output. (Range: 0-100)
            </summary>
        </member>
        <member name="P:Ozeki.Media.IAudioControl.Muted">
            <summary>
            Gets or sets a boolean value indicating whether the audio device is muted.
            </summary>
        </member>
        <member name="E:Ozeki.Media.IAudioControl.Stopped">
            <summary>
            Occurs when the audio has stopped.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WasapiOutBase.#ctor(Ozeki.Media.DeviceInfo,Ozeki.Media.WaveFormat,Ozeki.Media.AudioRenderClient,Ozeki.Media.MMDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WasapiOutBase"/> class.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WasapiOutThreaded">
            <summary>
            WASAPI output class using Thread sleep
            </summary>
        </member>
        <member name="T:Ozeki.Media.WasapiOutWaitHandle">
            <summary>
            WASAPI output class using WaitHandles
            </summary>
        </member>
        <member name="T:Ozeki.Media.PropertyKeys">
            <summary>
            Property Keys
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_Device_DeviceName">
            <summary>
            ????
            </summary>
            <remarks>
            Lekerdeztem az osszes property-t, es ezt a GUI-od talaltam a device nevre (pl. Speakers, Realtek Digital Output)
            </remarks>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_Device_DeviceType">
            <summary>
            ????
            </summary>
            <remarks>
            Lekerdeztem az osszes property-t, es ezt a GUI-od talaltam a device type-ra (pl. High Definition Audio)
            </remarks>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_Device_Manufacturer">
            <summary>
            PKEY_Device_Manufacturer
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEndpoint_Association">
            <summary>
            PKEY_AudioEndpoint_Association
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEndpoint_ControlPanelPageProvider">
            <summary>
            PKEY_AudioEndpoint_ControlPanelPageProvider
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEndpoint_Disable_SysFx">
            <summary>
            PKEY_AudioEndpoint_Disable_SysFx 
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEndpoint_FormFactor">
            <summary>
            PKEY_AudioEndpoint_FormFactor
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEndpoint_FullRangeSpeakers">
            <summary>
            PKEY_AudioEndpoint_FullRangeSpeakers 
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_DeviceInterface_FriendlyName">
            <summary>
            PKEY_DeviceInterface_FriendlyName
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEndpoint_PhysicalSpeakers">
            <summary>
            PKEY_AudioEndpoint_PhysicalSpeakers
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEndpoint_GUID">
            <summary>
            PKEY_AudioEndpoint_GUID
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEndpoint_Supports_EventDriven_Mode">
            <summary>
            PKEY_AudioEndpoint_Supports_EventDriven_Mode 
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEndpoint_JackSubType">
            <summary>
            PKEY_AudioEndpoint_JackSubType
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEngine_DeviceFormat">
            <summary>
            PKEY_AudioEngine_DeviceFormat 
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_AudioEngine_OEMFormat">
            <summary>
            PKEY_AudioEngine_OEMFormat
            </summary>
        </member>
        <member name="F:Ozeki.Media.PropertyKeys.PKEY_Device_FriendlyName">
            <summary>
            PKEY _Device_FriendlyName
            </summary>
        </member>
        <member name="T:Ozeki.Media.ACMInterop">
            <summary>
            Interop definitions for Windows ACM (Audio Compression Manager) API
            </summary>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMDriverClose(System.IntPtr,System.Int32)">
            <summary>
            The acmDriverClose function closes a previously opened ACM driver instance. If the function is successful, the handle is invalidated.
            More information: http://msdn.microsoft.com/en-us/library/dd742886%28VS.85%29.aspx
            </summary>
            <param name="hACMDriver">Handle to the open driver instance to be closed.</param>
            <param name="closeFlags">Reserved; must be zero.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMDriverEnum(Ozeki.Media.ACMDriverEnumCallback,System.Int32,Ozeki.Media.DriverEnumFlags)">
            <summary>
            The acmDriverEnum function enumerates the available ACM drivers, continuing until there are no more drivers or the callback function returns FALSE.
            More information: http://msdn.microsoft.com/en-us/library/dd742890%28VS.85%29.aspx
            </summary>
            <param name="fnCallback">Procedure instance address of the application-defined callback function.</param>
            <param name="dwInstance">A 64-bit (DWORD_PTR) or 32-bit (DWORD) application-defined value that is passed to the callback function along with ACM driver information.</param>
            <param name="flags">Flags for enumerating ACM drivers. The following values are defined.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMDriverDetails(System.Int32,Ozeki.Media.DriverDetails@,System.Int32)">
            <summary>
            The acmDriverDetails function queries a specified ACM driver to determine its capabilities.
            More information: http://msdn.microsoft.com/en-us/library/dd742887%28VS.85%29.aspx
            </summary>
            <param name="hACMDriver">The driver identifier of an installed ACM driver. Disabled drivers can be queried for details.</param>
            <param name="driverDetails">Pointer to an DriverDetails structure that will receive the driver details. The cbStruct member must be initialized to the size, in bytes, of the structure.</param>
            <param name="reserved">Reserved; must be zero.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMDriverOpen(System.IntPtr@,System.Int32,System.Int32)">
            <summary>
            The acmDriverOpen function opens the specified ACM driver and returns a driver instance handle that can be used to communicate with the driver.
            More information: http://msdn.microsoft.com/en-us/library/dd742894%28VS.85%29.aspx
            </summary>
            <param name="pACMDriver">Pointer to a buffer that receives the new driver instance handle that can be used to communicate with the driver.</param>
            <param name="hACMDriverId">Handle to the driver identifier of an installed and enabled ACM driver.</param>
            <param name="openFlags">Reserved; must be zero.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMFormatEnum(System.IntPtr,Ozeki.Media.FormatDetails@,Ozeki.Media.ACMFormatEnumCallback,System.IntPtr,Ozeki.Media.FormatEnumFlags)">
            <summary>
            The acmFormatEnum function enumerates waveform-audio formats available for a given format tag from an ACM driver. This function continues enumerating until there are no more suitable formats for the format tag or the callback function returns FALSE.
            More information: http://msdn.microsoft.com/en-us/library/dd742914%28VS.85%29.aspx
            </summary>
            <param name="hACMDriver">Handle to the ACM driver to query for waveform-audio format details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.</param>
            <param name="formatDetails">Pointer to an FormatDetails structure to contain the format details passed to the fnCallback function. This structure must have the cbStruct, pwfx, and cbwfx members of the FormatDetails structure initialized. The dwFormatTag member must also be initialized to either WAVE_FORMAT_UNKNOWN or a valid format tag. The fdwSupport member of the structure must be initialized to zero. To find the required size of the pwfx buffer, call acmMetrics with the ACM_METRIC_MAX_SIZE_FORMAT flag.</param>
            <param name="callback">Address of an application-defined callback function. See acmFormatEnumCallback. This parameter cannot be NULL.</param>
            <param name="instance"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMFormatSuggest(System.IntPtr,Ozeki.Media.WaveFormat,Ozeki.Media.WaveFormat,System.Int32,Ozeki.Media.FormatSuggestFlags)">
            <summary>
            The acmFormatSuggest function queries the ACM or a specified ACM driver to suggest a destination format for the supplied source format. For example, an application can use this function to determine one or more valid PCM formats to which a compressed format can be decompressed.
            More information: http://msdn.microsoft.com/en-us/library/dd742916%28VS.85%29.aspx
            </summary>
            <param name="hACMDriver">Handle to an open instance of a driver to query for a suggested destination format. If this parameter is NULL, the ACM attempts to find the best driver to suggest a destination format.</param>
            <param name="sourceFormat">Pointer to a WAVEFORMATEX structure that identifies the source format for which a destination format will be suggested by the ACM or specified driver.</param>
            <param name="destinationFormat">Pointer to a WAVEFORMATEX structure that will receive the suggested destination format for the pwfxSrc format. Depending on the fdwSuggest parameter, some members of the structure pointed to by pwfxDst may require initialization.</param>
            <param name="sizeDestFormat">Size, in bytes, available for the destination format. The acmMetrics and acmFormatTagDetails functions can be used to determine the maximum size required for any format available for the specified driver (or for all installed ACM drivers).</param>
            <param name="suggestFlags">Flags for matching the desired destination format. The following values are defined.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMFormatTagEnum(System.IntPtr,Ozeki.Media.FormatTagDetails@,Ozeki.Media.ACMFormatTagEnumCallback,System.IntPtr,System.Int32)">
            <summary>
            The acmFormatEnum function enumerates waveform-audio formats available for a given format tag from an ACM driver. This function continues enumerating until there are no more suitable formats for the format tag or the callback function returns FALSE.
            More Information: http://msdn.microsoft.com/en-us/library/dd742914%28VS.85%29.aspx
            </summary>
            <param name="hACMDriver">Handle to the ACM driver to query for waveform-audio format details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.</param>
            <param name="formatTagDetails">Pointer to an ACMFORMATDETAILS structure to contain the format details passed to the fnCallback function. This structure must have the cbStruct, pwfx, and cbwfx members of the ACMFORMATDETAILS structure initialized. The dwFormatTag member must also be initialized to either WAVE_FORMAT_UNKNOWN or a valid format tag. The fdwSupport member of the structure must be initialized to zero. To find the required size of the pwfx buffer, call acmMetrics with the ACM_METRIC_MAX_SIZE_FORMAT flag.</param>
            <param name="callback">Address of an application-defined callback function. See acmFormatEnumCallback. This parameter cannot be NULL.</param>
            <param name="instance">A 64-bit (DWORD_PTR) or 32-bit (DWORD) application-defined value that is passed to the callback function along with ACM format details.</param>
            <param name="reserved">Flags for enumerating the formats for a given format tag. The following values are defined.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMMetics(System.IntPtr,Ozeki.Media.Metrics,System.Int32@)">
            <summary>
            The acmMetrics function returns various metrics for the ACM or related ACM objects.
            More information: http://msdn.microsoft.com/en-us/library/dd742922%28VS.85%29.aspx
            </summary>
            <param name="hACMObject">Handle to the ACM object to query for the metric specified in uMetric. For some queries, this parameter can be NULL.</param>
            <param name="metric">Metric index to be returned in pMetric.</param>
            <param name="output">Buffer to receive the metric details. The exact definition depends on the uMetric index.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMStreamClose(System.IntPtr,System.Int32)">
            <summary>
            The acmStreamClose function closes an ACM conversion stream. If the function is successful, the handle is invalidated.
            More inforamtion: http://msdn.microsoft.com/en-us/library/dd742923(VS.85).aspx
            </summary>
            <param name="hACMStream">Handle to the open conversion stream to be closed.</param>
            <param name="closeFlags">Reserved; must be zero.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMStreamConvert(System.IntPtr,Ozeki.Media.StreamHeaderStruct@,Ozeki.Media.ConvertFlags)">
            <summary>
            The acmStreamConvert function requests the ACM to perform a conversion on the specified conversion stream. A conversion may be synchronous or asynchronous, depending on how the stream was opened.
            More information: http://msdn.microsoft.com/en-us/library/dd742924%28VS.85%29.aspx
            </summary>
            <param name="hACMStream">Handle to the open conversion stream.</param>
            <param name="streamHeader">Pointer to a stream header that describes source and destination buffers for a conversion. This header must have been prepared previously by using the acmStreamPrepareHeader function.</param>
            <param name="streamConvertFlags">Flags for doing the conversion. The following values are defined.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMStreamPrepareHeader(System.IntPtr,Ozeki.Media.StreamHeaderStruct@,System.Int32)">
            <summary>
            The acmStreamPrepareHeader function prepares an ACMSTREAMHEADER structure for an ACM stream conversion. This function must be called for every stream header before it can be used in a conversion stream. An application needs to prepare a stream header only once for the life of a given stream. The stream header can be reused as long as the sizes of the source and destination buffers do not exceed the sizes used when the stream header was originally prepared.
            More information: http://msdn.microsoft.com/en-us/library/dd742929(VS.85).aspx
            </summary>
            <param name="hACMStream">Handle to the conversion steam.</param>
            <param name="streamHeader">Pointer to an StreamHeader structure that identifies the source and destination buffers to be prepared.</param>
            <param name="prepareFlags">Reserved; must be zero.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMStreamReset(System.IntPtr,System.Int32)">
            <summary>
            The acmStreamReset function stops conversions for a given ACM stream. All pending buffers are marked as done and returned to the application.
            More information: http://msdn.microsoft.com/en-us/library/dd742930(VS.85).aspx
            </summary>
            <param name="hACMStream">Handle to the conversion stream.</param>
            <param name="resetFlags">Reserved; must be zero.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMStreamSize(System.IntPtr,System.Int32,System.Int32@,Ozeki.Media.StreamSizeFlags)">
            <summary>
            The acmStreamSize function returns a recommended size for a source or destination buffer on an ACM stream.
            More information: http://msdn.microsoft.com/en-us/library/dd742931(VS.85).aspx
            </summary>
            <param name="hACMStream">Handle to the conversion stream.</param>
            <param name="inputBufferSize">Size, in bytes, of the source or destination buffer. The fdwSize flags specify what the input parameter defines. This parameter must be nonzero.</param>
            <param name="outputBufferSize">Pointer to a variable that contains the size, in bytes, of the source or destination buffer. The fdwSize flags specify what the output parameter defines. If the acmStreamSize function succeeds, this location will always be filled with a nonzero value.</param>
            <param name="flags">Flags for the stream size query. The following values are defined:</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMStreamUnprepareHeader(System.IntPtr,Ozeki.Media.StreamHeaderStruct@,System.Int32)">
            <summary>
            The acmStreamUnprepareHeader function cleans up the preparation performed by the acmStreamPrepareHeader function for an ACM stream. This function must be called after the ACM is finished with the given buffers. An application must call this function before freeing the source and destination buffers.
            More information: http://msdn.microsoft.com/en-us/library/dd742932(VS.85).aspx
            </summary>
            <param name="hACMStream">Handle to the conversion steam.</param>
            <param name="streamHeader">Pointer to an StreamHeader structure that identifies the source and destination buffers to be unprepared.</param>
            <param name="flags">Reserved; must be zero.</param>
        </member>
        <member name="M:Ozeki.Media.ACMInterop.ACMStreamOpen(System.IntPtr@,System.IntPtr,Ozeki.Media.WaveFormat,Ozeki.Media.WaveFormat,Ozeki.Media.WaveFilter,System.Int32,System.Int32,Ozeki.Media.StreamOpenFlags)">
            <summary>
            The acmStreamOpen function opens an ACM conversion stream. Conversion streams are used to convert data from one specified audio format to another.
            More inforamtion: http://msdn.microsoft.com/en-us/library/dd742928%28VS.85%29.aspx
            </summary>
            <param name="hACMStream">Pointer to a handle that will receive the new stream handle that can be used to perform conversions. This handle is used to identify the stream in calls to other ACM stream conversion functions. If the ACM_STREAMOPENF_QUERY flag is specified, this parameter should be NULL.</param>
            <param name="hACMDriver">Handle to an ACM driver. If this handle is specified, it identifies a specific driver to be used for a conversion stream. If this parameter is NULL, all suitable installed ACM drivers are queried until a match is found.</param>
            <param name="sourceFormat">Pointer to a WAVEFORMATEX structure that identifies the desired source format for the conversion.</param>
            <param name="destFormat">Pointer to a WAVEFORMATEX structure that identifies the desired destination format for the conversion.</param>
            <param name="waveFilter">Pointer to a WAVEFILTER structure that identifies the desired filtering operation to perform on the conversion stream. If no filtering operation is desired, this parameter can be NULL. If a filter is specified, the source (pwfxSrc) and destination (pwfxDst) formats must be the same.</param>
            <param name="callback">Pointer to a callback function, a handle of a window, or a handle of an event. A callback function will be called only if the conversion stream is opened with the ACM_STREAMOPENF_ASYNC flag. A callback function is notified when the conversion stream is opened or closed and after each buffer is converted. If the conversion stream is opened without the ACM_STREAMOPENF_ASYNC flag, this parameter should be set to zero.</param>
            <param name="instance">User-instance data passed to the callback function specified by the dwCallback parameter. This parameter is not used with window and event callbacks. If the conversion stream is opened without the ACM_STREAMOPENF_ASYNC flag, this parameter should be set to zero.</param>
            <param name="openFlags">Flags for opening the conversion stream. The following values are defined.</param>
        </member>
        <member name="F:Ozeki.Media.ConvertFlags.BlockAlign">
            <summary>
            Only integral numbers of blocks will be converted. Converted data will end on block-aligned boundaries. An application should use this flag for all conversions on a stream until there is not enough source data to convert to a block-aligned destination. In this case, the last conversion should be specified without this flag.
            </summary>
        </member>
        <member name="F:Ozeki.Media.ConvertFlags.Start">
            <summary>
            ACM conversion stream should begin returning pending instance data. For example, if a conversion stream holds instance data, such as the end of an echo filter operation, this flag will cause the stream to start returning this remaining data with optional source data. This flag can be specified with the ACM_STREAMCONVERTF_START flag.
            </summary>
        </member>
        <member name="F:Ozeki.Media.ConvertFlags.End">
            <summary>
            ACM conversion stream should reinitialize its instance data. For example, if a conversion stream holds instance data, such as delta or predictor information, this flag will restore the stream to starting defaults. This flag can be specified with the ACM_STREAMCONVERTF_END flag.
            </summary>
        </member>
        <member name="T:Ozeki.Media.DriverDetails">
            <summary>
            Interop structure for ACM driver details (ACMDRIVERDETAILS)
            http://msdn.microsoft.com/en-us/library/dd742889(v=VS.85).aspx
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.cbSize">
            <summary>
            Size, in bytes, of the valid information contained in the ACMDRIVERDETAILS structure. An application should initialize this member to the size, in bytes, of the desired information. The size specified in this member must be large enough to contain the cbStruct member of the ACMDRIVERDETAILS structure. When the acmDriverDetails function returns, this member contains the actual size of the information returned. The returned information will never exceed the requested size.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.fccType">
            <summary>
            Type of the driver. For ACM drivers, set this member to ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.fccComp">
            <summary>
            Subtype of the driver. This member is currently set to ACMDRIVERDETAILS_FCCCOMP_UNDEFINED (zero).
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.manufacturerId">
            <summary>
            Manufacturer identifier. Manufacturer identifiers are defined in Manufacturer and Product Identifiers.
            http://msdn.microsoft.com/en-us/library/dd757146(v=VS.85).aspx
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.productId">
            <summary>
            Product identifier. Product identifiers are defined in Manufacturer and Product Identifiers.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.ACMVersion">
            <summary>
            Version of the ACM for which this driver was compiled. The version number is a hexadecimal number in the format 0xAABBCCCC, where AA is the major version number, BB is the minor version number, and CCCC is the build number. The version parts (major, minor, and build) should be displayed as decimal numbers.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.driverVersion">
            <summary>
            Version of the driver. The version number is a hexadecimal number in the format 0xAABBCCCC, where AA is the major version number, BB is the minor version number, and CCCC is the build number. The version parts (major, minor, and build) should be displayed as decimal numbers
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.supportFlags">
            <summary>
            Support flags for the driver. The following values are defined:
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.formatTagsCount">
            <summary>
            Number of unique format tags supported by this driver.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.filterTagsCount">
            <summary>
            Number of unique filter tags supported by this driver.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.hicon">
            <summary>
            Handle to a custom icon for this driver. An application can use this icon for referencing the driver visually. This member can be NULL.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.shortName">
            <summary>
            Null-terminated string that describes the name of the driver. This string is intended to be displayed in small spaces.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.longName">
            <summary>
            Null-terminated string that describes the full name of the driver. This string is intended to be displayed in large (descriptive) spaces.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.copyright">
            <summary>
            Null-terminated string that provides copyright information for the driver.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.licensing">
            <summary>
            Null-terminated string that provides special licensing information for the driver 
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetails.features">
            <summary>
            Null-terminated string that provides special feature information for the driver.
            </summary>
        </member>
        <member name="T:Ozeki.Media.DriverDetailsSupportFlags">
            <summary>
            Driver-support flags specific to the driver specified by hadid. These flags are identical to the fdwSupport flags of the ACMDRIVERDETAILS structure. This parameter can be a combination of the following values.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetailsSupportFlags.Codec">
            <summary>ACMDRIVERDETAILS_SUPPORTF_CODEC - Codec</summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetailsSupportFlags.Converter">
            <summary>ACMDRIVERDETAILS_SUPPORTF_CONVERTER - Converter</summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetailsSupportFlags.Filter">
            <summary>ACMDRIVERDETAILS_SUPPORTF_FILTER - Filter</summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetailsSupportFlags.Hardware">
            <summary>ACMDRIVERDETAILS_SUPPORTF_HARDWARE - Hardware</summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetailsSupportFlags.Async">
            <summary>ACMDRIVERDETAILS_SUPPORTF_ASYNC - Async</summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetailsSupportFlags.Local">
            <summary>ACMDRIVERDETAILS_SUPPORTF_LOCAL - Local</summary>
        </member>
        <member name="F:Ozeki.Media.DriverDetailsSupportFlags.Disabled">
            <summary>ACMDRIVERDETAILS_SUPPORTF_DISABLED - Disabled</summary>
        </member>
        <member name="T:Ozeki.Media.ACMDriverEnumCallback">
            <summary>
            The acmDriverEnumCallback function specifies a callback function used with the acmDriverEnum function. The acmDriverEnumCallback name is a placeholder for an application-defined function name.
            http://msdn.microsoft.com/en-us/library/dd742891(VS.85).aspx
            </summary>
            <param name="hACMDriverId">Handle to an ACM driver identifier.</param>
            <param name="instance">Application-defined value specified in acmDriverEnum.</param>
            <param name="flags">Driver-support flags specific to the driver specified by hadid. These flags are identical to the fdwSupport flags of the ACMDRIVERDETAILS structure. This parameter can be a combination of the following values.</param>
            <returns>The callback function must return TRUE to continue enumeration or FALSE to stop enumeration.</returns>
        </member>
        <member name="T:Ozeki.Media.DriverEnumFlags">
            <summary>
            Flags for enumerating ACM drivers. The following values are defined.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverEnumFlags.NoLocal">
            <summary>
            Disabled ACM drivers should be included in the enumeration. Drivers can be disabled by the user through the Control Panel or by an application using the acmDriverPriority function. If a driver is disabled, the fdwSupport parameter to the callback function will have the ACMDRIVERDETAILS_SUPPORTF_DISABLED flag set.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DriverEnumFlags.Disabled">
            <summary>
            Only global drivers should be included in the enumeration.
            </summary>
        </member>
        <member name="T:Ozeki.Media.FormatDetails">
            <summary>
            The ACMFORMATDETAILS structure details a waveform-audio format for a specific format tag for an ACM driver. 
            http://msdn.microsoft.com/en-us/library/dd742913(v=VS.85).aspx
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatDetails.structSize">
            <summary>
            Size, in bytes, of the ACMFORMATDETAILS structure. This member must be initialized before an application calls the acmFormatDetails or acmFormatEnum function. The size specified by this member must be large enough to contain the base ACMFORMATDETAILS structure. When the acmFormatDetails function returns, this member contains the actual size of the information returned. The returned information will never exceed the requested size.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatDetails.formatIndex">
            <summary>
            Index of the format to retrieve details for. The index ranges from zero to one less than the number of standard formats supported by an ACM driver for a format tag. The number of standard formats supported by a driver for a format tag is contained in the cStandardFormats member of the ACMFORMATTAGDETAILS structure. The dwFormatIndex member is used only when an application queries standard format details about a driver by index; otherwise, this member should be zero. Also, this member will be set to zero by the ACM when an application queries for details on a format; in other words, this member is used only for input and is never returned by the ACM or an ACM driver. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatDetails.formatTag">
            <summary>
            Waveform-audio format tag that the ACMFORMATDETAILS structure describes. This member is used for input for the ACM_FORMATDETAILSF_INDEX query flag. For the ACM_FORMATDETAILSF_FORMAT query flag, this member must be initialized to the same format tag as the pwfx member specifies. If a call to the acmFormatDetails function is successful, this member is always returned. This member should be set to WAVE_FORMAT_UNKNOWN for all other query flags.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatDetails.supportFlags">
            <summary>
            Driver-support flags specific to the specified format. These flags are identical to the fdwSupport flags of the ACMDRIVERDETAILS structure. This member can be a combination of the following values and indicates which operations the driver supports for the format tag: 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatDetails.waveFormatPointer">
            <summary>
            Pointer to a WAVEFORMATEX structure that will receive the format details. This structure requires no initialization by the application unless the ACM_FORMATDETAILSF_FORMAT flag is specified in the acmFormatDetails function. In this case, the wFormatTag member of the WAVEFORMATEX structure must be equal to the dwFormatTag of the ACMFORMATDETAILS structure.
            </summary>    
        </member>
        <member name="F:Ozeki.Media.FormatDetails.waveFormatByteSize">
            <summary>
            Size, in bytes, available for pwfx to receive the format details. The acmMetrics and acmFormatTagDetails functions can be used to determine the maximum size required for any format available for the specified driver (or for all installed ACM drivers). 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatDetails.formatDescription">
            <summary>
            String that describes the format for the dwFormatTag type. If the acmFormatDetails function is successful, this string is always returned.
            </summary>
        </member>
        <member name="T:Ozeki.Media.FormatEnumFlags">
            <summary>
            Format Enumeration Flags
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.Convert">
            <summary>
            ACM_FORMATENUMF_CONVERT
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will only enumerate destination formats that can be converted from the given pwfx format. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.Hardware">
            <summary>
            ACM_FORMATENUMF_HARDWARE
            The enumerator should only enumerate formats that are supported as native input or output formats on one or more of the installed waveform-audio devices. This flag provides a way for an application to choose only formats native to an installed waveform-audio device. This flag must be used with one or both of the ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT flags. Specifying both ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT will enumerate only formats that can be opened for input or output. This is true regardless of whether this flag is specified. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.Input">
            <summary>
            ACM_FORMATENUMF_INPUT
            Enumerator should enumerate only formats that are supported for input (recording). 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.Channels">
            <summary>
            ACM_FORMATENUMF_NCHANNELS 
            The nChannels member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.SamplesPerSecond">
            <summary>
            ACM_FORMATENUMF_NSAMPLESPERSEC
            The nSamplesPerSec member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.Output">
            <summary>
            ACM_FORMATENUMF_OUTPUT 
            Enumerator should enumerate only formats that are supported for output (playback). 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.Suggest">
            <summary>
            ACM_FORMATENUMF_SUGGEST
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate all suggested destination formats for the given pwfx format. This mechanism can be used instead of the ACMFormatSuggest function to allow an application to choose the best suggested format for conversion. The dwFormatIndex member will always be set to zero on return. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.BitsPerSample">
            <summary>
            ACM_FORMATENUMF_WBITSPERSAMPLE
            The wBitsPerSample member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatEnumFlags.FormatTag">
            <summary>
            ACM_FORMATENUMF_WFORMATTAG
            The wFormatTag member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. The dwFormatTag member of the ACMFORMATDETAILS structure must be equal to the wFormatTag member. 
            </summary>
        </member>
        <member name="T:Ozeki.Media.FormatSuggestFlags">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd742916%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatSuggestFlags.FormatTag">
            <summary>
            ACM_FORMATSUGGESTF_WFORMATTAG
            The wFormatTag member of the structure pointed to by pwfxDst is valid. The ACM will query acceptable installed drivers that can suggest a destination format matching wFormatTag or fail.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatSuggestFlags.Channels">
            <summary>
            ACM_FORMATSUGGESTF_NCHANNELS
            The nChannels member of the structure pointed to by pwfxDst is valid. The ACM will query acceptable installed drivers that can suggest a destination format matching nChannels or fail.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatSuggestFlags.SamplesPerSecond">
            <summary>
            ACM_FORMATSUGGESTF_NSAMPLESPERSEC
            The wBitsPerSample member of the structure pointed to by pwfxDst is valid. The ACM will query acceptable installed drivers that can suggest a destination format matching wBitsPerSample or fail.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatSuggestFlags.BitsPerSample">
            <summary>
            ACM_FORMATSUGGESTF_WBITSPERSAMPLE
            The wBitsPerSample member of the structure pointed to by pwfxDst is valid. The ACM will query acceptable installed drivers that can suggest a destination format matching wBitsPerSample or fail.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatSuggestFlags.TypeMask">
            <summary>
            ACM_FORMATSUGGESTF_TYPEMASK
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatTagDetails.structureSize">
            <summary>
            DWORD cbStruct; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatTagDetails.formatTagIndex">
            <summary>
            DWORD dwFormatTagIndex; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatTagDetails.formatTag">
            <summary>
            DWORD dwFormatTag; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatTagDetails.formatSize">
            <summary>
            DWORD cbFormatSize; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatTagDetails.supportFlags">
            <summary>
            DWORD fdwSupport;
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatTagDetails.standardFormatsCount">
            <summary>
            DWORD cStandardFormats; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.FormatTagDetails.formatDescription">
            <summary>
            TCHAR szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; 
            </summary>
        </member>
        <member name="T:Ozeki.Media.ACMFormatTagEnumCallback">
            <summary>
            http://www.opennetcf.com/library/sdf/html/9790b4f8-24ef-3376-4e9e-31e5cd77f722.htm
            </summary>
            <param name="hACMDriverId"></param>
            <param name="formatTagDetails"></param>
            <param name="dwInstance"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="T:Ozeki.Media.Metrics">
            <summary>
            Metric index to be returned in pMetric.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountDrivers">
            <summary>
            ACM_METRIC_COUNT_DRIVERS
            Returned value is the total number of enabled global ACM drivers (of all support types) in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountCodecs">
            <summary>Returned value is the number of global ACM compressor or decompressor drivers in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.</summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountConverters">
            <summary>
            ACM_METRIC_COUNT_CONVERTERS
            Returned value is the number of global ACM converter drivers in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountFilters">
            <summary>
            ACM_METRIC_COUNT_FILTERS
            Returned value is the number of global ACM filter drivers in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountDisabled">
            <summary>
            ACM_METRIC_COUNT_DISABLED
            Returned value is the total number of global disabled ACM drivers (of all support types) in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value. The sum of the ACM_METRIC_COUNT_DRIVERS and ACM_METRIC_COUNT_DISABLED metric indices is the total number of globally installed ACM drivers.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountHardware">
            <summary>
            ACM_METRIC_COUNT_HARDWARE
            Returned value is the number of global ACM hardware drivers in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountLocalDrivers">
            <summary>
            ACM_METRIC_COUNT_LOCAL_DRIVERS
            Returned value is the total number of enabled local ACM drivers (of all support types) for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountLocalCodecs">
            <summary>
            ACM_METRIC_COUNT_LOCAL_CODECS
            Returned value is the number of local ACM compressor drivers, ACM decompressor drivers, or both for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountLocalConverters">
            <summary>
            ACM_METRIC_COUNT_LOCAL_CONVERTERS
            Returned value is the number of local ACM converter drivers for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountLocalFilters">
            <summary>
            ACM_METRIC_COUNT_LOCAL_FILTERS
            Returned value is the number of local ACM filter drivers for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.CountLocalDisabled">
            <summary>
            ACM_METRIC_COUNT_LOCAL_DISABLED
            Returned value is the total number of local disabled ACM drivers, of all support types, for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value. The sum of the ACM_METRIC_COUNT_LOCAL_DRIVERS and ACM_METRIC_COUNT_LOCAL_DISABLED metric indices is the total number of locally installed ACM drivers.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.HardwareWaveInput">
            <summary>
            ACM_METRIC_HARDWARE_WAVE_INPUT
            Returned value is the waveform-audio input device identifier associated with the specified driver. The hao parameter must be a valid ACM driver identifier of the HACMDRIVERID data type that supports the ACMDRIVERDETAILS_SUPPORTF_HARDWARE flag. If no waveform-audio input device is associated with the driver, MMSYSERR_NOTSUPPORTED is returned. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.HardwareWaveOutput">
            <summary>
            ACM_METRIC_HARDWARE_WAVE_OUTPUT
            Returned value is the waveform-audio output device identifier associated with the specified driver. The hao parameter must be a valid ACM driver identifier of the HACMDRIVERID data type that supports the ACMDRIVERDETAILS_SUPPORTF_HARDWARE flag. If no waveform-audio output device is associated with the driver, MMSYSERR_NOTSUPPORTED is returned. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.MaxSizeFormat">
            <summary>
            ACM_METRIC_MAX_SIZE_FORMAT
            Returned value is the size of the largest WAVEFORMATEX structure. If hao is NULL, the return value is the largest WAVEFORMATEX structure in the system. If hao identifies an open instance of an ACM driver of the HACMDRIVER data type or an ACM driver identifier of the HACMDRIVERID data type, the largest WAVEFORMATEX structure for that driver is returned. The pMetric parameter must point to a buffer of a size equal to a DWORD value. This metric is not allowed for an ACM stream handle of the HACMSTREAM data type.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.MaxSizeFilter">
            <summary>
            ACM_METRIC_MAX_SIZE_FILTER
            Returned value is the size of the largest WAVEFILTER structure. If hao is NULL, the return value is the largest WAVEFILTER structure in the system. If hao identifies an open instance of an ACM driver of the HACMDRIVER data type or an ACM driver identifier of the HACMDRIVERID data type, the largest WAVEFILTER structure for that driver is returned. The pMetric parameter must point to a buffer of a size equal to a DWORD value. This metric is not allowed for an ACM stream handle of the HACMSTREAM data type.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.DriverSupport">
            <summary>
            ACM_METRIC_DRIVER_SUPPORT
            Returned value is the fdwSupport flags for the specified driver. The hao parameter must be a valid ACM driver identifier of the HACMDRIVERID data type. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="F:Ozeki.Media.Metrics.DriverPriority">
            <summary>
            ACM_METRIC_DRIVER_PRIORITY
            Returned value is the current priority for the specified driver. The hao parameter must be a valid ACM driver identifier of the HACMDRIVERID data type. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
        </member>
        <member name="T:Ozeki.Media.StreamHeaderStatusFlags">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd742926(v=VS.85).aspx
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamHeaderStatusFlags.Done">
            <summary>
            ACMSTREAMHEADER_STATUSF_DONE
            Set by the ACM or driver to indicate that it is finished with the conversion and is returning the buffers to the application.
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamHeaderStatusFlags.Prepared">
            <summary>
            ACMSTREAMHEADER_STATUSF_PREPARED
            Set by the ACM or driver to indicate that the buffers are queued for conversion.
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamHeaderStatusFlags.InQueue">
            <summary>
            ACMSTREAMHEADER_STATUSF_INQUEUE
            Set by the ACM to indicate that the buffers have been prepared by using the acmStreamPrepareHeader function.
            </summary>
        </member>
        <member name="T:Ozeki.Media.StreamHeaderStruct">
            <summary>
            Interop structure for ACM stream headers.
            http://msdn.microsoft.com/en-us/library/dd742926(v=VS.85).aspx
            </summary>
        </member>
        <member name="T:Ozeki.Media.StreamOpenFlags">
            <summary>
            Flags for opening the conversion stream. The following values are defined.
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.Query">
            <summary>
            ACM_STREAMOPENF_QUERY, ACM will be queried to determine whether it supports the given conversion. A conversion stream will not be opened, and no handle will be returned in the phas parameter.
            Stream conversion should be performed asynchronously. If this flag is specified, the application can use a callback function to be notified when the conversion stream is opened and closed and after each buffer is converted. In addition to using a callback function, an application can examine the fdwStatus member of the ACMSTREAMHEADER structure for the ACMSTREAMHEADER_STATUSF_DONE flag.
            ACM will be queried to determine whether it supports the given conversion. A conversion stream will not be opened, and no handle will be returned in the phas parameter.
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.Async">
            <summary>
            ACM_STREAMOPENF_ASYNC, Stream conversion should be performed asynchronously. If this flag is specified, the application can use a callback function to be notified when the conversion stream is opened and closed and after each buffer is converted. In addition to using a callback function, an application can examine the fdwStatus member of the ACMSTREAMHEADER structure for the ACMSTREAMHEADER_STATUSF_DONE flag.
            ACM will be queried to determine whether it supports the given conversion. A conversion stream will not be opened, and no handle will be returned in the phas parameter.
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.NonRealTime">
            <summary>
            ACM_STREAMOPENF_NONREALTIME, ACM will not consider time constraints when converting the data. By default, the driver will attempt to convert the data in real time. For some formats, specifying this flag might improve the audio quality or other characteristics.
            ACM will not consider time constraints when converting the data. By default, the driver will attempt to convert the data in real time. For some formats, specifying this flag might improve the audio quality or other characteristics.
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.CallbackTypeMask">
            <summary>
            CALLBACK_TYPEMASK, callback type mask
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.CallbackNull">
            <summary>
            CALLBACK_NULL, no callback
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.CallbackWindow">
            <summary>
            CALLBACK_WINDOW, dwCallback is a HWND
            The dwCallback parameter is a window handle.
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.CallbackTask">
            <summary>
            CALLBACK_TASK, dwCallback is a HTASK
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.CallbackFunction">
            <summary>
            CALLBACK_FUNCTION, dwCallback is a FARPROC
            The dwCallback parameter is a callback procedure address. The function prototype must conform to the acmStreamConvertCallback prototype.
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.CallbackThread">
            <summary>
            CALLBACK_THREAD, thread ID replaces 16 bit task
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamOpenFlags.CallbackEvent">
            <summary>
            CALLBACK_EVENT, dwCallback is an EVENT Handle
            The dwCallback parameter is a handle of an event.
            </summary>
        </member>
        <member name="T:Ozeki.Media.StreamSizeFlags">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd742931(VS.85).aspx
            Flags for the stream size query. The following values are defined:
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamSizeFlags.Source">
            <summary>
            ACM_STREAMSIZEF_SOURCE
            The cbInput parameter contains the size of the destination buffer. The pdwOutputBytes parameter will receive the recommended source buffer size, in bytes.
            </summary>
        </member>
        <member name="F:Ozeki.Media.StreamSizeFlags.Destination">
            <summary>
            ACM_STREAMSIZEF_DESTINATION
            The cbInput parameter contains the size of the source buffer. The pdwOutputBytes parameter will receive the recommended destination buffer size, in bytes.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFilter">
            <summary>
            Summary description for WaveFilter.
            http://msdn.microsoft.com/en-us/library/dd757711(v=VS.85).aspx
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFilter.StructureSize">
            <summary>
            cbStruct
            Size, in bytes, of the WAVEFILTER structure. The size specified in this member must be large enough to contain the base WAVEFILTER structure.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFilter.FilterTag">
            <summary>
            dwFilterTag
            Waveform-audio filter type. Filter tags are registered with Microsoft Corporation for various filter algorithms.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFilter.Filter">
            <summary>
            fdwFilter
            Flags for the dwFilterTag member. The flags defined for this member are universal to all filters. Currently, no flags are defined.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFilter.Reserved">
            <summary>
            reserved
            Reserved for system use; should not be examined or modified by an application.
            </summary>
        </member>
        <member name="T:Ozeki.Media.DeviceInfo">
            <summary>
            Contains information about an audio device.
            </summary>
        </member>
        <member name="M:Ozeki.Media.DeviceInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.DeviceInfo"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.DeviceInfo.#ctor(Ozeki.Media.DeviceType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.DeviceInfo"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.DeviceInfo.#ctor(Ozeki.Media.DeviceType,System.String,System.String,System.String,System.Int16,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.DeviceInfo"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.DeviceInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>The string representation of the current DeviceInfo object</returns>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.DeviceID">
            <summary>
            Gets the unique identifier of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.Manufacturer">
            <summary>
            Gets the manufacturer for the device driver.
            </summary>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.ProductID">
            <summary>
            Gets the product identifier.
            </summary>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.DriverVersion">
            <summary>
            Gets the version number of the device driver.
            The high-order byte is the major version number, and the low-order byte is the minor version number.
            </summary>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.ProductName">
            <summary>
            Gets the product name in a null-terminated string.
            </summary>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.IsDefault">
            <summary>
            Gets a boolean value indicating whether the device is the default device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.Channels">
            <summary>
            Gets the number specifying whether the device supports mono (1) or stereo (2) input.
            </summary>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.Type">
            <summary>
            Gets the type of the device
            </summary>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.AudioApi">
            <summary>
            Gets the audio API used when gathering the device information.
            </summary>
        </member>
        <member name="P:Ozeki.Media.DeviceInfo.SupportedWaveFormats">
            <summary>
            Gets or sets the standard formats that are supported.
            </summary>
        </member>
        <member name="T:Ozeki.Media.IDmoMediaBuffer">
            <summary>
            This interface provides methods for manipulating a data buffer. Any buffer passed to a Microsoft DirectX Media Object (DMO) must implement this interface.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IDmoMediaBuffer.GetBufferAndLength(System.IntPtr,System.IntPtr)">
            <summary>
            This method retrieves the buffer and the size of the valid data in the buffer.
            </summary>
            <param name="ppBuffer">byte[]</param>
            <param name="ppValidDataLength">int</param>
        </member>
        <member name="M:Ozeki.Media.DmoMediaBuffer.LoadData(System.Byte[],System.Int32)">
            <summary>
            Loads data into this buffer
            </summary>
            <param name="data">Data to load</param>
            <param name="bytes">Number of bytes to load</param>
        </member>
        <member name="M:Ozeki.Media.DmoMediaBuffer.RetrieveData(System.Byte[],System.Int32)">
            <summary>
            Retrieves the data in the output buffer
            </summary>
            <param name="data">buffer to retrieve into</param>
            <param name="offset">offset within that buffer</param>
        </member>
        <member name="P:Ozeki.Media.DmoMediaBuffer.Length">
            <summary>
            Length of data in the media buffer
            </summary>
        </member>
        <member name="T:Ozeki.Media.DmoEnumFlags">
            <summary>
            This enumerated type defines flags that specify search criteria when enumerating MicrosoftDirectX Media Objects (DMOs).
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoEnumFlags.INCLUDE_KEYED">
            <summary>
            The enumeration should include DMOs whose use is restricted by a software key. If this flag is absent, keyed DMOs are omitted from the enumeration. 
            </summary>
            <remarks>DMO_ENUMF_INCLUDE_KEYED</remarks>
        </member>
        <member name="T:Ozeki.Media.DmoErrorCodes">
            <summary>
            Contains error codes that are specific to Microsoft DirectX Media Objects (DMOs). 
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoErrorCodes.DMO_E_INVALIDSTREAMINDEX">
            <summary>
            Invalid stream index.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoErrorCodes.DMO_E_INVALIDTYPE">
            <summary>
            Invalid media type.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoErrorCodes.DMO_E_TYPE_NOT_SET">
            <summary>
            The media type was not set.
            Before this operation can be performed, one or more streams require a media type.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoErrorCodes.DMO_E_NOTACCEPTING">
            <summary>
            Data cannot be accepted on this stream.
            You might need to process more output data. See IMediaObject::ProcessInput.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoErrorCodes.DMO_E_TYPE_NOT_ACCEPTED">
            <summary>
            The media type was not accepted.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoErrorCodes.DMO_E_NO_MORE_ITEMS">
            <summary>
            The media-type index is out of range.
            </summary>
        </member>
        <member name="T:Ozeki.Media.DmoInputDataBufferFlags">
            <summary>
            This enumerated type defines flags that describe an input buffer.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoInputDataBufferFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoInputDataBufferFlags.SYNCPOINT">
            <summary>
            The beginning of the data is a synchronization point. 
            </summary>
            <remarks>DMO_INPUT_DATA_BUFFERF_SYNCPOINT</remarks>
        </member>
        <member name="F:Ozeki.Media.DmoInputDataBufferFlags.TIME">
            <summary>
            The buffer's time stamp is valid. 
            </summary>
            <remarks>DMO_INPUT_DATA_BUFFERF_TIME</remarks>
        </member>
        <member name="F:Ozeki.Media.DmoInputDataBufferFlags.TIMELENGTH">
            <summary>
            The buffer's time stamp is valid. 
            </summary>
            <remarks>DMO_INPUT_DATA_BUFFERF_TIMELENGTH</remarks>
        </member>
        <member name="T:Ozeki.Media.DmoInputStreamInfoFlags">
            <summary>
            This enumerated type defines flags that describe an input stream.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoInputStreamInfoFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoInputStreamInfoFlags.WHOLE_SAMPLES">
            <summary>
            The stream requires whole samples. Samples must not span multiple buffers, and buffers must not contain partial samples. 
            </summary>
            <remarks>DMO_INPUT_STREAMF_WHOLE_SAMPLES</remarks>
        </member>
        <member name="F:Ozeki.Media.DmoInputStreamInfoFlags.SINGLE_SAMPLE_PER_BUFFER">
            <summary>
            Each buffer must contain exactly one sample. 
            </summary>
            <remarks>DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER</remarks>
        </member>
        <member name="F:Ozeki.Media.DmoInputStreamInfoFlags.FIXED_SAMPLE_SIZE">
            <summary>
            All the samples in this stream must be the same size. 
            </summary>
            <remarks>DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE</remarks>
        </member>
        <member name="F:Ozeki.Media.DmoInputStreamInfoFlags.HOLDS_BUFFERS">
            <summary>
            The DMO performs a lookahead on the incoming data and may hold multiple input buffers for this stream. 
            </summary>
            <remarks>DMO_INPUT_STREAMF_HOLDS_BUFFERS</remarks>
        </member>
        <member name="T:Ozeki.Media.DmoOutputDataBufferFlags">
            <summary>
            This enumerated type defines flags that describe an output buffer.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoOutputDataBufferFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoOutputDataBufferFlags.SYNCPOINT">
            <summary>
            The beginning of the data is a synchronization point. 
            </summary>
            <remarks>DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT</remarks>
        </member>
        <member name="F:Ozeki.Media.DmoOutputDataBufferFlags.TIME">
            <summary>
            The buffer's time stamp is valid. 
            </summary>
            <remarks>DMO_OUTPUT_DATA_BUFFERF_TIME</remarks>
        </member>
        <member name="F:Ozeki.Media.DmoOutputDataBufferFlags.TIMELENGTH">
            <summary>
            The buffer's indicated time length is valid. 
            </summary>
            <remarks>DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH</remarks>
        </member>
        <member name="F:Ozeki.Media.DmoOutputDataBufferFlags.INCOMPLETE">
            <summary>
            There is still input data available for processing, but the output buffer is full. 
            </summary>
            <remarks>DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE</remarks>
        </member>
        <member name="T:Ozeki.Media.OutputStreamInfoFlags">
            <summary>
            This enumerated type defines flags that describe an output stream.
            </summary>
        </member>
        <member name="F:Ozeki.Media.OutputStreamInfoFlags.WHOLE_SAMPLES">
            <summary>
            The stream contains whole samples. Samples do not span multiple buffers, and buffers do not contain partial samples. 
            </summary>
            <remarks>DMO_OUTPUT_STREAMF_WHOLE_SAMPLES</remarks>
        </member>
        <member name="F:Ozeki.Media.OutputStreamInfoFlags.SINGLE_SAMPLE_PER_BUFFER">
            <summary>
            Each buffer contains exactly one sample. 
            </summary>
            <remarks>DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER </remarks>
        </member>
        <member name="F:Ozeki.Media.OutputStreamInfoFlags.FIXED_SAMPLE_SIZE">
            <summary>
            All the samples in this stream are the same size. 
            </summary>
            <remarks>DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE</remarks>
        </member>
        <member name="F:Ozeki.Media.OutputStreamInfoFlags.DISCARDABLE">
            <summary>
            The stream is discardable. Within calls to IMediaObject::ProcessOutput, the DMO can discard data for this stream without copying it to an output buffer. 
            </summary>
            <remarks>DMO_OUTPUT_STREAMF_DISCARDABLE</remarks>
        </member>
        <member name="F:Ozeki.Media.OutputStreamInfoFlags.OPTIONAL">
            <summary>
            The stream is optional. An optional stream is discardable. The application can also ignore this stream entirely; it does not have to set the media type for the stream. Optional streams generally contain additional information or data not needed by all applications. 
            </summary>
            <remarks>DMO_OUTPUT_STREAMF_OPTIONAL</remarks>
        </member>
        <member name="T:Ozeki.Media.DmoProcessOutputFlags">
            <summary>
            This enumerated type defines flags that specify output processing requests.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoProcessOutputFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoProcessOutputFlags.DISCARD_WHEN_NO_BUFFER">
            <summary>
            Discard the output when the pointer to the output buffer is NULL. 
            </summary>
            <remarks>DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER</remarks>
        </member>
        <member name="T:Ozeki.Media.DmoRegisterFlags">
            <summary>
            This enumerated type defines flags that specify registry information for a Microsoft DirectX Media Object (DMO).
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoRegisterFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoRegisterFlags.IS_KEYED">
            <summary>
            Use of the DMO is restricted by a software key. 
            </summary>
            <remarks>DMO_REGISTERF_IS_KEYED</remarks>
        </member>
        <member name="T:Ozeki.Media.DmoSetTypeFlags">
            <summary>
            This enumerated type defines flags for setting the media type on a stream.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoSetTypeFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoSetTypeFlags.TEST_ONLY">
            <summary>
            Test the media type but do not set it. 
            </summary>
            <remarks>DMO_SET_TYPEF_TEST_ONLY</remarks>
        </member>
        <member name="F:Ozeki.Media.DmoSetTypeFlags.CLEAR">
            <summary>
            Clear the media type that was set for the stream. 
            </summary>
            <remarks>DMO_SET_TYPEF_CLEAR</remarks>
        </member>
        <member name="T:Ozeki.Media.DmoVideoOutputStreamFlags">
            <summary>
            This enumerated type defines flags that describe requested optimizations for video optimizations.
            </summary>
        </member>
        <member name="F:Ozeki.Media.DmoVideoOutputStreamFlags.NEEDS_PREVIOUS_SAMPLE">
            <summary>
            Requests that every output buffer passed to the DMO contain the previous data that was generated. 
            </summary>
            <remarks>DMO_VOSF_NEEDS_PREVIOUS_SAMPLE</remarks>
        </member>
        <member name="T:Ozeki.Media.IEnumDmo">
            <summary>
            This interface provides methods for enumerating Microsoft DirectX Media Objects (DMOs). It is based on the OLE enumeration interfaces. 
            </summary>
        </member>
        <member name="T:Ozeki.Media.IWMResamplerProps">
            <summary>
            Windows Media Resampler Props
            wmcodecdsp.h
            </summary>
        </member>
        <member name="M:Ozeki.Media.IWMResamplerProps.SetHalfFilterLength(System.Int32)">
            <summary>
            Range is 1 to 60
            </summary>
        </member>
        <member name="M:Ozeki.Media.IWMResamplerProps.SetUserChannelMtx(System.Single[])">
            <summary>
             Specifies the channel matrix.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaObject.#ctor(Ozeki.Media.IMediaObject)">
            <summary>
            Creates a new Media Object
            </summary>
            <param name="mediaObject">Media Object COM interface</param>
        </member>
        <member name="M:Ozeki.Media.MediaObject.GetInputType(System.Int32,System.Int32)">
            <summary>
            Gets the input media type for the specified input stream
            </summary>
            <param name="inputStream">Input stream index</param>
            <param name="inputTypeIndex">Input type index</param>
            <returns>DMO Media Type or null if there are no more input types</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.GetOutputType(System.Int32,System.Int32)">
            <summary>
            Gets the DMO Media Output type
            </summary>
            <param name="outputStream">The output stream</param>
            <param name="outputTypeIndex">Output type index</param>
            <returns>DMO Media Type or null if no more available</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.GetOutputCurrentType(System.Int32)">
            <summary>
            retrieves the media type that was set for an output stream, if any
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <returns>DMO Media Type or null if no more available</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.GetInputTypes(System.Int32)">
            <summary>
            Enumerates the supported input types
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <returns>Enumeration of input types</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.GetOutputTypes(System.Int32)">
            <summary>
            Enumerates the output types
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <returns>Enumeration of supported output types</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SupportsInputType(System.Int32,Ozeki.Media.DmoMediaType)">
            <summary>
            Querys whether a specified input type is supported
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="mediaType">Media type to check</param>
            <returns>true if supports</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SetInputType(System.Int32,Ozeki.Media.DmoMediaType,Ozeki.Media.DmoSetTypeFlags)">
            <summary>
            Sets the input type helper method
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="mediaType">Media type</param>
            <param name="flags">Flags (can be used to test rather than set)</param>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SetInputType(System.Int32,Ozeki.Media.DmoMediaType)">
            <summary>
            Sets the input type
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="mediaType">Media Type</param>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SetInputWaveFormat(System.Int32,Ozeki.Media.WaveFormat)">
            <summary>
            Sets the input type to the specified Wave format
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="waveFormat">Wave format</param>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SupportsInputWaveFormat(System.Int32,Ozeki.Media.WaveFormat)">
            <summary>
            Requests whether the specified Wave format is supported as an input
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="waveFormat">Wave format</param>
            <returns>true if supported</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.CreateDmoMediaTypeForWaveFormat(Ozeki.Media.WaveFormat)">
            <summary>
            Helper function to make a DMO Media Type to represent a particular AudioWaveFormat
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SupportsOutputType(System.Int32,Ozeki.Media.DmoMediaType)">
            <summary>
            Checks if a specified output type is supported
            n.b. you may need to set the input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="mediaType">Media type</param>
            <returns>True if supported</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SupportsOutputWaveFormat(System.Int32,Ozeki.Media.WaveFormat)">
            <summary>
            Tests if the specified Wave Format is supported for output
            n.b. may need to set the input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="waveFormat">Wave format</param>
            <returns>True if supported</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SetOutputType(System.Int32,Ozeki.Media.DmoMediaType,Ozeki.Media.DmoSetTypeFlags)">
            <summary>
            Helper method to call SetOutputType
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SetOutputType(System.Int32,Ozeki.Media.DmoMediaType)">
            <summary>
            Sets the output type
            n.b. may need to set the input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="mediaType">Media type to set</param>
        </member>
        <member name="M:Ozeki.Media.MediaObject.SetOutputWaveFormat(System.Int32,Ozeki.Media.WaveFormat)">
            <summary>
            Set output type to the specified wave format
            n.b. may need to set input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="waveFormat">Wave format</param>
        </member>
        <member name="M:Ozeki.Media.MediaObject.GetInputSizeInfo(System.Int32)">
            <summary>
            Get Input Size Info
            </summary>
            <param name="inputStreamIndex">Input Stream Index</param>
            <returns>Input Size Info</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.GetOutputSizeInfo(System.Int32)">
            <summary>
            Get Output Size Info
            </summary>
            <param name="outputStreamIndex">Output Stream Index</param>
            <returns>Output Size Info</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.ProcessInput(System.Int32,Ozeki.Media.IDmoMediaBuffer,Ozeki.Media.DmoInputDataBufferFlags,System.Int64,System.Int64)">
            <summary>
            Process Input
            </summary>
            <param name="inputStreamIndex">Input Stream index</param>
            <param name="mediaBuffer">Media Buffer</param>
            <param name="flags">Flags</param>
            <param name="timestamp">Timestamp</param>
            <param name="duration">Duration</param>
        </member>
        <member name="M:Ozeki.Media.MediaObject.ProcessOutput(Ozeki.Media.DmoProcessOutputFlags,System.Int32,Ozeki.Media.DmoOutputDataBuffer[])">
            <summary>
            Process Output
            </summary>
            <param name="flags">Flags</param>
            <param name="outputBufferCount">Output buffer count</param>
            <param name="outputBuffers">Output buffers</param>
        </member>
        <member name="M:Ozeki.Media.MediaObject.AllocateStreamingResources">
            <summary>
            Gives the DMO a chance to allocate any resources needed for streaming
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaObject.FreeStreamingResources">
            <summary>
            Tells the DMO to free any resources needed for streaming
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaObject.GetInputMaxLatency(System.Int32)">
            <summary>
            Gets maximum input latency
            </summary>
            <param name="inputStreamIndex">input stream index</param>
            <returns>Maximum input latency as a ref-time</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.Flush">
            <summary>
            Flushes all buffered data
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaObject.Discontinuity(System.Int32)">
            <summary>
            Report a discontinuity on the specified input stream
            </summary>
            <param name="inputStreamIndex">Input Stream index</param>
        </member>
        <member name="M:Ozeki.Media.MediaObject.IsAcceptingData(System.Int32)">
            <summary>
            Is this input stream accepting data?
            </summary>
            <param name="inputStreamIndex">Input Stream index</param>
            <returns>true if accepting data</returns>
        </member>
        <member name="M:Ozeki.Media.MediaObject.Dispose">
            <summary>
            Experimental code, not currently being called
            Not sure if it is necessary anyway
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaObject.InputStreamCount">
            <summary>
            Number of input streams
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaObject.OutputStreamCount">
            <summary>
            Number of output streams
            </summary>
        </member>
        <member name="T:Ozeki.Media.MediaObjectSizeInfo">
            <summary>
            Media Object Size Info
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaObjectSizeInfo.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Media Object Size Info
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaObjectSizeInfo.ToString">
            <summary>
            ToString
            </summary>        
        </member>
        <member name="P:Ozeki.Media.MediaObjectSizeInfo.Size">
            <summary>
            Minimum Buffer Size, in bytes
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaObjectSizeInfo.MaxLookahead">
            <summary>
            Max Lookahead
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaObjectSizeInfo.Alignment">
            <summary>
            Alignment
            </summary>
        </member>
        <member name="T:Ozeki.Media.Resampler">
            <summary>
            DMO resampler
            </summary>
        </member>
        <member name="T:Ozeki.Media.DmoMediaType">
            <summary>
            This structure describes the format of the data used by a stream in a DirectX DMO. This structure is identical to the Microsoft DirectShow AM_MEDIA_TYPE structure.
            </summary>
        </member>
        <member name="T:Ozeki.Media.DmoOutputDataBuffer">
            <summary>
            This structure describes an output buffer used by a DirectX DMO.
            </summary>
        </member>
        <member name="T:Ozeki.Media.DeviceType">
            <summary>
            Specifies the types of the audio devices
            </summary>
        </member>
        <member name="F:Ozeki.Media.DeviceType.Playback">
            <summary>
            Playback audio device
            </summary>
        </member>
        <member name="F:Ozeki.Media.DeviceType.Recording">
            <summary>
            Recording audio device
            </summary>
        </member>
        <member name="T:Ozeki.Media.PlaybackState">
            <summary>
            Specifies the states of a playback.
            </summary>
        </member>
        <member name="F:Ozeki.Media.PlaybackState.Playing">
            <summary>
            Playback is playing. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.PlaybackState.Paused">
            <summary>
            Playback is paused.
            </summary>
        </member>
        <member name="F:Ozeki.Media.PlaybackState.Stopped">
            <summary>
            Playback is stopped.
            </summary>
        </member>
        <member name="T:Ozeki.Media.CaptureState">
            <summary>
            Specifies the states of a capture.
            </summary>
        </member>
        <member name="F:Ozeki.Media.CaptureState.Recording">
            <summary>
            Capturing is active.
            </summary>
        </member>
        <member name="F:Ozeki.Media.CaptureState.Paused">
            <summary>
            Capturing is paused.
            </summary>
        </member>
        <member name="F:Ozeki.Media.CaptureState.Stopped">
            <summary>
            Capturing is stopped.
            </summary>
        </member>
        <member name="F:Ozeki.Media.HResult.UnsupportedFormat">
            <summary>
            The audio engine (shared mode) or audio endpoint device (exclusive mode) does not support the specified format.
            </summary>
        </member>
        <member name="F:Ozeki.Media.HResult.DeviceInUse">
            <summary>
            The endpoint device is already in use. Either the device is being used in exclusive mode, or the device is being used in shared mode and the caller asked to use the device in exclusive mode. 
            </summary>
        </member>
        <member name="T:Ozeki.Media.IWaveIn">
            <summary>
            Interface for audio recording
            </summary>
        </member>
        <member name="P:Ozeki.Media.IWaveIn.State">
            <summary>
            Gets the state of the recording.
            </summary>
        </member>
        <member name="E:Ozeki.Media.IWaveIn.DataAvailable">
            <summary>
            Occurs when recorded data is available 
            </summary>
        </member>
        <member name="E:Ozeki.Media.IWaveIn.LevelChanged">
            <summary>
            Occurs when the level of the recording has changed.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioMixer">
            <summary>
            Can mix audio from different sources.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioMixer.#ctor(Ozeki.Media.WaveFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioMixer"/> class.
            </summary>
            <param name="waveFormat">The format of the mixed data.</param>
            <param name="interval">The time between the mixing events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.AudioMixer.AddSource(System.Int32)">
            <summary>
            Adds a new source to the mixing queue.
            </summary>
            <param name="uid">The unique identifier of the source.</param>
        </member>
        <member name="M:Ozeki.Media.AudioMixer.RemoveSource(System.Int32)">
            <summary>
            Removes an existing source from the mixing queue.
            </summary>
            <param name="uid">The unique identifier of the source.</param>
        </member>
        <member name="M:Ozeki.Media.AudioMixer.EnqueueData(System.Int32,Ozeki.Media.WaveFormat,System.Byte[])">
            <summary>
            Adds audio data to the mixing queue.
            </summary>
            <param name="sourceId">The unique identifier of the source.</param>
            <param name="format">The format of the enqueued data.</param>
            <param name="data">The raw data.</param>
        </member>
        <member name="M:Ozeki.Media.AudioMixer.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioMixer.disposed">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioMixer.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="E:Ozeki.Media.AudioMixer.DataMixed">
            <summary>
            Occurs when the <see cref="T:Ozeki.Media.AudioMixer"/> has mixed some data.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioMixer.WaveFormat">
            <summary>
            Gets or sets the AudioWaveFormat of the mixed audio.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.Handle">
            <summary>
            MIXER_OBJECTF_HANDLE 	= 0x80000000;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.Mixer">
            <summary>
            MIXER_OBJECTF_MIXER 	= 0x00000000;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.MixerHandle">
            <summary>
            MIXER_OBJECTF_HMIXER
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.WaveOut">
            <summary>
            MIXER_OBJECTF_WAVEOUT
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.WaveOutHandle">
            <summary>
            MIXER_OBJECTF_HWAVEOUT
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.WaveIn">
            <summary>
            MIXER_OBJECTF_WAVEIN
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.WaveInHandle">
            <summary>
            MIXER_OBJECTF_HWAVEIN
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.MidiOut">
            <summary>
            MIXER_OBJECTF_MIDIOUT
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.MidiOutHandle">
            <summary>
            MIXER_OBJECTF_HMIDIOUT
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.MidiIn">
            <summary>
            MIXER_OBJECTF_MIDIIN
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.MidiInHandle">
            <summary>
            MIXER_OBJECTF_HMIDIIN
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.Aux">
            <summary>
            MIXER_OBJECTF_AUX
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.Value">
            <summary>
            MIXER_GETCONTROLDETAILSF_VALUE      	= 0x00000000;
            MIXER_SETCONTROLDETAILSF_VALUE      	= 0x00000000;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.ListText">
            <summary>
            MIXER_GETCONTROLDETAILSF_LISTTEXT   	= 0x00000001;
            MIXER_SETCONTROLDETAILSF_LISTTEXT   	= 0x00000001;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.QueryMask">
            <summary>
            MIXER_GETCONTROLDETAILSF_QUERYMASK  	= 0x0000000F;
            MIXER_SETCONTROLDETAILSF_QUERYMASK  	= 0x0000000F;
            MIXER_GETLINECONTROLSF_QUERYMASK    	= 0x0000000F;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.All">
            <summary>
            MIXER_GETLINECONTROLSF_ALL          	= 0x00000000;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.OneById">
            <summary>
            MIXER_GETLINECONTROLSF_ONEBYID      	= 0x00000001;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.OneByType">
            <summary>
            MIXER_GETLINECONTROLSF_ONEBYTYPE    	= 0x00000002;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.GetLineInfoOfDestination">
            <summary>
            MIXER_GETLINEINFOF_DESTINATION      	= 0x00000000;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.GetLineInfoOfSource">
            <summary>
            MIXER_GETLINEINFOF_SOURCE           	= 0x00000001;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.GetLineInfoOfLineId">
            <summary>
            MIXER_GETLINEINFOF_LINEID           	= 0x00000002;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.GetLineInfoOfComponentType">
            <summary>
            MIXER_GETLINEINFOF_COMPONENTTYPE    	= 0x00000003;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.GetLineInfoOfTargetType">
            <summary>
            MIXER_GETLINEINFOF_TARGETTYPE       	= 0x00000004;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerFlags.GetLineInfoOfQueryMask">
            <summary>
            MIXER_GETLINEINFOF_QUERYMASK        	= 0x0000000F;
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLine_LineFlags.Active">
            <summary>
            Audio line is active. An active line indicates that a signal is probably passing through the line.
            (MIXERLINE_LINEF_ACTIVE)
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLine_LineFlags.Disconnected">
            <summary>
            Audio line is disconnected. A disconnected line's associated controls can still be modified, but the changes have no effect until the line is connected.
            (MIXERLINE_LINEF_DISCONNECTED)
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLine_LineFlags.Source">
            <summary>
            Audio line is an audio source line associated with a single audio destination line. 
            If this flag is not set, this line is an audio destination line associated with zero or more audio source lines.
            (MIXERLINE_LINEF_SOURCE)
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.DestinationUndefined">
            <summary>
            Audio line is a destination that cannot be defined by one of the standard component types. A mixer device is required to use this component type for line component types that have not been defined by Microsoft Corporation.
            MIXERLINE_COMPONENTTYPE_DST_UNDEFINED
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.DestinationDigital">
            <summary>
            Audio line is a digital destination (for example, digital input to a DAT or CD audio device).
            MIXERLINE_COMPONENTTYPE_DST_DIGITAL 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.DestinationLine">
            <summary>
            Audio line is a line level destination (for example, line level input from a CD audio device) that will be the final recording source for the analog-to-digital converter (ADC). Because most audio cards for personal computers provide some sort of gain for the recording audio source line, the mixer device will use the MIXERLINE_COMPONENTTYPE_DST_WAVEIN type.
            MIXERLINE_COMPONENTTYPE_DST_LINE
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.DestinationMonitor">
            <summary>
            Audio line is a destination used for a monitor.
            MIXERLINE_COMPONENTTYPE_DST_MONITOR
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.DestinationSpeakers">
            <summary>
            Audio line is an adjustable (gain and/or attenuation) destination intended to drive speakers. This is the typical component type for the audio output of audio cards for personal computers.
            MIXERLINE_COMPONENTTYPE_DST_SPEAKERS
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.DestinationHeadphones">
            <summary>
            Audio line is an adjustable (gain and/or attenuation) destination intended to drive headphones. Most audio cards use the same audio destination line for speakers and headphones, in which case the mixer device simply uses the MIXERLINE_COMPONENTTYPE_DST_SPEAKERS type.
            MIXERLINE_COMPONENTTYPE_DST_HEADPHONES
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.DestinationTelephone">
            <summary>
            Audio line is a destination that will be routed to a telephone line.
            MIXERLINE_COMPONENTTYPE_DST_TELEPHONE
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.DestinationWaveIn">
            <summary>
            Audio line is a destination that will be the final recording source for the waveform-audio input (ADC). This line typically provides some sort of gain or attenuation. This is the typical component type for the recording line of most audio cards for personal computers.
            MIXERLINE_COMPONENTTYPE_DST_WAVEIN
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.DestinationVoiceIn">
            <summary>
            Audio line is a destination that will be the final recording source for voice input. This component type is exactly like MIXERLINE_COMPONENTTYPE_DST_WAVEIN but is intended specifically for settings used during voice recording/recognition. Support for this line is optional for a mixer device. Many mixer devices provide only MIXERLINE_COMPONENTTYPE_DST_WAVEIN.
            MIXERLINE_COMPONENTTYPE_DST_VOICEIN
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceUndefined">
            <summary>
            Audio line is a source that cannot be defined by one of the standard component types. A mixer device is required to use this component type for line component types that have not been defined by Microsoft Corporation.
            MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceDigital">
            <summary>
            Audio line is a digital source (for example, digital output from a DAT or audio CD).
            MIXERLINE_COMPONENTTYPE_SRC_DIGITAL
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceLine">
            <summary>
            Audio line is a line-level source (for example, line-level input from an external stereo) that can be used as an optional recording source. Because most audio cards for personal computers provide some sort of gain for the recording source line, the mixer device will use the MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY type.
            MIXERLINE_COMPONENTTYPE_SRC_LINE
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceMicrophone">
            <summary>
            Audio line is a microphone recording source. Most audio cards for personal computers provide at least two types of recording sources: an auxiliary audio line and microphone input. A microphone audio line typically provides some sort of gain. Audio cards that use a single input for use with a microphone or auxiliary audio line should use the MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE component type.
            MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceSynthesizer">
            <summary>
            Audio line is a source originating from the output of an internal synthesizer. Most audio cards for personal computers provide some sort of MIDI synthesizer (for example, an Adlib®-compatible or OPL/3 FM synthesizer).
            MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceCompactDisc">
            <summary>
            Audio line is a source originating from the output of an internal audio CD. This component type is provided for audio cards that provide an audio source line intended to be connected to an audio CD (or CD-ROM playing an audio CD).
            MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceTelephone">
            <summary>
            Audio line is a source originating from an incoming telephone line.
            MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourcePcSpeaker">
            <summary>
            Audio line is a source originating from personal computer speaker. Several audio cards for personal computers provide the ability to mix what would typically be played on the internal speaker with the output of an audio card. Some audio cards support the ability to use this output as a recording source.
            MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceWaveOut">
            <summary>
            Audio line is a source originating from the waveform-audio output digital-to-analog converter (DAC). Most audio cards for personal computers provide this component type as a source to the MIXERLINE_COMPONENTTYPE_DST_SPEAKERS destination. Some cards also allow this source to be routed to the MIXERLINE_COMPONENTTYPE_DST_WAVEIN destination.
            MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceAuxiliary">
            <summary>
            Audio line is a source originating from the auxiliary audio line. This line type is intended as a source with gain or attenuation that can be routed to the MIXERLINE_COMPONENTTYPE_DST_SPEAKERS destination and/or recorded from the MIXERLINE_COMPONENTTYPE_DST_WAVEIN destination.
            MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerLineComponentType.SourceAnalog">
            <summary>
            Audio line is an analog source (for example, analog output from a video-cassette tape).
            MIXERLINE_COMPONENTTYPE_SRC_ANALOG
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Custom">
            <summary>Custom</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.BooleanMeter">
            <summary>Boolean meter</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.SignedMeter">
            <summary>Signed meter</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.PeakMeter">
            <summary>Peak meter</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.UnsignedMeter">
            <summary>Unsigned meter</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Boolean">
            <summary>Boolean</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.OnOff">
            <summary>On Off</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Mute">
            <summary>Mute</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Mono">
            <summary>Mono</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Loudness">
            <summary>Loudness</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.StereoEnhance">
            <summary>Stereo Enhance</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Button">
            <summary>Button</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Decibels">
            <summary>Decibels</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Signed">
            <summary>Signed</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Unsigned">
            <summary>Unsigned</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Percent">
            <summary>Percent</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Slider">
            <summary>Slider</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Pan">
            <summary>Pan</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.QSoundPan">
            <summary>Q-sound pan</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Fader">
            <summary>Fader</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Volume">
            <summary>Volume</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Bass">
            <summary>Bass</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Treble">
            <summary>Treble</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Equalizer">
            <summary>Equaliser</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.SingleSelect">
            <summary>Single Select</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Mux">
            <summary>Mux</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.MultipleSelect">
            <summary>Multiple select</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.Mixer">
            <summary>Mixer</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.MicroTime">
            <summary>Micro time</summary>
        </member>
        <member name="F:Ozeki.Media.MixerControlType.MilliTime">
            <summary>Milli time</summary>
        </member>
        <member name="M:Ozeki.Media.Mixer.#ctor(System.Int32)">
            <summary>Connects to the specified mixer</summary>
            <param name="mixerIndex">The index of the mixer to use. 
            This should be between zero and NumberOfDevices - 1</param>
        </member>
        <member name="M:Ozeki.Media.Mixer.GetDestination(System.Int32)">
            <summary>Retrieve the specified MixerDestination object</summary>
            <param name="destinationIndex">The ID of the destination to use.
            Should be between 0 and DestinationCount - 1</param>
        </member>
        <member name="P:Ozeki.Media.Mixer.NumberOfDevices">
            <summary>The number of mixer devices available</summary>	
        </member>
        <member name="P:Ozeki.Media.Mixer.DestinationCount">
            <summary>The number of destinations this mixer supports</summary>
        </member>
        <member name="P:Ozeki.Media.Mixer.Name">
            <summary>The name of this mixer device</summary>
        </member>
        <member name="P:Ozeki.Media.Mixer.Manufacturer">
            <summary>The manufacturer code for this mixer device</summary>
        </member>
        <member name="P:Ozeki.Media.Mixer.ProductID">
            <summary>The product identifier code for this mixer device</summary>
        </member>
        <member name="P:Ozeki.Media.Mixer.Destinations">
            <summary>
            A way to enumerate the destinations
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mixer.Mixers">
            <summary>
            A way to enumerate all available devices
            </summary>
        </member>
        <member name="T:Ozeki.Media.BooleanMixerControl">
            <summary>
            Boolean mixer control
            </summary>
        </member>
        <member name="T:Ozeki.Media.MixerControl">
            <summary>
            Represents a mixer control
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerControl.mixerHandle">
            <summary>
            Mixer Handle
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerControl.nChannels">
            <summary>
            Number of Channels
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixerControl.mixerHandleType">
            <summary>
            Mixer Handle Type
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerControl.GetMixerControls(System.IntPtr,Ozeki.Media.MixerLine,Ozeki.Media.MixerFlags)">
            <summary>
            Gets all the mixer controls
            </summary>
            <param name="mixerHandle"></param>
            <param name="mixerLine"></param>
            <param name="mixerHandleType"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.MixerControl.GetMixerControl(System.IntPtr,System.Int32,System.Int32,System.Int32,Ozeki.Media.MixerFlags)">
            <summary>
            Gets a specified Mixer Control
            </summary>
            <param name="mixerHandle">Mixer Handle</param>
            <param name="nLineID">Line ID</param>
            <param name="controlId">Control ID</param>
            <param name="nChannels">Number of Channels</param>
            <param name="mixerFlags">Flags to use (indicates the meaning of mixerHandle)</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.MixerControl.GetControlDetails">
            <summary>
            Gets the control details
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerControl.GetDetails(System.IntPtr)">
            <summary>
            Gets the control details
            </summary>
            <param name="pDetails"></param>
        </member>
        <member name="M:Ozeki.Media.MixerControl.IsControlBoolean(Ozeki.Media.MixerControlType)">
            <summary>
            Returns true if this is a boolean control
            </summary>
            <param name="controlType">Control type</param>
        </member>
        <member name="M:Ozeki.Media.MixerControl.IsControlListText(Ozeki.Media.MixerControlType)">
            <summary>
            Determines whether a specified mixer control type is a list text control
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerControl.ToString">
            <summary>
            String representation for debug purposes
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerControl.Name">
            <summary>
            Mixer control name
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerControl.ControlType">
            <summary>
            Mixer control type
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerControl.IsBoolean">
            <summary>
            Is this a boolean control
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerControl.IsListText">
            <summary>
            True if this is a list text control
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerControl.IsSigned">
            <summary>
            True if this is a signed control
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerControl.IsUnsigned">
            <summary>
            True if this is an unsigned control
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerControl.IsCustom">
            <summary>
            True if this is a custom control
            </summary>
        </member>
        <member name="M:Ozeki.Media.BooleanMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Gets the details for this control
            </summary>
            <param name="pDetails">memory pointer</param>
        </member>
        <member name="P:Ozeki.Media.BooleanMixerControl.Value">
            <summary>
            The current value of the control
            </summary>
        </member>
        <member name="T:Ozeki.Media.CustomMixerControl">
            <summary>
            Custom Mixer control
            </summary>
        </member>
        <member name="M:Ozeki.Media.CustomMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Get the data for this custom control
            </summary>
            <param name="pDetails">pointer to memory to receive data</param>
        </member>
        <member name="T:Ozeki.Media.ListTextMixerControl">
            <summary>
            List text mixer control
            </summary>
        </member>
        <member name="M:Ozeki.Media.ListTextMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Get the details for this control
            </summary>
            <param name="pDetails">Memory location to read to</param>
        </member>
        <member name="T:Ozeki.Media.SignedMixerControl">
            <summary>
            Represents a signed mixer control
            </summary>
        </member>
        <member name="M:Ozeki.Media.SignedMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Gets details for this contrl
            </summary>
        </member>
        <member name="M:Ozeki.Media.SignedMixerControl.ToString">
            <summary>
            String Representation for debugging purposes
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ozeki.Media.SignedMixerControl.Value">
            <summary>
            The value of the control
            </summary>
        </member>
        <member name="P:Ozeki.Media.SignedMixerControl.MinValue">
            <summary>
            Minimum value for this control
            </summary>
        </member>
        <member name="P:Ozeki.Media.SignedMixerControl.MaxValue">
            <summary>
            Maximum value for this control
            </summary>
        </member>
        <member name="P:Ozeki.Media.SignedMixerControl.Percent">
            <summary>
            Value of the control represented as a percentage
            </summary>
        </member>
        <member name="T:Ozeki.Media.UnsignedMixerControl">
            <summary>
            Represents an unsigned mixer control
            </summary>
        </member>
        <member name="M:Ozeki.Media.UnsignedMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Gets the details for this control
            </summary>
        </member>
        <member name="M:Ozeki.Media.UnsignedMixerControl.ToString">
            <summary>
            String Representation for debugging purposes
            </summary>
        </member>
        <member name="P:Ozeki.Media.UnsignedMixerControl.Value">
            <summary>
            The control value
            </summary>
        </member>
        <member name="P:Ozeki.Media.UnsignedMixerControl.MinValue">
            <summary>
            The control's minimum value
            </summary>
        </member>
        <member name="P:Ozeki.Media.UnsignedMixerControl.MaxValue">
            <summary>
            The control's maximum value
            </summary>
        </member>
        <member name="P:Ozeki.Media.UnsignedMixerControl.Percent">
            <summary>
            Value of the control represented as a percentage
            </summary>
        </member>
        <member name="T:Ozeki.Media.MixerInterop">
            <summary>
            Functions are used with audio mixers.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd756704%28v=VS.85%29.aspx
            </remarks>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerClose(System.IntPtr)">
            <summary>
            Closes the specified mixer device.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerGetControlDetails(System.IntPtr,Ozeki.Media.MIXERCONTROLDETAILS@,Ozeki.Media.MixerFlags)">
            <summary>
            Retrieves details about a single control associated with an audio line.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerGetDevCaps(System.IntPtr,Ozeki.Media.MIXERCAPS@,System.Int32)">
            <summary>
            Queries a specified mixer device to determine its capabilities.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerGetID(System.IntPtr,System.Int32@,Ozeki.Media.MixerFlags)">
            <summary>
            Retrieves the device identifier for a mixer device associated with a specified device handle.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerGetLineControls(System.IntPtr,Ozeki.Media.MIXERLINECONTROLS@,Ozeki.Media.MixerFlags)">
            <summary>
            Retrieves one or more controls associated with an audio line.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerGetLineInfo(System.IntPtr,Ozeki.Media.MIXERLINE@,Ozeki.Media.MixerFlags)">
            <summary>
            Retrieves information about a specific line of a mixer device.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerGetNumDevs">
            <summary>
            Retrieves the number of mixer devices present in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends a custom mixer driver message directly to a mixer driver.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerOpen(System.IntPtr@,System.Int32,System.IntPtr,System.IntPtr,Ozeki.Media.MixerFlags)">
            <summary>
            Opens a specified mixer device and ensures that the device will not be removed until the application closes the handle.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerInterop.mixerSetControlDetails(System.IntPtr,Ozeki.Media.MIXERCONTROLDETAILS@,Ozeki.Media.MixerFlags)">
            <summary>
            Sets properties of a single control associated with an audio line.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MixerLine">
            <summary>
            Represents a mixer line (source or destination)
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerLine.#ctor(System.IntPtr,System.Int32,Ozeki.Media.MixerFlags)">
            <summary>
            Creates a new mixer destination
            </summary>
            <param name="mixerHandle">Mixer Handle</param>
            <param name="destinationIndex">Destination Index</param>
            <param name="mixerHandleType">Mixer Handle Type</param>
        </member>
        <member name="M:Ozeki.Media.MixerLine.#ctor(System.IntPtr,System.Int32,System.Int32,Ozeki.Media.MixerFlags)">
            <summary>
            Creates a new Mixer Source For a Specified Source
            </summary>
            <param name="mixerHandle">Mixer Handle</param>
            <param name="destinationIndex">Destination Index</param>
            <param name="sourceIndex">Source Index</param>
            <param name="mixerHandleType">Flag indicating the meaning of mixerHandle</param>
        </member>
        <member name="M:Ozeki.Media.MixerLine.GetMixerIdForWaveIn(System.Int32)">
            <summary>
            Creates a new Mixer Source
            </summary>
            <param name="waveInDevice">Wave In Device</param>
        </member>
        <member name="M:Ozeki.Media.MixerLine.GetSource(System.Int32)">
            <summary>
            Gets the specified source
            </summary>
        </member>
        <member name="M:Ozeki.Media.MixerLine.ToString">
            <summary>
            Describes this Mixer Line (for diagnostic purposes)
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.Name">
            <summary>
            Mixer Line Name
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.ShortName">
            <summary>
            Mixer Line short name
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.LineId">
            <summary>
            The line ID
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.ComponentType">
            <summary>
            Component Type
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.TypeDescription">
            <summary>
            Mixer destination type description
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.Channels">
            <summary>
            Number of channels
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.SourceCount">
            <summary>
            Number of sources
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.ControlsCount">
            <summary>
            Number of controls
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.IsActive">
            <summary>
            Is this destination active
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.IsDisconnected">
            <summary>
            Is this destination disconnected
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.IsSource">
            <summary>
            Is this destination a source
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.Controls">
            <summary>
            Enumerator for the controls on this Mixer Limne
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.Sources">
            <summary>
            Enumerator for the sources on this Mixer Line
            </summary>
        </member>
        <member name="P:Ozeki.Media.MixerLine.TargetName">
            <summary>
            The name of the target output device
            </summary>
        </member>
        <member name="T:Ozeki.Media.Bounds">
            <summary>
            BOUNDS structure
            </summary>
        </member>
        <member name="F:Ozeki.Media.Bounds.minimum">
            <summary>
            dwMinimum / lMinimum / reserved 0
            </summary>
        </member>
        <member name="F:Ozeki.Media.Bounds.maximum">
            <summary>
            dwMaximum / lMaximum / reserved 1
            </summary>
        </member>
        <member name="F:Ozeki.Media.Bounds.reserved2">
            <summary>
            reserved 2
            </summary>
        </member>
        <member name="F:Ozeki.Media.Bounds.reserved3">
            <summary>
            reserved 3
            </summary>
        </member>
        <member name="F:Ozeki.Media.Bounds.reserved4">
            <summary>
            reserved 4
            </summary>
        </member>
        <member name="F:Ozeki.Media.Bounds.reserved5">
            <summary>
            reserved 5
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioMetrics">
            <summary>
            METRICS structure
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioMetrics.step">
            <summary>
            cSteps / reserved[0]
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioMetrics.customData">
            <summary>
            cbCustomData / reserved[1], number of bytes for control details
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioMetrics.reserved2">
            <summary>
            reserved 2
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioMetrics.reserved3">
            <summary>
            reserved 3
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioMetrics.reserved4">
            <summary>
            reserved 4
            </summary>
        </member>
        <member name="F:Ozeki.Media.AudioMetrics.reserved5">
            <summary>
            reserved 5
            </summary>
        </member>
        <member name="T:Ozeki.Media.MixeLineTarget">
            <summary>
            Target media information. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixeLineTarget.dwType">
            <summary>
            Target media device type associated with the audio line described in the MIXERLINE structure. An application must ignore target information for media device types it does not use.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixeLineTarget.dwDeviceID">
            <summary>
            Current device identifier of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This identifier is identical to the current media device index of the associated media device. When calling the mixerGetLineInfo function with the MIXER_GETLINEINFOF_TARGETTYPE flag, this member is ignored on input and will be returned to the caller by the audio mixer manager. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixeLineTarget.wMid">
            <summary>
            Manufacturer identifier of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This identifier is identical to the wMid member of the device-capabilities structure for the associated media. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixeLineTarget.wPid">
            <summary>
            Product identifier of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This identifier is identical to the wPid member of the device-capabilities structure for the associated media.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixeLineTarget.vDriverVersion">
            <summary>
            Driver version of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This version is identical to the vDriverVersion member of the device-capabilities structure for the associated media. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MixeLineTarget.szPname">
            <summary>
            Product name of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This name is identical to the szPname member of the device-capabilities structure for the associated media. 
            </summary>
        </member>
        <member name="T:Ozeki.Media.MIXERCAPS">
            <summary>
            The MIXERCAPS structure describes the capabilities of a mixer device.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757291%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.MIXERCAPS.wMid">
            <summary>
            Gets or sets the manufacturer identifier for the mixer device driver.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCAPS.wPid">
            <summary>
            Gets or sets the product identifier for the mixer device driver.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCAPS.vDriverVersion">
            <summary>
            Gets or sets the version number of the mixer device driver. The high-order byte is the major version number, and the low-order byte is the minor version number. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCAPS.szPname">
            <summary>
            Gets or sets the name of the product. If the mixer device driver supports multiple cards, this string must uniquely and easily identify (potentially to a user) the specific card.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCAPS.fdwSupport">
            <summary>
            Gets or sets various support information for the mixer device driver. No extended support bits are currently defined.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCAPS.cDestinations">
            <summary>
            Gets or sets the number of audio line destinations available through the mixer device.
            </summary>
            <remarks>
            All mixer devices must support at least one destination line, so this member cannot be zero.
            Destination indexes used in the dwDestination member of the MIXERLINE structure range from zero to the value specified in the cDestinations member minus one.
            </remarks>
        </member>
        <member name="T:Ozeki.Media.MIXERCONTROL">
            <summary>
            The MIXERCONTROL structure describes the state and metrics of a single control for an audio line.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757293%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROL.cbStruct">
            <summary>
            The size of the MIXERCONTROL structure in bytes.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROL.dwControlID">
            <summary>
            Audio mixer-defined identifier that uniquely refers to the control described by the MIXERCONTROL structure.
            This identifier can be in any format supported by the mixer device.
            An application should use this identifier only as an abstract handle. No two controls for a single mixer device can ever have the same control identifier.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROL.dwControlType">
            <summary>
            Class of the control for which the identifier is specified in dwControlID.
            An application must use this information to display the appropriate control for input from the user.
            An application can also display tailored graphics based on the control class or search for a particular control class on a specific line.
            If an application does not know about a control class, this control must be ignored.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROL.fdwControl">
            <summary>
            Status and support flags for the audio line control. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROL.cMultipleItems">
            <summary>
            Number of items per channel that make up a MIXERCONTROL_CONTROLF_MULTIPLE control. This number is always two or greater for multiple-item controls. If the control is not a multiple-item control, do not use this member; it will be zero.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROL.szShortName">
            <summary>
            Short string that describes the audio line control specified by dwControlID. This description should be appropriate to use as a concise label for the control.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROL.szName">
            <summary>
            String that describes the audio line control specified by dwControlID. This description should be appropriate to use as a complete description for the control.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROL.Bounds">
            <summary>
            Union of boundary types.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROL.Metrics">
            <summary>
            Union of boundary metrics.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MIXERCONTROLDETAILS">
            <summary>
            The MIXERCONTROLDETAILS structure refers to control-detail structures, retrieving or setting state information of an audio mixer control. All members of this structure must be initialized before calling the mixerGetControlDetails and mixerSetControlDetails functions.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757294%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS.cbStruct">
            <summary>
            Size, in bytes, of the MIXERCONTROLDETAILS structure.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS.dwControlID">
            <summary>
            Control identifier on which to get or set properties.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS.cChannels">
            <summary>
            Number of channels on which to get or set control properties.
            0: Use this value when the control is a MIXERCONTROL_CONTROLTYPE_CUSTOM control.
            1: Use this value when the control is a MIXERCONTROL_CONTROLF_UNIFORM control or when an application needs to get and set all channels as if they were uniform
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS.hwndOwner">
            <summary>
            Handle to the window that owns a custom dialog box for a mixer control. This member is used when the MIXER_SETCONTROLDETAILSF_CUSTOM flag is specified in the mixerSetControlDetails function.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS.cbDetails">
            <summary>
            Size of one of the paDetails in bytes.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS.paDetails">
            <summary>
            Pointer to an array of one or more structures in which properties for the specified control are retrieved or set. 
            </summary>
        </member>
        <member name="T:Ozeki.Media.MIXERCONTROLDETAILS_BOOLEAN">
            <summary>
            The MIXERCONTROLDETAILS_BOOLEAN structure retrieves and sets Boolean control properties for an audio mixer control.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757295%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS_BOOLEAN.fValue">
            <summary>
            Boolean value for a single item or channel.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MIXERCONTROLDETAILS_LISTTEXT">
            <summary>
            The MIXERCONTROLDETAILS_LISTTEXT structure retrieves list text, label text, and/or band-range information for multiple-item controls. This structure is used when the MIXER_GETCONTROLDETAILSF_LISTTEXT flag is specified in the mixerGetControlDetails function.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757296%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS_LISTTEXT.dwParam1">
            <summary>
            Control class-specific values.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS_LISTTEXT.dwParam2">
            <summary>
            Control class-specific values.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS_LISTTEXT.szName">
            <summary>
            Name describing a single item in a multiple-item control. This text can be used as a label or item text, depending on the control class.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MIXERCONTROLDETAILS_SIGNED">
            <summary>
            The MIXERCONTROLDETAILS_SIGNED structure retrieves and sets signed type control properties for an audio mixer control.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757297%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS_SIGNED.lValue">
            <summary>
            Signed integer value for a single item or channel.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MIXERCONTROLDETAILS_UNSIGNED">
            <summary>
            The MIXERCONTROLDETAILS_UNSIGNED structure retrieves and sets unsigned type control properties for an audio mixer control.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757298%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.MIXERCONTROLDETAILS_UNSIGNED.dwValue">
            <summary>
            Unsigned integer value for a single item or channel.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MIXERLINE">
            <summary>
            The MIXERLINE structure describes the state and metrics of an audio line.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757305%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.cbStruct">
            <summary>
            Size, in bytes, of the MIXERLINE structure. This member must be initialized before calling the mixerGetLineInfo function. The size specified in this member must be large enough to contain the MIXERLINE structure. When mixerGetLineInfo returns, this member contains the actual size of the information returned. The returned information will not exceed the requested size.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.dwDestination">
            <summary>
            Destination line index. This member ranges from zero to one less than the value specified in the cDestinations member of the MIXERCAPS structure retrieved by the mixerGetDevCaps function. When the mixerGetLineInfo function is called with the MIXER_GETLINEINFOF_DESTINATION flag, properties for the destination line are returned. (The dwSource member must be set to zero in this case.) When called with the MIXER_GETLINEINFOF_SOURCE flag, the properties for the source given by the dwSource member that is associated with the dwDestination member are returned. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.dwSource">
            <summary>
            Index for the audio source line associated with the dwDestination member. That is, this member specifies the nth audio source line associated with the specified audio destination line. This member is not used for destination lines and must be set to zero when MIXER_GETLINEINFOF_DESTINATION is specified in the mixerGetLineInfo function. When the MIXER_GETLINEINFOF_SOURCE flag is specified, this member ranges from zero to one less than the value specified in the cConnections member for the audio destination line given in the dwDestination member.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.dwLineID">
            <summary>
            An identifier defined by the mixer device that uniquely refers to the audio line described by the MIXERLINE structure. This identifier is unique for each mixer device and can be in any format. An application should use this identifier only as an abstract handle. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.fdwLine">
            <summary>
            Status and support flags for the audio line. This member is always returned to the application and requires no initialization.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.dwUser">
            <summary>
            Instance data defined by the audio device for the line. This member is intended for custom mixer applications designed specifically for the mixer device returning this information. Other applications should ignore this data. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.dwComponentType">
            <summary>
            Component type for this audio line. An application can use this information to display tailored graphics or to search for a particular component. If an application does not use component types, this member should be ignored.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.cChannels">
            <summary>
            Maximum number of separate channels that can be manipulated independently for the audio line. The minimum value for this field is 1 because a line must have at least one channel.
            Most modern audio cards for personal computers are stereo devices; for them, the value of this member is 2.
            Channel 1 is assumed to be the left channel; channel 2 is assumed to be the right channel.
            A multichannel line might have one or more uniform controls (controls that affect all channels of a line uniformly) associated with it.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.cConnections">
            <summary>
            Number of connections that are associated with the audio line. This member is used only for audio destination lines and specifies the number of audio source lines that are associated with it. This member is always zero for source lines and for destination lines that do not have any audio source lines associated with them. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.cControls">
            <summary>
            Number of controls associated with the audio line. This value can be zero. If no controls are associated with the line, the line is likely to be a source that might be selected in a MIXERCONTROL_CONTROLTYPE_MUX or MIXERCONTROL_CONTROLTYPE_MIXER but allows no manipulation of the signal. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.szShortName">
            <summary>
            Short string that describes the audio mixer line specified in the dwLineID member. This description should be appropriate as a concise label for the line. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.szName">
            <summary>
            String that describes the audio mixer line specified in the dwLineID member. This description should be appropriate as a complete description for the line. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINE.Target">
            <summary>
            Target media information.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MIXERLINECONTROLS">
            <summary>
            The MIXERLINECONTROLS structure contains information about the controls of an audio line.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757306%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.MIXERLINECONTROLS.cbStruct">
            <summary>
            Size of the MIXERLINECONTROLS structure in bytes.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINECONTROLS.dwLineID">
            <summary>
            Line identifier for which controls are being queried.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINECONTROLS.dwControlID">
            <summary>
            Control identifier of the desired control. Union with UInt32 dwControlType
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINECONTROLS.cControls">
            <summary>
            Number of MIXERCONTROL structure elements to retrieve. This member must be initialized by the application before calling the mixerGetLineControls function.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINECONTROLS.cbmxctrl">
            <summary>
            Size of a single MIXERCONTROL structure in bytes.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MIXERLINECONTROLS.pamxctrl">
            <summary>
            Pointer to one or more MIXERCONTROL structures to receive the properties of the requested audio line controls. This member cannot be NULL and must be initialized before calling the mixerGetLineControls function. Each element of the array of controls must be at least large enough to contain a base MIXERCONTROL structure. The cbmxctrl member must specify the size, in bytes, of each element in this array. No initialization of the buffer pointed to by this member is required by the application. All members are filled in by the mixer device (including the cbStruct member of each MIXERCONTROL structure) upon returning successfully.
            </summary>
        </member>
        <member name="M:Ozeki.Media.ozWaveMixer.WaveMix(System.Byte[],System.Byte[])">
            <summary>
            Két wave formátumú 16 bites 8000Hz es hangot kerver össze
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.ozWaveMixer.ComplementToSigned(System.Byte[]@,System.Int32)">
            <summary>
            In stereo wave format, samples are stored in 2's complement. For Mono, it's necessary to 
            convert those samples to their equivalent signed value. This method is used 
            by other public methods to equilibrate wave formats of different files.
            </summary>
            <param name="bytArr">Sample data in array</param>
            <param name="intPos">Array offset</param>
            <returns>Mono value as signed short</returns>
        </member>
        <member name="M:Ozeki.Media.ozWaveMixer.SignedToComplement(System.Int16)">
            <summary>
            Convert signed sample value back to 2's complement value equivalent to Stereo. This method is used 
            by other public methods to equilibrate wave formats of different files.
            </summary>
            <param name="shtVal">The mono signed value as short</param>
            <returns>Stereo 2's complement value as byte array</returns>
        </member>
        <member name="T:Ozeki.Media.AcmDriver">
            <summary>
            Represents an installed ACM Driver
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.IsCodecInstalled(System.String)">
            <summary>
            Helper function to determine whether a particular codec is installed
            </summary>
            <param name="shortName">The short name of the function</param>
            <returns>Whether the codec is installed</returns>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.ShowFormatChooseDialog(System.IntPtr,System.String,Ozeki.Media.AcmFormatEnumFlags,Ozeki.Media.AudioWaveFormat,Ozeki.Media.AudioWaveFormat@,System.String@,System.String@)">
            <summary>
            Show Format Choose Dialog
            </summary>
            <param name="ownerWindowHandle">Owner window handle, can be null</param>
            <param name="windowTitle">Window title</param>
            <param name="enumFlags">Enumeration flags. None to get everything</param>
            <param name="enumFormat">Enumeration format. Only needed with certain enumeration flags</param>
            <param name="selectedFormat">The selected format</param>
            <param name="selectedFormatDescription">Textual description of the selected format</param>
            <param name="selectedFormatTagDescription">Textual description of the selected format tag</param>
            <returns>True if a format was selected</returns>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.FindByShortName(System.String)">
            <summary>
            Finds a Driver by its short name
            </summary>
            <param name="shortName">Short Name</param>
            <returns>The driver, or null if not found</returns>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.EnumerateAcmDrivers">
            <summary>
            Gets a list of the ACM Drivers installed
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.DriverEnumCallback(System.IntPtr,System.IntPtr,Ozeki.Media.AcmDriverDetailsSupportFlags)">
            <summary>
            The callback for acmDriverEnum
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.#ctor(System.IntPtr)">
            <summary>
            Creates a new ACM Driver object
            </summary>
            <param name="hAcmDriver">Driver handle</param>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.ToString">
            <summary>
            ToString
            </summary>        
        </member>
        <member name="M:Ozeki.Media.AcmDriver.GetFormats(Ozeki.Media.AcmFormatTag)">
            <summary>
            Gets all the supported formats for a given format tag
            </summary>
            <param name="formatTag">Format tag</param>
            <returns>Supported formats</returns>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.Open">
            <summary>
            Opens this driver
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.Close">
            <summary>
            Closes this driver
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmDriver.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmDriver.MaxFormatSize">
            <summary>
            Gets the maximum size needed to store a AudioWaveFormat for ACM interop functions
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmDriver.ShortName">
            <summary>
            The short name of this driver
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmDriver.LongName">
            <summary>
            The full name of this driver
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmDriver.DriverId">
            <summary>
            The driver ID
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmDriver.FormatTags">
            <summary>
            The list of FormatTags for this ACM Driver
            </summary>
        </member>
        <member name="T:Ozeki.Media.AcmDriverDetails">
            <summary>
            Interop structure for ACM driver details (ACMDRIVERDETAILS)
            http://msdn.microsoft.com/en-us/library/dd742889%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.ShortNameChars">
            <summary>
            ACMDRIVERDETAILS_SHORTNAME_CHARS
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.LongNameChars">
            <summary>
            ACMDRIVERDETAILS_LONGNAME_CHARS
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.CopyrightChars">
            <summary>
            ACMDRIVERDETAILS_COPYRIGHT_CHARS
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.LicensingChars">
            <summary>
            ACMDRIVERDETAILS_LICENSING_CHARS 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.FeaturesChars">
            <summary>
            ACMDRIVERDETAILS_FEATURES_CHARS
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.structureSize">
            <summary>
            DWORD cbStruct
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.fccType">
            <summary>
            FOURCC fccType
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.fccComp">
            <summary>
            FOURCC fccComp
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.manufacturerId">
            <summary>
            WORD   wMid; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.productId">
            <summary>
            WORD wPid
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.acmVersion">
            <summary>
            DWORD vdwACM
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.driverVersion">
            <summary>
            DWORD vdwDriver
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.supportFlags">
            <summary>
            DWORD  fdwSupport;
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.formatTagsCount">
            <summary>
            DWORD cFormatTags
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.filterTagsCount">
            <summary>
            DWORD cFilterTags
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.hicon">
            <summary>
            HICON hicon
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.shortName">
            <summary>
            TCHAR  szShortName[ACMDRIVERDETAILS_SHORTNAME_CHARS]; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.longName">
            <summary>
            TCHAR  szLongName[ACMDRIVERDETAILS_LONGNAME_CHARS];
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.copyright">
            <summary>
            TCHAR  szCopyright[ACMDRIVERDETAILS_COPYRIGHT_CHARS]; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.licensing">
            <summary>
            TCHAR  szLicensing[ACMDRIVERDETAILS_LICENSING_CHARS]; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetails.features">
            <summary>
            TCHAR  szFeatures[ACMDRIVERDETAILS_FEATURES_CHARS];
            </summary>
        </member>
        <member name="T:Ozeki.Media.AcmDriverDetailsSupportFlags">
            <summary>
            Flags indicating what support a particular ACM driver has
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetailsSupportFlags.Codec">
            <summary>ACMDRIVERDETAILS_SUPPORTF_CODEC - Codec</summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetailsSupportFlags.Converter">
            <summary>ACMDRIVERDETAILS_SUPPORTF_CONVERTER - Converter</summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetailsSupportFlags.Filter">
            <summary>ACMDRIVERDETAILS_SUPPORTF_FILTER - Filter</summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetailsSupportFlags.Hardware">
            <summary>ACMDRIVERDETAILS_SUPPORTF_HARDWARE - Hardware</summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetailsSupportFlags.Async">
            <summary>ACMDRIVERDETAILS_SUPPORTF_ASYNC - Async</summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetailsSupportFlags.Local">
            <summary>ACMDRIVERDETAILS_SUPPORTF_LOCAL - Local</summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverDetailsSupportFlags.Disabled">
            <summary>ACMDRIVERDETAILS_SUPPORTF_DISABLED - Disabled</summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverEnumFlags.NoLocal">
            <summary>
            ACM_DRIVERENUMF_NOLOCAL, Only global drivers should be included in the enumeration
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmDriverEnumFlags.Disabled">
            <summary>
            ACM_DRIVERENUMF_DISABLED, Disabled ACM drivers should be included in the enumeration
            </summary>
        </member>
        <member name="T:Ozeki.Media.AcmFormat">
            <summary>
            ACM Format
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormat.FormatIndex">
            <summary>
            Format Index
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormat.FormatTag">
            <summary>
            Format Tag
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormat.SupportFlags">
            <summary>
            Support Flags
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormat.AudioWaveFormat">
            <summary>
            AudioWaveFormat
            </summary>    
        </member>
        <member name="P:Ozeki.Media.AcmFormat.WaveFormatByteSize">
            <summary>
            AudioWaveFormat Size
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormat.FormatDescription">
            <summary>
            Format Description
            </summary>        
        </member>
        <member name="T:Ozeki.Media.AcmFormatChoose">
            <summary>
            ACMFORMATCHOOSE
            http://msdn.microsoft.com/en-us/library/dd742911%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.structureSize">
            <summary>
            DWORD cbStruct; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.styleFlags">
            <summary>
            DWORD fdwStyle; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.ownerWindowHandle">
            <summary>
            HWND hwndOwner; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.selectedWaveFormatPointer">
            <summary>
            LPWAVEFORMATEX pwfx; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.selectedWaveFormatByteSize">
            <summary>
            DWORD cbwfx; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.title">
            <summary>
            LPCTSTR pszTitle; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.formatTagDescription">
            <summary>
            TCHAR szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.formatDescription">
            <summary>
            TCHAR szFormat[ACMFORMATDETAILS_FORMAT_CHARS]; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.name">
            <summary>
            LPTSTR pszName; 
            n.b. can be written into
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.nameByteSize">
            <summary>
            DWORD cchName
            Should be at least 128 unless name is zero
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.formatEnumFlags">
            <summary>
            DWORD fdwEnum; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.waveFormatEnumPointer">
            <summary>
            LPWAVEFORMATEX pwfxEnum; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.instanceHandle">
            <summary>
            HINSTANCE hInstance; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.templateName">
            <summary>
            LPCTSTR pszTemplateName; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.customData">
            <summary>
            LPARAM lCustData; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChoose.windowCallbackFunction">
            <summary>
            ACMFORMATCHOOSEHOOKPROC pfnHook; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChooseStyleFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChooseStyleFlags.ShowHelp">
            <summary>
            ACMFORMATCHOOSE_STYLEF_SHOWHELP
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChooseStyleFlags.EnableHook">
            <summary>
            ACMFORMATCHOOSE_STYLEF_ENABLEHOOK
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChooseStyleFlags.EnableTemplate">
            <summary>
            ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChooseStyleFlags.EnableTemplateHandle">
            <summary>
            ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChooseStyleFlags.InitToWfxStruct">
            <summary>
            ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatChooseStyleFlags.ContextHelp">
            <summary>
            ACMFORMATCHOOSE_STYLEF_CONTEXTHELP
            </summary>
        </member>
        <member name="T:Ozeki.Media.AcmFormatDetails">
            <summary>
            ACMFORMATDETAILS
            http://msdn.microsoft.com/en-us/library/dd742913%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatDetails.FormatDescriptionChars">
            <summary>
            ACMFORMATDETAILS_FORMAT_CHARS
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatDetails.structSize">
            <summary>
            DWORD cbStruct; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatDetails.formatIndex">
            <summary>
            DWORD dwFormatIndex; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatDetails.formatTag">
            <summary>
            DWORD dwFormatTag; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatDetails.supportFlags">
            <summary>
            DWORD fdwSupport; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatDetails.waveFormatPointer">
            <summary>
            LPWAVEFORMATEX pwfx; 
            </summary>    
        </member>
        <member name="F:Ozeki.Media.AcmFormatDetails.waveFormatByteSize">
            <summary>
            DWORD cbwfx; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatDetails.formatDescription">
            <summary>
            TCHAR szFormat[ACMFORMATDETAILS_FORMAT_CHARS];
            </summary>
        </member>
        <member name="T:Ozeki.Media.AcmFormatEnumFlags">
            <summary>
            Format Enumeration Flags
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.Convert">
            <summary>
            ACM_FORMATENUMF_CONVERT
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will only enumerate destination formats that can be converted from the given pwfx format. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.Hardware">
            <summary>
            ACM_FORMATENUMF_HARDWARE
            The enumerator should only enumerate formats that are supported as native input or output formats on one or more of the installed waveform-audio devices. This flag provides a way for an application to choose only formats native to an installed waveform-audio device. This flag must be used with one or both of the ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT flags. Specifying both ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT will enumerate only formats that can be opened for input or output. This is true regardless of whether this flag is specified. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.Input">
            <summary>
            ACM_FORMATENUMF_INPUT
            Enumerator should enumerate only formats that are supported for input (recording). 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.Channels">
            <summary>
            ACM_FORMATENUMF_NCHANNELS 
            The nChannels member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.SamplesPerSecond">
            <summary>
            ACM_FORMATENUMF_NSAMPLESPERSEC
            The nSamplesPerSec member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.Output">
            <summary>
            ACM_FORMATENUMF_OUTPUT 
            Enumerator should enumerate only formats that are supported for output (playback). 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.Suggest">
            <summary>
            ACM_FORMATENUMF_SUGGEST
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate all suggested destination formats for the given pwfx format. This mechanism can be used instead of the acmFormatSuggest function to allow an application to choose the best suggested format for conversion. The dwFormatIndex member will always be set to zero on return. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.BitsPerSample">
            <summary>
            ACM_FORMATENUMF_WBITSPERSAMPLE
            The wBitsPerSample member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatEnumFlags.FormatTag">
            <summary>
            ACM_FORMATENUMF_WFORMATTAG
            The wFormatTag member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. The dwFormatTag member of the ACMFORMATDETAILS structure must be equal to the wFormatTag member. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatSuggestFlags.FormatTag">
            <summary>
            ACM_FORMATSUGGESTF_WFORMATTAG
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatSuggestFlags.Channels">
            <summary>
            ACM_FORMATSUGGESTF_NCHANNELS
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatSuggestFlags.SamplesPerSecond">
            <summary>
            ACM_FORMATSUGGESTF_NSAMPLESPERSEC
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatSuggestFlags.BitsPerSample">
            <summary>
            ACM_FORMATSUGGESTF_WBITSPERSAMPLE
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatSuggestFlags.TypeMask">
            <summary>
            ACM_FORMATSUGGESTF_TYPEMASK
            </summary>
        </member>
        <member name="T:Ozeki.Media.AcmFormatTag">
            <summary>
            ACM Format Tag
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormatTag.FormatTagIndex">
            <summary>
            Format Tag Index
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormatTag.FormatTag">
            <summary>
            Format Tag
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormatTag.FormatSize">
            <summary>
            Format Size
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormatTag.SupportFlags">
            <summary>
            Support Flags
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormatTag.StandardFormatsCount">
            <summary>
            Standard Formats Count
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmFormatTag.FormatDescription">
            <summary>
            Format Description
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatTagDetails.FormatTagDescriptionChars">
            <summary>
            ACMFORMATTAGDETAILS_FORMATTAG_CHARS
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatTagDetails.structureSize">
            <summary>
            DWORD cbStruct; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatTagDetails.formatTagIndex">
            <summary>
            DWORD dwFormatTagIndex; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatTagDetails.formatTag">
            <summary>
            DWORD dwFormatTag; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatTagDetails.formatSize">
            <summary>
            DWORD cbFormatSize; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatTagDetails.supportFlags">
            <summary>
            DWORD fdwSupport;
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatTagDetails.standardFormatsCount">
            <summary>
            DWORD cStandardFormats; 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmFormatTagDetails.formatDescription">
            <summary>
            TCHAR szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; 
            </summary>
        </member>
        <member name="T:Ozeki.Media.AcmInterop">
            <summary>
            Interop definitions for Windows ACM (Audio Compression Manager) API
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmInterop.acmFormatSuggest(System.IntPtr,Ozeki.Media.AudioWaveFormat,Ozeki.Media.AudioWaveFormat,System.Int32,Ozeki.Media.AcmFormatSuggestFlags)">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd742916%28VS.85%29.aspx
            MMRESULT acmFormatSuggest(
            HACMDRIVER had,          
            LPWAVEFORMATEX pwfxSrc,  
            LPWAVEFORMATEX pwfxDst,  
            DWORD cbwfxDst,          
            DWORD fdwSuggest);
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmInterop.acmStreamOpen(System.IntPtr@,System.IntPtr,Ozeki.Media.AudioWaveFormat,Ozeki.Media.AudioWaveFormat,Ozeki.Media.WaveFilter,System.IntPtr,System.IntPtr,Ozeki.Media.AcmStreamOpenFlags)">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd742928%28VS.85%29.aspx
            MMRESULT acmStreamOpen(
              LPHACMSTREAM    phas,       
              HACMDRIVER      had,        
              LPWAVEFORMATEX  pwfxSrc,    
              LPWAVEFORMATEX  pwfxDst,    
              LPWAVEFILTER    pwfltr,     
              DWORD_PTR       dwCallback, 
              DWORD_PTR       dwInstance, 
              DWORD           fdwOpen     
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmInterop.acmStreamOpen2(System.IntPtr@,System.IntPtr,System.IntPtr,System.IntPtr,Ozeki.Media.WaveFilter,System.IntPtr,System.IntPtr,Ozeki.Media.AcmStreamOpenFlags)">
            <summary>
            A version with pointers for troubleshooting
            </summary>
        </member>
        <member name="T:Ozeki.Media.AcmInterop.AcmFormatChooseHookProc">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd742910%28VS.85%29.aspx
            UINT ACMFORMATCHOOSEHOOKPROC acmFormatChooseHookProc(
              HWND hwnd,     
              UINT uMsg,     
              WPARAM wParam, 
              LPARAM lParam  
            </summary>        
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountDrivers">
            <summary>ACM_METRIC_COUNT_DRIVERS</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountCodecs">
            <summary>ACM_METRIC_COUNT_CODECS</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountConverters">
            <summary>ACM_METRIC_COUNT_CONVERTERS</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountFilters">
            <summary>ACM_METRIC_COUNT_FILTERS</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountDisabled">
            <summary>ACM_METRIC_COUNT_DISABLED</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountHardware">
            <summary>ACM_METRIC_COUNT_HARDWARE</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountLocalDrivers">
            <summary>ACM_METRIC_COUNT_LOCAL_DRIVERS</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountLocalCodecs">
            <summary>ACM_METRIC_COUNT_LOCAL_CODECS</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountLocalConverters">
            <summary>ACM_METRIC_COUNT_LOCAL_CONVERTERS</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountLocalFilters">
            <summary>ACM_METRIC_COUNT_LOCAL_FILTERS</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.CountLocalDisabled">
            <summary>ACM_METRIC_COUNT_LOCAL_DISABLED</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.HardwareWaveInput">
            <summary>ACM_METRIC_HARDWARE_WAVE_INPUT</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.HardwareWaveOutput">
            <summary>ACM_METRIC_HARDWARE_WAVE_OUTPUT</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.MaxSizeFormat">
            <summary>ACM_METRIC_MAX_SIZE_FORMAT</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.MaxSizeFilter">
            <summary>ACM_METRIC_MAX_SIZE_FILTER</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.DriverSupport">
            <summary>ACM_METRIC_DRIVER_SUPPORT</summary>
        </member>
        <member name="F:Ozeki.Media.AcmMetrics.DriverPriority">
            <summary>ACM_METRIC_DRIVER_PRIORITY</summary>
        </member>
        <member name="T:Ozeki.Media.AcmStream">
            <summary>
            AcmStream encapsulates an Audio Compression Manager Stream
            used to convert audio from one format to another
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmStream.#ctor(Ozeki.Media.AudioWaveFormat,Ozeki.Media.AudioWaveFormat)">
            <summary>
            Creates a new ACM stream to convert one format to another. Note that
            not all conversions can be done in one step
            </summary>
            <param name="sourceFormat">The source audio format</param>
            <param name="destFormat">The destination audio format</param>
        </member>
        <member name="M:Ozeki.Media.AcmStream.#ctor(System.IntPtr,Ozeki.Media.AudioWaveFormat,Ozeki.Media.WaveFilter)">
            <summary>
            Creates a new ACM stream to convert one format to another, using a 
            specified driver identified and wave filter
            </summary>
            <param name="driverId">the driver identifier</param>
            <param name="sourceFormat">the source format</param>
            <param name="waveFilter">the wave filter</param>
        </member>
        <member name="M:Ozeki.Media.AcmStream.SourceToDest(System.Int32)">
            <summary>
            Returns the number of output bytes for a given number of input bytes
            </summary>
            <param name="source">Number of input bytes</param>
            <returns>Number of output bytes</returns>
        </member>
        <member name="M:Ozeki.Media.AcmStream.DestToSource(System.Int32)">
            <summary>
            Returns the number of source bytes for a given number of destination bytes
            </summary>
            <param name="dest">Number of destination bytes</param>
            <returns>Number of source bytes</returns>
        </member>
        <member name="M:Ozeki.Media.AcmStream.SuggestPcmFormat(Ozeki.Media.AudioWaveFormat)">
            <summary>
            Suggests an appropriate PCM format that the compressed format can be converted
            to in one step
            </summary>
            <param name="compressedFormat">The compressed format</param>
            <returns>The PCM format</returns>
        </member>
        <member name="M:Ozeki.Media.AcmStream.Convert(System.Int32,System.Int32@)">
            <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
            <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
            <param name="sourceBytesConverted">The number of source bytes actually converted</param>
            <returns>The number of converted bytes in the DestinationBuffer</returns>
        </member>
        <member name="M:Ozeki.Media.AcmStream.Convert(System.Int32)">
            <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
            <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
            <returns>The number of converted bytes in the DestinationBuffer</returns>
        </member>
        <member name="M:Ozeki.Media.AcmStream.Dispose">
            <summary>
            Frees resources associated with this ACM Stream
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmStream.Dispose(System.Boolean)">
            <summary>
            Frees resources associated with this ACM Stream
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcmStream.Finalize">
            <summary>
            Frees resources associated with this ACM Stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmStream.SourceBuffer">
            <summary>
            Returns the Source Buffer. Fill this with data prior to calling convert
            </summary>
        </member>
        <member name="P:Ozeki.Media.AcmStream.DestBuffer">
            <summary>
            Returns the Destination buffer. This will contain the converted data
            after a successful call to Convert
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamConvertFlags.BlockAlign">
            <summary>
            ACM_STREAMCONVERTF_BLOCKALIGN
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamConvertFlags.Start">
            <summary>
            ACM_STREAMCONVERTF_START
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamConvertFlags.End">
            <summary>
            ACM_STREAMCONVERTF_END
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamHeaderStatusFlags.Done">
            <summary>
            ACMSTREAMHEADER_STATUSF_DONE
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamHeaderStatusFlags.Prepared">
            <summary>
            ACMSTREAMHEADER_STATUSF_PREPARED
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamHeaderStatusFlags.InQueue">
            <summary>
            ACMSTREAMHEADER_STATUSF_INQUEUE
            </summary>
        </member>
        <member name="T:Ozeki.Media.AcmStreamHeaderStruct">
            <summary>
            Interop structure for ACM stream headers.
            ACMSTREAMHEADER 
            http://msdn.microsoft.com/en-us/library/dd742926%28VS.85%29.aspx
            </summary>    
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.Query">
            <summary>
            ACM_STREAMOPENF_QUERY, ACM will be queried to determine whether it supports the given conversion. A conversion stream will not be opened, and no handle will be returned in the phas parameter. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.Async">
            <summary>
            ACM_STREAMOPENF_ASYNC, Stream conversion should be performed asynchronously. If this flag is specified, the application can use a callback function to be notified when the conversion stream is opened and closed and after each buffer is converted. In addition to using a callback function, an application can examine the fdwStatus member of the ACMSTREAMHEADER structure for the ACMSTREAMHEADER_STATUSF_DONE flag. 
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.NonRealTime">
            <summary>
            ACM_STREAMOPENF_NONREALTIME, ACM will not consider time constraints when converting the data. By default, the driver will attempt to convert the data in real time. For some formats, specifying this flag might improve the audio quality or other characteristics.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.CallbackTypeMask">
            <summary>
            CALLBACK_TYPEMASK, callback type mask
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.CallbackNull">
            <summary>
            CALLBACK_NULL, no callback
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.CallbackWindow">
            <summary>
            CALLBACK_WINDOW, dwCallback is a HWND
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.CallbackTask">
            <summary>
            CALLBACK_TASK, dwCallback is a HTASK
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.CallbackFunction">
            <summary>
            CALLBACK_FUNCTION, dwCallback is a FARPROC
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.CallbackThread">
            <summary>
            CALLBACK_THREAD, thread ID replaces 16 bit task
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamOpenFlags.CallbackEvent">
            <summary>
            CALLBACK_EVENT, dwCallback is an EVENT Handle
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamSizeFlags.Source">
            <summary>
            ACM_STREAMSIZEF_SOURCE
            </summary>
        </member>
        <member name="F:Ozeki.Media.AcmStreamSizeFlags.Destination">
            <summary>
            ACM_STREAMSIZEF_DESTINATION
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioWaveFormat">
            <summary>
            Represents a Wave file format
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.#ctor">
            <summary>
            Creates a new PCM 44.1Khz stereo 16 bit format
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new 16 bit wave format with the specified sample
            rate and channel count
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.CreateCustomFormat(Ozeki.Media.WaveFormatEncoding,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a AudioWaveFormat with custom members
            </summary>
            <param name="tag">The encoding</param>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
            <param name="averageBytesPerSecond">Average Bytes Per Second</param>
            <param name="blockAlign">Block Align</param>
            <param name="bitsPerSample">Bits Per Sample</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.CreateALawFormat(System.Int32,System.Int32)">
            <summary>
            Creates an A-law wave format
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of Channels</param>
            <returns>Wave Format</returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.CreateMuLawFormat(System.Int32,System.Int32)">
            <summary>
            Creates a Mu-law wave format
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of Channels</param>
            <returns>Wave Format</returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new PCM format with the specified sample rate, bit depth and channels
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.CreateIeeeFloatWaveFormat(System.Int32,System.Int32)">
            <summary>
            Creates a new 32 bit IEEE floating point wave format
            </summary>
            <param name="sampleRate">sample rate</param>
            <param name="channels">number of channels</param>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.MarshalFromPtr(System.IntPtr)">
            <summary>
            Helper function to retrieve a AudioWaveFormat structure from a pointer
            </summary>
            <param name="pointer">AudioWaveFormat structure</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.MarshalToPtr(Ozeki.Media.AudioWaveFormat)">
            <summary>
            Helper function to marshal AudioWaveFormat to an IntPtr
            </summary>
            <param name="format">AudioWaveFormat</param>
            <returns>IntPtr to AudioWaveFormat structure (needs to be freed by callee)</returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.#ctor(System.IO.BinaryReader)">
            <summary>
            Reads a new AudioWaveFormat object from a stream
            </summary>
            <param name="br">A binary reader that wraps the stream</param>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.ToString">
            <summary>
            Reports this AudioWaveFormat as a string
            </summary>
            <returns>String describing the wave format</returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.FromFormatChunk(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads in a AudioWaveFormat (with extra data) from a fmt chunk (chunk identifier and
            length should already have been read)
            </summary>
            <param name="br">Binary reader</param>
            <param name="formatChunkLength">Format chunk length</param>
            <returns>A AudioWaveFormatExtraData</returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.Equals(System.Object)">
            <summary>
            Compares with another AudioWaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this AudioWaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormat.Serialize(System.IO.BinaryWriter)">
            <summary>
            Writes this AudioWaveFormat object to a stream
            </summary>
            <param name="writer">the output stream</param>
        </member>
        <member name="P:Ozeki.Media.AudioWaveFormat.WaveFormatTag">
            <summary>format type</summary>
        </member>
        <member name="P:Ozeki.Media.AudioWaveFormat.Encoding">
            <summary>
            Returns the encoding type used
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioWaveFormat.Channels">
            <summary>
            Returns the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioWaveFormat.SampleRate">
            <summary>
            Returns the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioWaveFormat.AverageBytesPerSecond">
            <summary>
            Returns the average number of bytes used per second
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioWaveFormat.BlockAlign">
            <summary>
            Returns the block alignment
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioWaveFormat.BitsPerSample">
            <summary>
            Returns the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioWaveFormat.ExtraSize">
            <summary>
            Returns the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioWaveFormatExtraData.#ctor">
            <summary>
            parameterless constructor for marshalling
            </summary>
        </member>
        <member name="T:Ozeki.Media.ChannelMode">
            <summary>
            Channel Mode
            </summary>
        </member>
        <member name="F:Ozeki.Media.ChannelMode.Stereo">
            <summary>
            Stereo
            </summary>
        </member>
        <member name="F:Ozeki.Media.ChannelMode.JointStereo">
            <summary>
            Joint Stereo
            </summary>
        </member>
        <member name="F:Ozeki.Media.ChannelMode.DualChannel">
            <summary>
            Dual Channel
            </summary>
        </member>
        <member name="F:Ozeki.Media.ChannelMode.Mono">
            <summary>
            Mono
            </summary>
        </member>
        <member name="T:Ozeki.Media.Id3v2Tag">
            <summary>
            An ID3v2 Tag
            </summary>
        </member>
        <member name="M:Ozeki.Media.Id3v2Tag.ReadTag(System.IO.Stream)">
            <summary>
            Reads an ID3v2 tag from a stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.Id3v2Tag.RawData">
            <summary>
            Raw data from this tag
            </summary>
        </member>
        <member name="T:Ozeki.Media.IMp3FrameDecompressor">
            <summary>
            Interface for MP3 frame by frame decoder
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMp3FrameDecompressor.DecompressFrame(Ozeki.Media.Mp3Frame,System.Byte[],System.Int32)">
            <summary>
            Decompress a single MP3 frame
            </summary>
            <param name="frame">Frame to decompress</param>
            <param name="dest">Output buffer</param>
            <param name="destOffset">Offset within output buffer</param>
            <returns>Bytes written to output buffer</returns>
        </member>
        <member name="P:Ozeki.Media.IMp3FrameDecompressor.OutputFormat">
            <summary>
            PCM format that we are converting into
            </summary>
        </member>
        <member name="T:Ozeki.Media.IWaveProvider">
            <summary>
            Generic interface for all WaveProviders.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IWaveProvider.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fill the specified buffer with wave data.
            </summary>
            <param name="buffer">The buffer to fill of wave data.</param>
            <param name="offset">Offset into buffer</param>
            <param name="count">The number of bytes to read</param>
            <returns>the number of bytes written to the buffer.</returns>
        </member>
        <member name="P:Ozeki.Media.IWaveProvider.AudioWaveFormat">
            <summary>
            Gets the AudioWaveFormat of this WaveProvider.
            </summary>
            <value>The wave format.</value>
        </member>
        <member name="T:Ozeki.Media.MmException">
            <summary>
            Summary description for MmException.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MmException.#ctor(Ozeki.Media.MmResult,System.String)">
            <summary>
            Creates a new MmException
            </summary>
            <param name="result">The result returned by the Windows API call</param>
            <param name="function">The name of the Windows API that failed</param>
        </member>
        <member name="M:Ozeki.Media.MmException.Try(Ozeki.Media.MmResult,System.String)">
            <summary>
            Helper function to automatically raise an exception on failure
            </summary>
            <param name="result">The result of the API call</param>
            <param name="function">The API function name</param>
        </member>
        <member name="P:Ozeki.Media.MmException.Result">
            <summary>
            Returns the Windows API result
            </summary>
        </member>
        <member name="T:Ozeki.Media.MmResult">
            <summary>
            Windows multimedia error codes from mmsystem.h.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.NoError">
            <summary>no error, MMSYSERR_NOERROR</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.UnspecifiedError">
            <summary>unspecified error, MMSYSERR_ERROR</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.BadDeviceId">
            <summary>device ID out of range, MMSYSERR_BADDEVICEID</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.NotEnabled">
            <summary>driver failed enable, MMSYSERR_NOTENABLED</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.AlreadyAllocated">
            <summary>device already allocated, MMSYSERR_ALLOCATED</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.InvalidHandle">
            <summary>device handle is invalid, MMSYSERR_INVALHANDLE</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.NoDriver">
            <summary>no device driver present, MMSYSERR_NODRIVER</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.MemoryAllocationError">
            <summary>memory allocation error, MMSYSERR_NOMEM</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.NotSupported">
            <summary>function isn't supported, MMSYSERR_NOTSUPPORTED</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.BadErrorNumber">
            <summary>error value out of range, MMSYSERR_BADERRNUM</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.InvalidFlag">
            <summary>invalid flag passed, MMSYSERR_INVALFLAG</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.InvalidParameter">
            <summary>invalid parameter passed, MMSYSERR_INVALPARAM</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.HandleBusy">
            <summary>handle being used simultaneously on another thread (eg callback),MMSYSERR_HANDLEBUSY</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.InvalidAlias">
            <summary>specified alias not found, MMSYSERR_INVALIDALIAS</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.BadRegistryDatabase">
            <summary>bad registry database, MMSYSERR_BADDB</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.RegistryKeyNotFound">
            <summary>registry key not found, MMSYSERR_KEYNOTFOUND</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.RegistryReadError">
            <summary>registry read error, MMSYSERR_READERROR</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.RegistryWriteError">
            <summary>registry write error, MMSYSERR_WRITEERROR</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.RegistryDeleteError">
            <summary>registry delete error, MMSYSERR_DELETEERROR</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.RegistryValueNotFound">
            <summary>registry value not found, MMSYSERR_VALNOTFOUND</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.NoDriverCallback">
            <summary>driver does not call DriverCallback, MMSYSERR_NODRIVERCB</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.MoreData">
            <summary>more data to be returned, MMSYSERR_MOREDATA</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.WaveBadFormat">
            <summary>unsupported wave format, WAVERR_BADFORMAT</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.WaveStillPlaying">
            <summary>still something playing, WAVERR_STILLPLAYING</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.WaveHeaderUnprepared">
            <summary>header not prepared, WAVERR_UNPREPARED</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.WaveSync">
            <summary>device is synchronous, WAVERR_SYNC</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.AcmNotPossible">
            <summary>Conversion not possible (ACMERR_NOTPOSSIBLE)</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.AcmBusy">
            <summary>Busy (ACMERR_BUSY)</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.AcmHeaderUnprepared">
            <summary>Header Unprepared (ACMERR_UNPREPARED)</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.AcmCancelled">
            <summary>Cancelled (ACMERR_CANCELED)</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.MixerInvalidLine">
            <summary>invalid line (MIXERR_INVALLINE)</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.MixerInvalidControl">
            <summary>invalid control (MIXERR_INVALCONTROL)</summary>
        </member>
        <member name="F:Ozeki.Media.MmResult.MixerInvalidValue">
            <summary>invalid value (MIXERR_INVALVALUE)</summary>
        </member>
        <member name="T:Ozeki.Media.Mp3AudioWaveFormat">
            <summary>
            MP3 AudioWaveFormat, MPEGLAYER3WAVEFORMAT from mmreg.h
            </summary>
        </member>
        <member name="M:Ozeki.Media.Mp3AudioWaveFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new MP3 AudioWaveFormat
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3AudioWaveFormat.ID">
            <summary>
            Wave format ID (wID)
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3AudioWaveFormat.Flags">
            <summary>
            Padding flags (fdwFlags)
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3AudioWaveFormat.BlockSize">
            <summary>
            Block Size (nBlockSize)
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3AudioWaveFormat.FramesPerBlock">
            <summary>
            Frames per block (nFramesPerBlock)
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3AudioWaveFormat.CodecDelay">
            <summary>
            Codec Delay (nCodecDelay)
            </summary>
        </member>
        <member name="T:Ozeki.Media.NAudioMp3FileReader">
            <summary>
            Class for reading from MP3 files
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveStream">
            <summary>
            Base class for all WaveStream classes. Derives from stream.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveStream.Flush">
            <summary>
            Flush does not need to do anything
            See <see cref="M:System.IO.Stream.Flush"/>
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            An alternative way of repositioning.
            See <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/>
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the WaveStream. Not Supported.
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Ozeki.Media.WaveStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the WaveStream. Not Supported.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveStream.Skip(System.Int32)">
            <summary>
            Moves forward or backwards the specified number of seconds in the stream
            </summary>
            <param name="seconds">Number of seconds to move, can be negative</param>
        </member>
        <member name="M:Ozeki.Media.WaveStream.HasData(System.Int32)">
            <summary>
            Whether the WaveStream has non-zero sample data at the current position for the 
            specified count
            </summary>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="P:Ozeki.Media.WaveStream.AudioWaveFormat">
            <summary>
            Retrieves the AudioWaveFormat for this stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveStream.CanRead">
            <summary>
            We can read from this stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveStream.CanSeek">
            <summary>
            We can seek within this stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveStream.CanWrite">
            <summary>
            We can't write to this stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveStream.BlockAlign">
            <summary>
            The block alignment for this wavestream. Do not modify the Position
            to anything that is not a whole multiple of this value
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveStream.CurrentTime">
            <summary>
            The current position in the stream in Time format
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveStream.TotalTime">
            <summary>
            Total length in real-time of the stream (may be an estimate for compressed files)
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioMp3FileReader.#ctor(System.String)">
            <summary>Supports opening a MP3 file</summary>
        </member>
        <member name="M:Ozeki.Media.NAudioMp3FileReader.#ctor(System.IO.Stream)">
            <summary>
            Opens MP3 from a stream rather than a file
            Will not dispose of this stream itself
            </summary>
            <param name="inputStream"></param>
        </member>
        <member name="M:Ozeki.Media.NAudioMp3FileReader.TotalSeconds">
            <summary>
            Gets the total length of this file in milliseconds.
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioMp3FileReader.ReadNextFrame">
            <summary>
            Reads the next mp3 frame
            </summary>
            <returns>Next mp3 frame, or null if EOF</returns>
        </member>
        <member name="M:Ozeki.Media.NAudioMp3FileReader.ReadNextFrame(System.Boolean)">
            <summary>
            Reads the next mp3 frame
            </summary>
            <returns>Next mp3 frame, or null if EOF</returns>
        </member>
        <member name="M:Ozeki.Media.NAudioMp3FileReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed PCM data from our MP3 file.
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioMp3FileReader.Dispose(System.Boolean)">
            <summary>
            Disposes this WaveStream
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioMp3FileReader.Mp3AudioWaveFormat">
            <summary>
            The MP3 wave format (n.b. NOT the output format of this stream - see the AudioWaveFormat property)
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioMp3FileReader.Id3v2Tag">
            <summary>
            ID3v2 tag if present
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioMp3FileReader.Id3v1Tag">
            <summary>
            ID3v1 tag if present
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioMp3FileReader.Length">
            <summary>
            This is the length in bytes of data available to be read out from the Read method
            (i.e. the decompressed MP3 length)
            n.b. this may return 0 for files whose length is unknown
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioMp3FileReader.AudioWaveFormat">
            <summary>
            <see cref="P:Ozeki.Media.WaveStream.AudioWaveFormat"/>
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioMp3FileReader.Position">
            <summary>
            <see cref="P:System.IO.Stream.Position"/>
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioMp3FileReader.XingHeader">
            <summary>
            Xing header if present
            </summary>
        </member>
        <member name="T:Ozeki.Media.Mp3Frame">
            <summary>
            Represents an MP3 Frame
            </summary>
        </member>
        <member name="M:Ozeki.Media.Mp3Frame.#ctor(System.IO.Stream)">
            <summary>Reads an MP3Frame from a stream</summary>
            <remarks>http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm has some good info
            also see http://www.codeproject.com/KB/audio-video/mpegaudioinfo.aspx
            </remarks>
        </member>
        <member name="M:Ozeki.Media.Mp3Frame.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Reads an MP3Frame from a stream</summary>
            <remarks>http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm 
            has some good info</remarks>
            <exception cref="T:System.IO.EndOfStreamException">Thrown when we reach the end of the stream without reading a valid frame</exception>
        </member>
        <member name="M:Ozeki.Media.Mp3Frame.IsValidHeader(System.Byte[])">
            <summary>checks if the four bytes represent a valid header,
            if they are, will parse the values into local properties
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3Frame.SampleRate">
            <summary>
            Sample rate of this frame
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3Frame.FrameLength">
            <summary>
            Frame length in bytes
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3Frame.BitRate">
            <summary>
            Bit Rate
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3Frame.RawData">
            <summary>
            Raw frame data
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3Frame.MpegVersion">
            <summary>
            MPEG Version
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3Frame.MpegLayer">
            <summary>
            MPEG Layer
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3Frame.ChannelMode">
            <summary>
            Channel Mode
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3Frame.SampleCount">
            <summary>
            The number of samples in this frame
            </summary>
        </member>
        <member name="T:Ozeki.Media.Mp3WaveFormatFlags">
            <summary>
            Wave Format Padding Flags
            </summary>
        </member>
        <member name="F:Ozeki.Media.Mp3WaveFormatFlags.PaddingIso">
            <summary>
            MPEGLAYER3_FLAG_PADDING_ISO
            </summary>
        </member>
        <member name="F:Ozeki.Media.Mp3WaveFormatFlags.PaddingOn">
            <summary>
            MPEGLAYER3_FLAG_PADDING_ON
            </summary>
        </member>
        <member name="F:Ozeki.Media.Mp3WaveFormatFlags.PaddingOff">
            <summary>
            MPEGLAYER3_FLAG_PADDING_OFF
            </summary>
        </member>
        <member name="T:Ozeki.Media.Mp3WaveFormatId">
            <summary>
            Wave Format ID
            </summary>
        </member>
        <member name="F:Ozeki.Media.Mp3WaveFormatId.Unknown">
            <summary>MPEGLAYER3_ID_UNKNOWN</summary>
        </member>
        <member name="F:Ozeki.Media.Mp3WaveFormatId.Mpeg">
            <summary>MPEGLAYER3_ID_MPEG</summary>
        </member>
        <member name="F:Ozeki.Media.Mp3WaveFormatId.ConstantFrameSize">
            <summary>MPEGLAYER3_ID_CONSTANTFRAMESIZE</summary>
        </member>
        <member name="T:Ozeki.Media.MpegLayer">
            <summary>
            MPEG Layer flags
            </summary>
        </member>
        <member name="F:Ozeki.Media.MpegLayer.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Ozeki.Media.MpegLayer.Layer3">
            <summary>
            Layer 3
            </summary>
        </member>
        <member name="F:Ozeki.Media.MpegLayer.Layer2">
            <summary>
            Layer 2
            </summary>
        </member>
        <member name="F:Ozeki.Media.MpegLayer.Layer1">
            <summary>
            Layer 1
            </summary>
        </member>
        <member name="T:Ozeki.Media.MpegVersion">
            <summary>
            MPEG Version Flags
            </summary>
        </member>
        <member name="F:Ozeki.Media.MpegVersion.Version25">
            <summary>
            Version 2.5
            </summary>
        </member>
        <member name="F:Ozeki.Media.MpegVersion.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Ozeki.Media.MpegVersion.Version2">
            <summary>
            Version 2
            </summary>
        </member>
        <member name="F:Ozeki.Media.MpegVersion.Version1">
            <summary>
            Version 1
            </summary>
        </member>
        <member name="T:Ozeki.Media.RiffChunk">
            <summary>
            Holds information about a RIFF file chunk
            </summary>
        </member>
        <member name="M:Ozeki.Media.RiffChunk.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Creates a RiffChunk object
            </summary>
        </member>
        <member name="P:Ozeki.Media.RiffChunk.Identifier">
            <summary>
            The chunk identifier
            </summary>
        </member>
        <member name="P:Ozeki.Media.RiffChunk.IdentifierAsString">
            <summary>
            The chunk identifier converted to a string
            </summary>
        </member>
        <member name="P:Ozeki.Media.RiffChunk.Length">
            <summary>
            The chunk length
            </summary>
        </member>
        <member name="P:Ozeki.Media.RiffChunk.StreamPosition">
            <summary>
            The stream position this chunk is located at
            </summary>
        </member>
        <member name="T:Ozeki.Media.NAudioWaveFileReader">
            <summary>A read-only stream of WAVE data based on a wave file
            with an associated AudioWaveFormat
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileReader.#ctor(System.String)">
            <summary>Supports opening a WAV file</summary>
            <remarks>The WAV file format is a real mess, but we will only
            support the basic WAV file format which actually covers the vast
            majority of WAV files out there. For more WAV file format information
            visit www.wotsit.org. If you have a WAV file that can't be read by
            this class, email it to the nAudio project and we will probably
            fix this reader to support it
            </remarks>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a Wave File Reader based on an input stream
            </summary>
            <param name="inputStream">The input stream containing a WAV file including header</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileReader.ReadWaveHeader(System.IO.Stream,Ozeki.Media.AudioWaveFormat@,System.Int64@,System.Int32@,System.Collections.Generic.List{Ozeki.Media.RiffChunk})">
            <summary>
            Reads the header part of a WAV file from a stream
            </summary>
            <param name="stream">The stream, positioned at the start of audio data</param>
            <param name="format">The format found</param>
            <param name="dataChunkPosition">The position of the data chunk</param>
            <param name="dataChunkLength">The length of the data chunk</param>
            <param name="chunks">Additional chunks found</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileReader.GetChunkData(Ozeki.Media.RiffChunk)">
            <summary>
            Gets the data for the specified chunk
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileReader.Dispose(System.Boolean)">
            <summary>
            Cleans up the resources associated with this WaveFileReader
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the Wave File
            <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileReader.TryReadFloat(System.Single@)">
            <summary>
            Attempts to read a sample into a float
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileReader.Read(System.Single[][],System.Int32)">
            <summary>
            Reads floats into arrays of channels
            </summary>
            <param name="buffer">buffer</param>
            <param name="samples">number of samples to read</param>
            <returns></returns>
        </member>
        <member name="P:Ozeki.Media.NAudioWaveFileReader.ExtraChunks">
            <summary>
            Gets a list of the additional chunks found in this file
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioWaveFileReader.AudioWaveFormat">
            <summary>
            <see cref="P:Ozeki.Media.WaveStream.AudioWaveFormat"/>
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioWaveFileReader.Length">
            <summary>
            <see cref="P:Ozeki.Media.WaveStream.AudioWaveFormat"/>
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioWaveFileReader.SampleCount">
            <summary>
            Number of Samples (if possible to calculate)
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioWaveFileReader.Position">
            <summary>
            Position in the wave file
            <see cref="P:System.IO.Stream.Position"/>
            </summary>
        </member>
        <member name="T:Ozeki.Media.NAudioWaveFileWriter">
            <summary>
            This class writes WAV data to a .wav file on disk
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.CreateWaveFile(System.String,Ozeki.Media.WaveStream)">
            <summary>
            Creates a Wave file by reading all the data from a WaveStream
            </summary>
            <param name="filename">The filename to use</param>
            <param name="stream">The source WaveStream</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.#ctor(System.IO.Stream,Ozeki.Media.AudioWaveFormat)">
            <summary>
            WaveFileWriter that actually writes to a stream
            </summary>
            <param name="outStream">Stream to be written to</param>
            <param name="format">Wave format to use</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.#ctor(System.String)">
            <summary>
            Creates a new WaveFileWriter, simply overwriting the samples on an existing file
            </summary>
            <param name="filename">The filename</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.#ctor(System.String,Ozeki.Media.AudioWaveFormat)">
            <summary>
            Creates a new WaveFileWriter
            </summary>
            <param name="filename">The filename to write to</param>
            <param name="format">The Wave Format of the output data</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.WriteData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the WaveFile (assumes they are already in the correct format)
            </summary>
            <param name="data">the buffer containing the wave data</param>
            <param name="offset">the offset from which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.WriteSample(System.Single)">
            <summary>
            Writes a single sample to the Wave file
            </summary>
            <param name="sample">the sample to write (assumed floating point with 1.0f as max value)</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.WriteData(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes 16 bit samples to the Wave file
            </summary>
            <param name="data">The buffer containing the wave data</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of 16 bit samples to write</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.WriteData(System.Single[][],System.Int32,System.Int32)">
            <summary>
            Writes float samples to the Wave file
            </summary>
            <param name="data">The buffer containing the wave data</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of float samples to write</param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.Flush">
            <summary>
            Ensures data is written to disk
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.Close">
            <summary>
            Closes this WaveFile (calls <see>Dispose</see>)
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.Dispose">
            <summary>
            Closes this WaveFile
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.Dispose(System.Boolean)">
            <summary>
            Actually performs the close,making sure the header contains the correct data
            </summary>
            <param name="disposing">True if called from <see>Dispose</see></param>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.UpdateHeader(System.IO.BinaryWriter)">
            <summary>
            Updates the header with file size information
            </summary>
        </member>
        <member name="M:Ozeki.Media.NAudioWaveFileWriter.Finalize">
            <summary>
            Finaliser - should only be called if the user forgot to close this WaveFileWriter
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioWaveFileWriter.Filename">
            <summary>
            The wave file name
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioWaveFileWriter.Length">
            <summary>
            Number of bytes of audio
            </summary>
        </member>
        <member name="P:Ozeki.Media.NAudioWaveFileWriter.AudioWaveFormat">
            <summary>
            AudioWaveFormat of this wave file
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFormatConversionStream">
            <summary>
            WaveStream that passes through an ACM Codec
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatConversionStream.#ctor(Ozeki.Media.AudioWaveFormat,Ozeki.Media.WaveStream)">
            <summary>
            Create a new AudioWaveFormat conversion stream
            </summary>
            <param name="targetFormat">Desired output format</param>
            <param name="sourceStream">Source stream</param>
        </member>
        <member name="M:Ozeki.Media.WaveFormatConversionStream.SourceToDest(System.Int32)">
            <summary>
            Converts source bytes to destination bytes
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatConversionStream.DestToSource(System.Int32)">
            <summary>
            Converts destination bytes to source bytes
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatConversionStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from this stream
            </summary>
            <param name="array">Buffer to read into</param>
            <param name="offset">Offset in array to read into</param>
            <param name="count">Number of bytes to read</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Ozeki.Media.WaveFormatConversionStream.Dispose(System.Boolean)">
            <summary>
            Disposes this stream
            </summary>
            <param name="disposing">true if the user called this</param>
        </member>
        <member name="P:Ozeki.Media.WaveFormatConversionStream.Length">
            <summary>
            Returns the stream length
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFormatConversionStream.Position">
            <summary>
            Gets or sets the current position in the stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFormatConversionStream.AudioWaveFormat">
            <summary>
            Gets the AudioWaveFormat of this stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFormatConversionStream.BlockAlign">
            <summary>
            Gets the block alignment for this stream
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFormatCustomMarshaler">
            <summary>
            Custom marshaller for AudioWaveFormat structures
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatCustomMarshaler.GetInstance(System.String)">
            <summary>
            Gets the instance of this marshaller
            </summary>
            <param name="cookie"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.WaveFormatCustomMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            Clean up managed data
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatCustomMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            Clean up native data
            </summary>
            <param name="pNativeData"></param>
        </member>
        <member name="M:Ozeki.Media.WaveFormatCustomMarshaler.GetNativeDataSize">
            <summary>
            Get native data size
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatCustomMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            Marshal managed to native
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatCustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Marshal Native to Managed
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFormatEncoding">
            <summary>
            Summary description for WaveFormatEncoding.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Unknown">
            <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Pcm">
            <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Adpcm">
            <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.IeeeFloat">
            <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Vselp">
            <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.IbmCvsd">
            <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.ALaw">
            <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.MuLaw">
            <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Dts">
            <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Drm">
            <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.OkiAdpcm">
            <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.DviAdpcm">
            <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.ImaAdpcm">
            <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.MediaspaceAdpcm">
            <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.SierraAdpcm">
            <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.G723Adpcm">
            <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.DigiStd">
            <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.DigiFix">
            <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.DialogicOkiAdpcm">
            <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.MediaVisionAdpcm">
            <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.CUCodec">
            <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.YamahaAdpcm">
            <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.SonarC">
            <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.DspGroupTruespeech">
            <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.EchoSpeechCorporation1">
            <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.AudioFileAf36">
            <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Aptx">
            <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.AudioFileAf10">
            <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Prosody1612">
            <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Lrc">
            <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.DolbyAc2">
            <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Gsm610">
            <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.MsnAudio">
            <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.AntexAdpcme">
            <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.ControlResVqlpc">
            <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.DigiReal">
            <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.DigiAdpcm">
            <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.ControlResCr10">
            <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_NMS_VBXADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_CS_IMAADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_ECHOSC3">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_DIGITALK">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_XEBEC">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_G721_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_G728_CELP">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_MSG723">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Mpeg">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_RT24">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_PAC">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.MpegLayer3">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_LUCENT_G723">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_CIRRUS">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_ESPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_CANOPUS_ATRAC">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_G726_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_G722_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_DSAT_DISPLAY">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_BYTE_ALIGNED">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC8">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC10">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC16">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC20">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT24">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29HW">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR12">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR18">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ40">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SOFTSOUND">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ60">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_MSRT24">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_G729A">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_MVI_MVI2">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_DF_G726">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_DF_GSM610">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_ISIAUDIO">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_ONLIVE">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SBC24">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_DOLBY_AC3_SPDIF">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_MEDIASONIC_G723">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_PROSODY_8KBPS">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_ZYXEL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_PHILIPS_LPCBB">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_PACKED">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_MALDEN_PHONYTALK">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Gsm">
            <summary>WAVE_FORMAT_GSM</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.G729">
            <summary>WAVE_FORMAT_G729</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.G723">
            <summary>WAVE_FORMAT_G723</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Acelp">
            <summary>WAVE_FORMAT_ACELP</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_RHETOREX_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_IRAT">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VIVO_G723">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VIVO_SIREN">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_DIGITAL_G723">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SANYO_LD_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACEPLNET">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP4800">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP8V3">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729A">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_KELVIN">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_G726ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_PUREVOICE">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_HALFRATE">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_TUBGSM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_MSAUDIO1">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_WMAUDIO2">
            <summary>
            WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_WMAUDIO3">
            <summary>
            WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ULAW">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ALAW">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_16K">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH8">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH10">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_UHER_ADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_QUARTERDECK">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_ILINK_VC">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_RAW_SPORT">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_ESST_AC3">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_IPI_HSX">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_IPI_RPELP">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_CS2">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SONY_SCX">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_FM_TOWNS_SND">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_BTV_DIGITAL">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_QDESIGN_MUSIC">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_VME_VMPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_TPC">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_OLIGSM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_OLIADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_OLICELP">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_OLISBC">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_OLIOPR">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_LH_CODEC">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_NORRIS">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_DVM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Extensible">
            <summary>WAVE_FORMAT_EXTENSIBLE</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.WAVE_FORMAT_DEVELOPMENT">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Vorbis1">
            <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Vorbis2">
            <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Vorbis3">
            <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Vorbis1P">
            <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Vorbis2P">
            <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatEncoding.Vorbis3P">
            <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
        </member>
        <member name="T:Ozeki.Media.XingHeader">
            <summary>
            Represents a Xing VBR header
            </summary>
        </member>
        <member name="M:Ozeki.Media.XingHeader.LoadXingHeader(Ozeki.Media.Mp3Frame)">
            <summary>
            Load Xing Header
            </summary>
            <param name="frame">Frame</param>
            <returns>Xing Header</returns>
        </member>
        <member name="M:Ozeki.Media.XingHeader.#ctor">
            <summary>
            Sees if a frame contains a Xing header
            </summary>
        </member>
        <member name="P:Ozeki.Media.XingHeader.Frames">
            <summary>
            Number of frames
            </summary>
        </member>
        <member name="P:Ozeki.Media.XingHeader.Bytes">
            <summary>
            Number of bytes
            </summary>
        </member>
        <member name="P:Ozeki.Media.XingHeader.VbrScale">
            <summary>
            VBR Scale property
            </summary>
        </member>
        <member name="P:Ozeki.Media.XingHeader.Mp3Frame">
            <summary>
            The MP3 frame
            </summary>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „F:Ozeki.Media.PortAudioDeviceInfo.maxInputChannels” -->
        <member name="F:Ozeki.Media.PortAudioDeviceInfo.defaultLowInputLatency">
            Default latency values for interactive performance. 
        </member>
        <member name="F:Ozeki.Media.PortAudioDeviceInfo.defaultHighInputLatency">
            Default latency values for robust non-interactive applications (eg. playing sound files). 
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.Media.PortAudioIn.ChangeFormat(Ozeki.Media.WaveFormat)” -->
        <member name="P:Ozeki.Media.PortAudioIn.DeviceInfo">
            <summary>
            Gets some information about the device such as device ID or product name.
            </summary>
        </member>
        <member name="P:Ozeki.Media.PortAudioIn.Initialized">
            <summary>
            Gets a boolean value indicating whether the device is initialized and ready to use.
            </summary>
        </member>
        <member name="P:Ozeki.Media.PortAudioIn.Volume">
            <summary>
            Gets or sets the volume for this device. (Range: 0-1)
            </summary>
        </member>
        <member name="P:Ozeki.Media.PortAudioIn.Level">
            <summary>
            Gets the level of the input/output. (Range: 0-100)
            </summary>
        </member>
        <member name="P:Ozeki.Media.PortAudioIn.Muted">
            <summary>
            Gets or sets a boolean value indicating whether the audio device is muted.
            </summary>
        </member>
        <member name="E:Ozeki.Media.PortAudioIn.Stopped">
            <summary>
            Occurs when the audio has stopped.
            </summary>
        </member>
        <member name="M:Ozeki.Media.PortAudioOut.ChangeFormat(Ozeki.Media.WaveFormat)">
            <summary>
            Changes the wave format of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.PortAudioOut.DeviceInfo">
            <summary>
            Gets some information about the device such as device ID or product name.
            </summary>
        </member>
        <member name="P:Ozeki.Media.PortAudioOut.Initialized">
            <summary>
            Gets a boolean value indicating whether the device is initialized and ready to use.
            </summary>
        </member>
        <member name="P:Ozeki.Media.PortAudioOut.Volume">
            <summary>
            Gets or sets the volume for this device. (Range: 0-1)
            </summary>
        </member>
        <member name="P:Ozeki.Media.PortAudioOut.Level">
            <summary>
            Gets the level of the input/output. (Range: 0-100)
            </summary>
        </member>
        <member name="P:Ozeki.Media.PortAudioOut.Muted">
            <summary>
            Gets or sets a boolean value indicating whether the audio device is muted.
            </summary>
        </member>
        <member name="E:Ozeki.Media.PortAudioOut.Stopped">
            <summary>
            Occurs when the audio has stopped.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AVReader">
            <summary>
            Audio/Video reader
            </summary>
        </member>
        <member name="M:Ozeki.Media.AVReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Ozeki.Media.Mp3FileReader">
            <summary>
            Class for reading from MP3 files
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFileStream">
            <summary>
            Represents the base class from which the audio file reader and writer classes derive.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFileStream.Stream">
            <summary>
            The underlying stream.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFileStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveFileStream"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFileStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">he zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Ozeki.Media.WaveFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">The reference point used to obtain the new position.</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.WaveFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Ozeki.Media.WaveFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="P:Ozeki.Media.WaveFileStream.Format">
            <summary>
            Gets the AudioWaveFormat of the wave stream.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFileStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFileStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFileStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFileStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Mp3FileReader.#ctor(System.String)">
            <summary>Supports opening a MP3 file</summary>
        </member>
        <member name="M:Ozeki.Media.Mp3FileReader.#ctor(System.IO.Stream)">
            <summary>
            Opens MP3 from a stream rather than a file
            Will not dispose of this stream itself
            </summary>
            <param name="inputStream"></param>
        </member>
        <member name="M:Ozeki.Media.Mp3FileReader.TotalSeconds">
            <summary>
            Gets the total length of this file in milliseconds.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Mp3FileReader.ReadNextFrame">
            <summary>
            Reads the next mp3 frame
            </summary>
            <returns>Next mp3 frame, or null if EOF</returns>
        </member>
        <member name="M:Ozeki.Media.Mp3FileReader.ReadNextFrame(System.Boolean)">
            <summary>
            Reads the next mp3 frame
            </summary>
            <returns>Next mp3 frame, or null if EOF</returns>
        </member>
        <member name="M:Ozeki.Media.Mp3FileReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed PCM data from our MP3 file.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Mp3FileReader.Dispose(System.Boolean)">
            <summary>
            Disposes this WaveStream
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3FileReader.Mp3AudioWaveFormat">
            <summary>
            The MP3 wave format (n.b. NOT the output format of this stream - see the AudioWaveFormat property)
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3FileReader.Id3v2Tag">
            <summary>
            ID3v2 tag if present
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3FileReader.Id3v1Tag">
            <summary>
            ID3v1 tag if present
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3FileReader.Length">
            <summary>
            This is the length in bytes of data available to be read out from the Read method
            (i.e. the decompressed MP3 length)
            n.b. this may return 0 for files whose length is unknown
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3FileReader.Position">
            <summary>
            <see cref="P:System.IO.Stream.Position"/>
            </summary>
        </member>
        <member name="P:Ozeki.Media.Mp3FileReader.XingHeader">
            <summary>
            Xing header if present
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFileReader">
            <summary>
            Can read audio data from a .wav file.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveFileReader"/> class. 
            </summary>
            <param name="path">The path of the audio file</param>
        </member>
        <member name="M:Ozeki.Media.WaveFileReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveFileReader"/> class.
            </summary>
            <param name="inputStream">The .wav stream.</param>
        </member>
        <member name="M:Ozeki.Media.WaveFileReader.ReadWaveHeader(System.IO.Stream,Ozeki.Media.WaveFormat@,System.Int64@,System.Int32@)">
            <summary>
            Reads the header part of a WAV file from a stream
            </summary>
            <param name="stream">The stream, positioned at the start of audio data</param>
            <param name="format">The format found</param>
            <param name="dataChunkPosition">The position of the data chunk</param>
            <param name="dataChunkLength">The length of the data chunk</param>
        </member>
        <member name="M:Ozeki.Media.WaveFileReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="array">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.WaveFileReader.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFileReader.Length">
            <summary>
            Gets the length of the audio data (and not the length of the Stream).
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFileReader.SampleCount">
            <summary>
            Gets the number of samples
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFileReader.Position">
            <summary>
            Gets or sets the position of the audio data within the stream.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFileWriter">
            <summary>
            Writes audio data to a .wav file.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFileWriter.#ctor(Ozeki.Media.WaveFormat,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveFileWriter"/> class. 
            </summary>
            <param name="format">The format of the audio.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:Ozeki.Media.WaveFileWriter.#ctor(Ozeki.Media.WaveFormat,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveFileWriter"/> class. 
            </summary>
            <param name="format">The format of the audio.</param>
            <param name="path">The path of the wave file.</param>
        </member>
        <member name="M:Ozeki.Media.WaveFileWriter.SetWaveHeader">
            <summary>
            Writes the wave header to the stream.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFileWriter.Close">
            <summary>
            Closes and saves the audio file. 
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFormatEx">
            <summary>
            Provides extension methods for the <see cref="T:Ozeki.Media.AudioFormat"/> and <see cref="T:Ozeki.Media.WaveFormat"/> classes.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatEx.AsWaveFormat(Ozeki.Media.AudioFormat)">
            <summary>
            Converts a <see cref="T:Ozeki.Media.AudioFormat"/> to a <see cref="T:Ozeki.Media.WaveFormat"/>.
            </summary>
            <param name="mediaFormat">The media format to convert.</param>
            <returns>The AudioWaveFormat.</returns>
        </member>
        <member name="M:Ozeki.Media.WaveFormatEx.AsVoIPMediaFormat(Ozeki.Media.WaveFormat,System.Int32)">
            <summary>
            Converts a <see cref="T:Ozeki.Media.WaveFormat"/> to a <see cref="T:Ozeki.Media.AudioFormat"/>.
            </summary>
            <param name="waveFormat">The AudioWaveFormat to convert.</param>
            <param name="packetizationTime">Packetization time of the media format.</param>
            <returns>The media format.</returns>
        </member>
        <member name="T:Ozeki.Media.EventCallbackStrategy">
            <summary>
            Event alapu callback.
            </summary>
            <remarks>
            ResetEvent.WaitOne() addig, amig nem jon uzenet, amikor is ResetEvent.Set()-re feldolgozza az adatot.
            Ezzel kicsit rosszabb minosegu volt a hang, fokent ha nagyon kattingatnak a GUI-n.
            </remarks>
        </member>
        <member name="T:Ozeki.Media.FunctionCallbackStrategy">
            <summary>
            Function alapu callback.
            </summary>
            <remarks>
            Ha egy aktiv eszkoz lehal, vagy USB eseten kihuzzak, akkor nativ oldali deadlock-ot eredmenyez.
            </remarks>
        </member>
        <member name="T:Ozeki.Media.NewWindowCallbackStrategy">
            <summary>
            Virtualis WinForms ablakos callback.
            </summary>
            <remarks>
            A Form-on jon fel az audio message (WndProc), ami majd tovabbitja az eszkoznek (pl. WaveOutPlayer).
            Ha nincs GUI / nem GUI szalon inditjuk el az eszkozt, akkor nem fog hallatszani semmi,  mivel a Form-on nem indul el a message loop.
            </remarks>
        </member>
        <member name="T:Ozeki.Media.NewWindowCallbackStrategyThreaded">
            <summary>
            Window based callback, kulon szalat indit a window message loop-nak
            </summary>
        </member>
        <member name="T:Ozeki.Media.SupportedWaveFormat">
            <summary>
            Defines constants for the supported wave formats for WaveIn and WaveOut capabilities
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_1M08">
            <summary>
            11.025 kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_1S08">
            <summary>
            11.025 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_1M16">
            <summary>
            11.025 kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_1S16">
            <summary>
            11.025 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_2M08">
            <summary>
            22.05  kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_2S08">
            <summary>
            22.05  kHz, Stereo, 8-bit 
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_2M16">
            <summary>
            22.05  kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_2S16">
            <summary>
            22.05  kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_4M08">
            <summary>
            44.1   kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_4S08">
            <summary>
            44.1   kHz, Stereo, 8-bit 
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_4M16">
            <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_4S16">
            <summary>
             44.1   kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_44M08">
            <summary>
            44.1   kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_44S08">
            <summary>
            44.1   kHz, Stereo, 8-bit 
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_44M16">
            <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_44S16">
            <summary>
            44.1   kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_48M08">
            <summary>
            48     kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_48S08">
            <summary>
             48     kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_48M16">
            <summary>
            48     kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_48S16">
            <summary>
            48     kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_96M08">
            <summary>
            96     kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_96S08">
            <summary>
            96     kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_96M16">
            <summary>
            96     kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.SupportedWaveFormat.WAVE_FORMAT_96S16">
            <summary>
            96     kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveHeaderFlags.BeginLoop">
            <summary>
            This buffer is the first buffer in a loop. This flag is used only with output buffers. (WHDR_BEGINLOOP)
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveHeaderFlags.Done">
            <summary>
            Set by the device driver to indicate that it is finished with the buffer and is returning it to the application. (WHDR_DONE)
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveHeaderFlags.EndLoop">
            <summary>
            This buffer is the last buffer in a loop.  This flag is used only with output buffers. (WHDR_ENDLOOP)
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveHeaderFlags.InQueue">
            <summary>
            Set by Windows to indicate that the buffer is queued for playback. (WHDR_INQUEUE)
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveHeaderFlags.Prepared">
            <summary>
            Set by Windows to indicate that the buffer has been prepared with the waveInPrepareHeader or waveOutPrepareHeader function. (WHDR_PREPARED)
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFormats">
            <summary>
            Defines constants for the available wave formats.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Unknown">
            <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Pcm">
            <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Adpcm">
            <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.IeeeFloat">
            <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Vselp">
            <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.IbmCvsd">
            <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.ALaw">
            <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.MuLaw">
            <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Dts">
            <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Drm">
            <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.OkiAdpcm">
            <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.DviAdpcm">
            <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.ImaAdpcm">
            <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.MediaspaceAdpcm">
            <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.SierraAdpcm">
            <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.G723Adpcm">
            <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.DigiStd">
            <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.DigiFix">
            <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.DialogicOkiAdpcm">
            <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.MediaVisionAdpcm">
            <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.CUCodec">
            <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.YamahaAdpcm">
            <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.SonarC">
            <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.DspGroupTruespeech">
            <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.EchoSpeechCorporation1">
            <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.AudioFileAf36">
            <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Aptx">
            <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.AudioFileAf10">
            <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Prosody1612">
            <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Lrc">
            <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.DolbyAc2">
            <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Gsm610">
            <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.MsnAudio">
            <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.AntexAdpcme">
            <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.ControlResVqlpc">
            <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.DigiReal">
            <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.DigiAdpcm">
            <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.ControlResCr10">
            <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatNmsVbxadpcm">
            <summary>Natural MicroSystems </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatCsImaadpcm">
            <summary>Crystal Semiconductor IMA ADPCM</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatEchosc3">
            <summary>Echo Speech Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatRockwellAdpcm">
            <summary>Rockwell International </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatRockwellDigitalk">
            <summary>Rockwell International </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatXebec">
            <summary>Xebec Multimedia Solutions Limited</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatG721Adpcm">
            <summary>Antex Electronics Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatG728Celp">
            <summary>Antex Electronics Corporation </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatMsg723">
            <summary>Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Mpeg">
            <summary>WAVE_FORMAT_MPEG, Microsoft Corporation </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatRt24">
            <summary>InSoft, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatPac">
            <summary>InSoft, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.MpegLayer3">
            <summary>WAVE_FORMAT_MPEGLAYER3, ISO/MPEG Layer3 Format Tag</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatLucentG723">
            <summary>Lucent Technologies </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatCirrus">
            <summary>Cirrus Logic </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatEspcm">
            <summary>ESS Technology</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxware">
            <summary>Voxware Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatCanopusAtrac">
            <summary>Canopus, co., Ltd.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatG726Adpcm">
            <summary>APICOM</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatG722Adpcm">
            <summary>APICOM </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatDsatDisplay">
            <summary>Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareByteAligned">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareAc8">
            <summary>Voxware Inc </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareAc10">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareAc16">
            <summary>Voxware Inc </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareAc20">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareRt24">
            <summary>Voxware Inc </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareRt29">
            <summary>Voxware Inc </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareRt29Hw">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareVr12">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareVr18">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareTq40">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSoftsound">
            <summary>Softsound, Ltd. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVoxwareTq60">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatMsrt24">
            <summary>Microsoft Corporation </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatG729A">
            <summary>AT&amp;T Labs, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatMviMvi2">
            <summary>Motion Pixels</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatDfG726">
            <summary>DataFusion Systems (Pty) (Ltd) </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatDfGsm610">
            <summary>DataFusion Systems (Pty) (Ltd) </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatIsiaudio">
            <summary>Iterated Systems, Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatOnlive">
            <summary>OnLive! Technologies, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSbc24">
            <summary>Siemens Business Communications Sys</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatDolbyAc3Spdif">
            <summary>Sonic Foundry </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatMediasonicG723">
            <summary>MediaSonic</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatProsody8Kbps">
            <summary>Aculab plc </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatZyxelAdpcm">
            <summary>ZyXEL Communications, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatPhilipsLpcbb">
            <summary> Philips Speech Processing</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatPacked">
            <summary>Studer Professional Audio AG </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatMaldenPhonytalk">
            <summary>Malden Electronics Ltd.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Gsm">
            <summary>WAVE_FORMAT_GSM</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.G729">
            <summary>WAVE_FORMAT_G729</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.G723">
            <summary>WAVE_FORMAT_G723</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Acelp">
            <summary>WAVE_FORMAT_ACELP</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatRhetorexAdpcm">
            <summary>Rhetorex Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatIrat">
            <summary>BeCubed Software Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVivoG723">
            <summary>Vivo Software </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVivoSiren">
            <summary>Vivo Software </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatDigitalG723">
            <summary>Digital Equipment Corporation </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSanyoLdAdpcm">
            <summary>Sanyo Electric Co., Ltd.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSiprolabAceplnet">
            <summary>Sipro Lab Telecom Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSiprolabAcelp4800">
            <summary>Sipro Lab Telecom Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSiprolabAcelp8V3">
            <summary>Sipro Lab Telecom Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSiprolabG729">
            <summary>Sipro Lab Telecom Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSiprolabG729A">
            <summary>Sipro Lab Telecom Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSiprolabKelvin">
            <summary>Sipro Lab Telecom Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatG726ADPCM">
            <summary>Dictaphone Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatQualcommPurevoice">
            <summary>Qualcomm, Inc. </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatQualcommHalfrate">
            <summary>Qualcomm, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatTubgsm">
            <summary>Ring Zero Systems, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatMsaudio1">
            <summary>Microsoft Corporation 	</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatWmaudio2">
            <summary>
            WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatWmaudio3">
            <summary>
            WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatUnisysNapADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatUnisysNapUlaw">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatUnisysNapAlaw">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatUnisysNap16K">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatCreativeADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatCreativeFastspeech8">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatCreativeFastspeech10">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatUherADPCM">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatQuarterdeck">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatIlinkVc">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatRawSport">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatEsstAc3">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatIpiHsx">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatIpiRpelp">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatCs2">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSonyScx">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatFmTownsSnd">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatBtvDigital">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatQdesignMusic">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatVmeVmpcm">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatTpc">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatOligsm">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatOliadpcm">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatOlicelp">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatOlisbc">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatOliopr">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatLhCodec">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatNorris">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatSoundspaceMusicompress">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatDvm">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Extensible">
            <summary>WAVE_FORMAT_EXTENSIBLE</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.WaveFormatDevelopment">
            <summary></summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Vorbis1">
            <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Vorbis2">
            <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Vorbis3">
            <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Vorbis1P">
            <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Vorbis2P">
            <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormats.Vorbis3P">
            <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
        </member>
        <member name="F:Ozeki.Media.WaveMessage.WaveInOpen">
            <summary>
            WIM_OPEN
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveMessage.WaveInClose">
            <summary>
            WIM_CLOSE
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveMessage.WaveInData">
            <summary>
            WIM_DATA
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveMessage.WaveOutClose">
            <summary>
            WOM_CLOSE
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveMessage.WaveOutDone">
            <summary>
            WOM_DONE
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveMessage.WaveOutOpen">
            <summary>
            WOM_OPEN
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveCallbackStrategy.FunctionCallback">
            <summary>
            Use a function
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveCallbackStrategy.NewWindow">
            <summary>
            Create a new window (should only be done if on GUI thread)
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveCallbackStrategy.ExistingWindow">
            <summary>
            Use an existing window handle
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveCallbackStrategy.Event">
            <summary>
            Use an event handle
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveInOutOpenFlags.CALLBACK_NULL">
            <summary>
            No callback mechanism. This is the default setting.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveInOutOpenFlags.CALLBACK_FUNCTION">
            <summary>
            The dwCallback parameter is a callback procedure address.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveInOutOpenFlags.CALLBACK_EVENT">
            <summary>
            The dwCallback parameter is an event handle.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveInOutOpenFlags.CALLBACK_WINDOW">
            <summary>
            The dwCallback parameter is a window handle.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveInOutOpenFlags.CALLBACK_THREAD">
            <summary>
            The dwCallback parameter is a thread identifier.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveInOutOpenFlags.WAVE_FORMAT_DIRECT">
            <summary>
            If this flag is specified, the ACM driver does not perform conversions on the audio data.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveInOutOpenFlags.WAVE_FORMAT_QUERY">
            <summary>
            If this flag is specified, waveOutOpen queries the device to determine if it supports the given format, but the device is not actually opened.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveInOutOpenFlags.WAVE_MAPPED">
            <summary>
            f this flag is specified, the uDeviceID parameter specifies a waveform-audio device to be mapped to by the wave mapper.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveOutSupport.Pitch">
            <summary>
            Supports pitch control. (WAVECAPS_PITCH)
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveOutSupport.PlaybackRate">
            <summary>
            Supports playback rate control. (WAVECAPS_PLAYBACKRATE)
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveOutSupport.Volume">
            <summary>supports volume control (WAVECAPS_VOLUME)</summary>
        </member>
        <member name="F:Ozeki.Media.WaveOutSupport.LRVolume">
            <summary>
            Supports separate left and right volume control. (WAVECAPS_LRVOLUME)
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveOutSupport.Sync">
            <summary>
            The driver is synchronous and will block while playing a buffer. (WAVECAPS_SYNC)
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveOutSupport.SampleAccurate">
            <summary>
            Returns sample-accurate position information. (WAVECAPS_SAMPLEACCURATE)
            </summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Microsoft">
            <summary>Microsoft Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Creative">
            <summary>Creative Labs, Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Mediavision">
            <summary>Media Vision, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Fujitsu">
            <summary>Fujitsu Corp.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Artisoft">
            <summary>Artisoft, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.TurtleBeach">
            <summary>Turtle Beach, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ibm">
            <summary>IBM Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Vocaltec">
            <summary>Vocaltec LTD.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Roland">
            <summary>Roland</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.DspSolutions">
            <summary>DSP Solutions, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Nec">
            <summary>NEC</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ati">
            <summary>ATI</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Wanglabs">
            <summary>Wang Laboratories, Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Tandy">
            <summary>Tandy Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Voyetra">
            <summary>Voyetra</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Antex">
            <summary>Antex Electronics Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.IclPS">
            <summary>ICL Personal Systems</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Intel">
            <summary>Intel Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Gravis">
            <summary>Advanced Gravis</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Val">
            <summary>Video Associates Labs, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Interactive">
            <summary>InterActive Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Yamaha">
            <summary>Yamaha Corporation of America</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Everex">
            <summary>Everex Systems, Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Echo">
            <summary>Echo Speech Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Sierra">
            <summary>Sierra Semiconductor Corp</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Cat">
            <summary>Computer Aided Technologies</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Apps">
            <summary>APPS Software International</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.DspGroup">
            <summary>DSP Group, Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Melabs">
            <summary>microEngineering Labs</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.ComputerFriends">
            <summary>Computer Friends, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ess">
            <summary>ESS Technology</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Audiofile">
            <summary>Audio, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Motorola">
            <summary>Motorola, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Canopus">
            <summary>Canopus, co., Ltd.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Epson">
            <summary>Seiko Epson Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Truevision">
            <summary>Truevision</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Aztech">
            <summary>Aztech Labs, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Videologic">
            <summary>Videologic</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Scalacs">
            <summary>SCALACS</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Korg">
            <summary>Korg Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Apt">
            <summary>Audio Processing Technology</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ics">
            <summary>Integrated Circuit Systems, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Iteratedsys">
            <summary>Iterated Systems, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Metheus">
            <summary>Metheus</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Logitech">
            <summary>Logitech, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Winnov">
            <summary>Winnov, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ncr">
            <summary>NCR Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Exan">
            <summary>EXAN</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ast">
            <summary>AST Research Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Willowpond">
            <summary>Willow Pond Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Sonicfoundry">
            <summary>Sonic Foundry</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Vitec">
            <summary>Vitec Multimedia</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Moscom">
            <summary>MOSCOM Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Siliconsoft">
            <summary>Silicon Soft, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Supermac">
            <summary>Supermac</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Audiopt">
            <summary>Audio Processing Technology</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Speechcomp">
            <summary>Speech Compression</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ahead">
            <summary>Ahead, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Dolby">
            <summary>Dolby Laboratories</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Oki">
            <summary>OKI</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Auravision">
            <summary>AuraVision Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Olivetti">
            <summary>Ing C. Olivetti &amp; C., S.p.A.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Iomagic">
            <summary>I/O Magic Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Matsushita">
            <summary>Matsushita Electric Industrial Co., LTD.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Controlres">
            <summary>Control Resources Limited</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Xebec">
            <summary>Xebec Multimedia Solutions Limited</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Newmedia">
            <summary>New Media Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Nms">
            <summary>Natural MicroSystems</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Lyrrus">
            <summary>Lyrrus Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Compusic">
            <summary>Compusic</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Opti">
            <summary>OPTi Computers Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Adlacc">
            <summary>Adlib Accessories Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Compaq">
            <summary>Compaq Computer Corp.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Dialogic">
            <summary>Dialogic Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Insoft">
            <summary>InSoft, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Mptus">
            <summary>M.P. Technologies, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Weitek">
            <summary>Weitek</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.LernoutAndHauspie">
            <summary>Lernout &amp; Hauspie</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Qciar">
            <summary>Quanta Computer Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Apple">
            <summary>Apple Computer, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Digital">
            <summary>Digital Equipment Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Motu">
            <summary>Mark of the Unicorn</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Workbit">
            <summary>Workbit Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ositech">
            <summary>Ositech Communications Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Miro">
            <summary>miro Computer Products AG</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Cirruslogic">
            <summary>Cirrus Logic</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Isolution">
            <summary>ISOLUTION  B.V.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Horizons">
            <summary>Horizons Technology, Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Concepts">
            <summary>Computer Concepts Ltd</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Vtg">
            <summary>Voice Technologies Group, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Radius">
            <summary>Radius</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Rockwell">
            <summary>Rockwell International</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Xyz">
            <summary>Co. XYZ for testing</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Opcode">
            <summary>Opcode Systems</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Voxware">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.NorthernTelecom">
            <summary>Northern Telecom Limited</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Apicom">
            <summary>APICOM</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Grande">
            <summary>Grande Software</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Addx">
            <summary>ADDX</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Wildcat">
            <summary>Wildcat Canyon Software</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Rhetorex">
            <summary>Rhetorex Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Brooktree">
            <summary>Brooktree Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ensoniq">
            <summary>ENSONIQ Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Fast">
            <summary>FAST Multimedia AG</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Nvidia">
            <summary>NVidia Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Oksori">
            <summary>OKSORI Co., Ltd.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Diacoustics">
            <summary>DiAcoustics, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Gulbransen">
            <summary>Gulbransen, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.KayElemetrics">
            <summary>Kay Elemetrics, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Crystal">
            <summary>Crystal Semiconductor Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.SplashStudios">
            <summary>Splash Studios</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Quarterdeck">
            <summary>Quarterdeck Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Tdk">
            <summary>TDK Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.DigitalAudioLabs">
            <summary>Digital Audio Labs, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Seersys">
            <summary>Seer Systems, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Picturetel">
            <summary>PictureTel Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.AttMicroelectronics">
            <summary>AT&amp;T Microelectronics</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Osprey">
            <summary>Osprey Technologies, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Mediatrix">
            <summary>Mediatrix Peripherals</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Soundesigns">
            <summary>SounDesignS M.C.S. Ltd.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Aldigital">
            <summary>A.L. Digital Ltd.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.SpectrumSignalProcessing">
            <summary>Spectrum Signal Processing, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ecs">
            <summary>Electronic Courseware Systems, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Amd">
            <summary>AMD</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Coredynamics">
            <summary>Core Dynamics</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Canam">
            <summary>CANAM Computers</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Softsound">
            <summary>Softsound, Ltd.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Norris">
            <summary>Norris Communications, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Ddd">
            <summary>Danka Data Devices</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Euphonics">
            <summary>EuPhonics</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Precept">
            <summary>Precept Software, Inc.</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.CrystalNet">
            <summary>Crystal Net Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Chromatic">
            <summary>Chromatic Research, Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Voiceinfo">
            <summary>Voice Information Systems, Inc</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Viennasys">
            <summary>Vienna Systems</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Connectix">
            <summary>Connectix Corporation</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Gadgetlabs">
            <summary>Gadget Labs LLC</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Frontier">
            <summary>Frontier Design Group LLC</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Viona">
            <summary>Viona Development GmbH</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Casio">
            <summary>Casio Computer Co., LTD</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.Diamondmm">
            <summary>Diamond Multimedia</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.S3">
            <summary>S3</summary>
        </member>
        <member name="F:Ozeki.Media.Manufacturers.FraunhoferIis">
            <summary>Fraunhofer</summary>
        </member>
        <member name="T:Ozeki.Media.WaveFormat">
            <summary>
            The AudioWaveFormat structure defines the format of waveform-audio data.
            Only format information common to all waveform-audio data formats is included in this structure.
            For formats that require additional information, this structure is included as the first member in another structure, along with the additional information.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Ozeki.Media.WaveFormat.#ctor">
            <summary>
            Creates a new PCM format with the default values (8 kHz, 16 bit, mono)
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new PCM format with the specified sample rate, bits per sample and channels
            </summary>
            <param name="sampleRate">Sample rate</param>
            <param name="bitRate">Bits per sample</param>
            <param name="channels">Channels (Mono = 1, Stereo = 2)</param>
        </member>
        <member name="M:Ozeki.Media.WaveFormat.MarshalFromPtr(System.IntPtr)">
            <summary>
            Helper function to retrieve a AudioWaveFormat structure from a pointer
            </summary>
            <param name="pointer">AudioWaveFormat structure</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.WaveFormat.MarshalToPtr(Ozeki.Media.WaveFormat)">
            <summary>
            Helper function to marshal AudioWaveFormat to an IntPtr
            </summary>
            <param name="format">AudioWaveFormat</param>
            <returns>IntPtr to AudioWaveFormat structure (needs to be freed by callee)</returns>
        </member>
        <member name="M:Ozeki.Media.WaveFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.WaveFormat.ReadWaveFormat(System.IO.BinaryReader,System.Int32)">
            <summary>
            Read a wave format with a specific binary reader and chunk length
            </summary>
            <param name="br">The binary reader for the wave</param>
            <param name="formatChunkLength">The format chunk length of teh wave</param>
        </member>
        <member name="M:Ozeki.Media.WaveFormat.Equals(System.Object)">
            <summary>
            Compares with another AudioWaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:Ozeki.Media.WaveFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this AudioWaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="M:Ozeki.Media.WaveFormat.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFormat.WaveFormatTag">
            <summary>
            Gets or sets the Waveform-audio format type. (wFormatTag)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFormat.Channels">
            <summary>
            Gets or sets the number of channels in the waveform-audio data. (Mono = 1, Stereo = 2). (nChannels)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFormat.SampleRate">
            <summary>
            Gets or sets the sample rate, in samples per second (hertz). (nSamplesPerSec)
            </summary>
            <remarks>
            If WaveFormatTag is PCM, then common values are 8.0 kHz, 11.025 kHz, 22.05 kHz, and 44.1 kHz.
            For non-PCM formats, this member must be computed according to the manufacturer's specification of the format tag.
            </remarks>
        </member>
        <member name="P:Ozeki.Media.WaveFormat.AverageBytesPerSec">
            <summary>
            Gets or sets the required average data-transfer rate, in bytes per second, for the format tag. (nAvgBytesPerSec)
            </summary>
            <remarks>
            If WaveFormatTag is PCM, this should be equal to the product of SampleRate and BlockAlign.
            For non-PCM formats, this member must be computed according to the manufacturer's specification of the format tag.
            </remarks>
        </member>
        <member name="P:Ozeki.Media.WaveFormat.BlockAlign">
            <summary>
            Gets or sets Block alignment, in bytes. (nBlockAlign)
            </summary>
            <remarks>
            The block alignment is the minimum atomic unit of data for the WaveFormatTag format type. 
            f WaveFormatTag is PCM or EXTENSIBLE, this must be equal to the product of Channels and BitsPerSample divided by 8 (bits per byte).
            For non-PCM formats, this member must be computed according to the manufacturer's specification of the format tag.
            </remarks>
        </member>
        <member name="P:Ozeki.Media.WaveFormat.BitsPerSample">
            <summary>
            Gets or sets the bits per sample for the WaveFormatTag format type. (wBitsPerSample)
            If WaveFormatTag is PCM, then this should be equal to 8 or 16.
            For non-PCM formats, this member must be set according to the manufacturer's specification of the format tag.
            If WaveFormatTag is EXTENSIBLE, this value can be any integer multiple of 8 and represents the container size, not necessarily the sample size;
            for example, a 20-bit sample size is in a 24-bit container. Some compression schemes cannot define a value for BitsPerSample, so this member can be 0.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveFormat.CbSize">
            <summary>
            Gets or sets the size of extra format information appended to the end of the WAVEFORMATEX structure in bytes. (cbSize)
            This information can be used by non-PCM formats to store extra attributes for the WaveFormatTag.
            If no extra information is required by the WaveFormatTag, this member must be set to 0.
            For PCM formats, this member is ignored. When this structure is included in a WAVEFORMATEXTENSIBLE structure, this value must be at least 22.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveFormatExtensible">
            <summary>
            The WaveFormatExtensible structure defines the format of waveform-audio data for formats having more than two channels.
            </summary>
            <remarks>
            http://www.microsoft.com/whdc/device/audio/multichaud.mspx
            http://msdn.microsoft.com/en-us/library/dd757721%28v=VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.WaveFormatExtensible.wValidBitsPerSample">
            <summary>
            Number of bits of precision in the signal. Usually equal to WAVEFORMATEX.wBitsPerSample or wSamplesPerBlock if wBitsPerSample==0
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatExtensible.dwChannelMask">
            <summary>
            Bitmask specifying the assignment of channels in the stream to speaker positions.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WaveFormatExtensible.subFormat">
            <summary>
            Subformat of the data, such as KSDATAFORMAT_SUBTYPE_PCM. The subformat information is similar to that provided by the tag in the WAVEFORMATEX structure's wFormatTag member.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatExtensible.#ctor">
            <summary>
            Parameterless constructor for marshalling
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveFormatExtensible.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new WaveFormatExtensible for PCM or IEEE
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveformParams.BuffersNum">
            <summary>
            Gets or sets the number of buffers will be allocated for the speaker.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveformParams.BufferLatency">
            <summary>
            Gets or sets the latency between buffers.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveformParams.DelayedStart">
            <summary>
            Gets or sets a boolean value indicating whether the speaker will play the underlying stream immediately.
            If set to true, the playing will be started after a specified millisec defined in <see cref="P:Ozeki.Media.WaveformParams.StartDelay"/>.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveformParams.StartDelay">
            <summary>
            Gets or sets the time in millisec after the speaker start playing the underlying stream.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveformParams.StreamLengthMultiplier">
            <summary>
            Gets or sets a multiplier for the length of the allocated stream.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveHeader">
            <summary>
            The WaveHeader structure defines the header used to identify a waveform-audio buffer. (WAVEHDR)
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd743837%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="P:Ozeki.Media.WaveHeader.DataBuffer">
            <summary>
            Gets or sets the pointer to the waveform buffer. (lpData)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveHeader.BufferLength">
            <summary>
            Gets or sets the length of the buffer in bytes. (dwBufferLength)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveHeader.BytesRecorded">
            <summary>
            When the header is used in input, specifies how much data is in the buffer. (dwBytesRecorded)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveHeader.UserData">
            <summary>
            Gets os sets the User Data. (dwUser)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveHeader.Flags">
            <summary>
            A bitwise OR of zero of more flags. (dwFlags)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveHeader.Loops">
            <summary>
            Gets os sets the number of times to play the loop. This member is used only with output buffers. (dwLoops)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveHeader.Next">
            <summary>
            Reserved (lpNext)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveHeader.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveInBase">
            <summary>
            Provides an interface for capturing audio data.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInBase.#ctor(Ozeki.Media.DeviceInfo,Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveInBase"/> class.
            </summary>
            <param name="deviceInfo"></param>
            <param name="waveFormat">The capturing wave format.</param>
        </member>
        <member name="M:Ozeki.Media.WaveInBase.Start">
            <summary>
            Starts the recording.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInBase.Stop">
            <summary>
            Stops the recording.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInBase.ChangeFormat(Ozeki.Media.WaveFormat)">
            <summary>
            Changes the wave format of the device.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInBase.Dispose(System.Boolean)">
            <summary>
            Closes the <see cref="T:Ozeki.Media.WaveInBase"/> and disposes the buffers.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ozeki.Media.WaveInBase.Dispose">
            <summary>
            Closes the <see cref="T:Ozeki.Media.WaveInBase"/>.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInBase.Finalize">
            <summary>
            Finalizer. Only called when user forgets to call <see>Dispose</see>
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBase.DeviceInfo">
            <summary>
            Gets some information about the device such as device ID or product name.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBase.State">
            <summary>
            Gets the state of the recording.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBase.Initialized">
            <summary>
            Gets a boolean value indicating whether the device is initialized and ready to use.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBase.Volume">
            <summary>
            Gets or sets the volume of the recorder. (Range: 0-1)
            If the value is -1, the volume of the selected device is fixed and cannot be changed.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBase.Level">
            <summary>
            Gets the level of the input data. (Range: 0-100)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBase.Muted">
            <summary>
            Gets or sets a boolean value indicating whether the audio device is muted.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInBuffer.#ctor(System.IntPtr,System.Int32)">
            <summary>
            creates a new wavebuffer
            </summary>
            <param name="waveInHandle">WaveIn device to write to</param>
            <param name="bufferSize">Buffer size in bytes</param>
        </member>
        <member name="M:Ozeki.Media.WaveInBuffer.Reuse">
            <summary>
            Place this buffer back to record more audio
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInBuffer.Finalize">
            <summary>
            Finalizer for this wave buffer
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInBuffer.Dispose">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInBuffer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBuffer.Data">
            <summary>
            Provides access to the actual record buffer (for reading only)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBuffer.Done">
            <summary>
            Indicates whether the Done flag is set on this buffer
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBuffer.BytesRecorded">
            <summary>
            Number of bytes recorded
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInBuffer.BufferSize">
            <summary>
            The buffer size in bytes
            </summary>
        </member>
        <member name="T:Ozeki.Media.WAVEINCAPS">
            <summary>
            The WAVEINCAPS structure describes the capabilities of a waveform-audio input device.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/ms713726(VS.85).aspx
            </remarks>
        </member>
        <member name="F:Ozeki.Media.WAVEINCAPS.wMid">
            <summary>
            Gets or sets the manufacturer identifier for the device driver.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEINCAPS.wPid">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEINCAPS.vDriverVersion">
            <summary>
            Gets or sets the version number of the device driver.
            The high-order byte is the major version number, and the low-order byte is the minor version number.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEINCAPS.szPname">
            <summary>
            Gets or sets the product name in a null-terminated string.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEINCAPS.dwFormats">
            <summary>
            Gets or sets the standard formats that are supported.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEINCAPS.wChannels">
            <summary>
            Gets or sets the number specifying whether the device supports mono (1) or stereo (2) input.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEINCAPS.wReserved1">
            <summary>
            Padding
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveInDataEventArgs">
            <summary>
            Provides data for the IWaveIn.DataAvailable event.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInDataEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of the WaveInEventArgs class
            </summary>
            <param name="buffer">Buffer containing the recorded data</param>
            <param name="bytes">The number of bytes in the buffer.</param>
        </member>
        <member name="P:Ozeki.Media.WaveInDataEventArgs.Buffer">
            <summary>
            Gets the buffer containing the recorded data.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveInDataEventArgs.BytesRecorded">
            <summary>
            Gets the number of the recorded bytes.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveInDeviceHelper.GetDevices">
            <summary>
            Retrieves the available recording devices.
            </summary>
            <returns>The list containing the devices.</returns>
        </member>
        <member name="P:Ozeki.Media.WaveInDeviceHelper.NumberOfDevices">
            <summary>
            Gets the number of the available recording devices.
            </summary>
        </member>
        <member name="P:Ozeki.Media.OldWaveOutPlayer.Volume">
            <summary>
            Volume for this device. 100.0 is full scale
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveOutBase">
            <summary>
            Provides an interface for audio data playback.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.#ctor(Ozeki.Media.WaveFormat,System.Int32)">
            <summary>
            Creates a new <see cref="T:Ozeki.Media.WaveOutBase"/> with the specified AudioWaveFormat.
            </summary>
            <param name="waveFormat">The given wave format.</param>
            <param name="deviceID">The identifier of the device.</param>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.#ctor(Ozeki.Media.DeviceInfo,Ozeki.Media.WaveFormat,Ozeki.Media.WaveformParams)">
            <summary>
            Creates a new <see cref="T:Ozeki.Media.WaveOutBase"/> with the specified AudioWaveFormat.
            </summary>
            <param name="deviceInfo"></param>
            <param name="waveFormat">The given wave format.</param>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.Init">
            <summary>
            Initializes the <see cref="T:Ozeki.Media.WaveOutBase"/>
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.Start">
            <summary>
            Starts the playback. If the playback has been paused then resumes it.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.Pause">
            <summary>
            Pauses the playback
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.Stop">
            <summary>
            Stops the playback
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.Write(System.Byte[])">
            <summary>
            Writes PCM data to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="data">The specified PCM data</param>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.ChangeFormat(Ozeki.Media.WaveFormat)">
            <summary>
            Changes the format of the playback.
            </summary>
            <param name="waveFormat"></param>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.Dispose">
            <summary>
            Closes the AudioPlayer
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.Dispose(System.Boolean)">
            <summary>
            Closes the AudioPlayer and disposes the buffers
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ozeki.Media.WaveOutBase.Finalize">
            <summary>
            Finalizer. Only called when user forgets to call <see>Dispose</see>
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveOutBase.DeviceInfo">
            <summary>
            Gets some information about the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveOutBase.PlaybackState">
            <summary>
            Gets the state of the playback.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveOutBase.Initialized">
            <summary>
            Returns a boolean value indicating whether the playback device is ready.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveOutBase.Volume">
            <summary>
            Gets or sets the volume of the playback. (Range: 0-1)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveOutBase.Level">
            <summary>
            Gets the level of the output data. (Range: 0-100)
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveOutBase.Muted">
            <summary>
            Gets or sets a boolean value indicating whether the playback is muted.
            </summary>
        </member>
        <member name="E:Ozeki.Media.WaveOutBase.Stopped">
            <summary>
            Occurs when the playback has been stopped
            </summary>
        </member>
        <member name="E:Ozeki.Media.WaveOutBase.LevelChanged">
            <summary>
            Occurs when the playback level has changed.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveOutEventPlayer">
            <summary>
            Event callback based audio player.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveOutBuffer">
            <summary>
            A buffer of Wave samples for streaming to a Wave Output device
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBuffer.#ctor(System.IntPtr,System.Int32,System.IO.Stream,System.Object,Ozeki.Media.WaveFormat)">
            <summary>
            creates a new wavebuffer
            </summary>
            <param name="hWaveOut">WaveOut device to write to</param>
            <param name="bufferSize">Buffer size in bytes</param>
            <param name="bufferFillStream">Stream to provide more data</param>
            <param name="waveOutLock">Lock to protect WaveOut API's from being called on >1 thread</param>
            <param name="waveFormat">The format of the audio</param>
        </member>
        <member name="M:Ozeki.Media.WaveOutBuffer.Finalize">
            <summary>
            Finalizer for this wave buffer
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBuffer.Dispose">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBuffer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutBuffer.OnDone">
            <summary>
            This is called by the WAVE callback and should be used to refill the buffer
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ozeki.Media.WaveOutBuffer.InQueue">
            <summary>
            Gets the value indicating whether the header's "In Queue" flag is set or not
            </summary>
        </member>
        <member name="P:Ozeki.Media.WaveOutBuffer.BufferSize">
            <summary>
            Gets the size of the buffer in bytes
            </summary>
        </member>
        <member name="T:Ozeki.Media.WAVEOUTCAPS">
            <summary>
            The WAVEOUTCAPS structure describes the capabilities of a waveform-audio output device.
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/multimed/htm/_win32_waveoutcaps_str.asp
            </remarks>
        </member>
        <member name="F:Ozeki.Media.WAVEOUTCAPS.wMid">
            <summary>
            Gets or sets the manufacturer identifier for the device driver.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEOUTCAPS.wPid">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEOUTCAPS.vDriverVersion">
            <summary>
            Gets or sets the version number of the device driver.
            The high-order byte is the major version number, and the low-order byte is the minor version number.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEOUTCAPS.szPname">
            <summary>
            Gets or sets the product name in a null-terminated string.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEOUTCAPS.dwFormats">
            <summary>
            Gets or sets the standard formats that are supported.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEOUTCAPS.wChannels">
            <summary>
            Gets or sets the number specifying whether the device supports mono (1) or stereo (2) input.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEOUTCAPS.wReserved1">
            <summary>
            Packing
            </summary>
        </member>
        <member name="F:Ozeki.Media.WAVEOUTCAPS.dwSupport">
            <summary>
            Optional functionality supported by the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.WAVEOUTCAPS.SupportsPlaybackRateControl">
            <summary>
            Gets whether playback control is supported
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveOutDeviceHelper.GetDevices">
            <summary>
            Retrieves the available playback devices.
            </summary>
            <returns>The list containing the devices.</returns>
        </member>
        <member name="P:Ozeki.Media.WaveOutDeviceHelper.NumberOfDevices">
            <summary>
            Gets the number of the available playback devices.
            </summary>
        </member>
        <member name="T:Ozeki.Media.CircularBufferStream">
            <summary>
            A very basic circular buffer implementation
            </summary>
        </member>
        <member name="M:Ozeki.Media.CircularBufferStream.#ctor(System.Int32)">
            <summary>
            Create a new circular buffer
            </summary>
            <param name="size">Max buffer size in bytes</param>
        </member>
        <member name="M:Ozeki.Media.CircularBufferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the buffer
            </summary>
            <param name="data">Data to write</param>
            <param name="offset">Offset into data</param>
            <param name="count">Number of bytes to write</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:Ozeki.Media.CircularBufferStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the buffer
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="offset">Offset into read buffer</param>
            <param name="count">Bytes to read</param>
            <returns>Number of bytes actually read</returns>
        </member>
        <member name="M:Ozeki.Media.CircularBufferStream.Reset">
            <summary>
            Resets the buffer
            </summary>
        </member>
        <member name="M:Ozeki.Media.CircularBufferStream.Advance(System.Int32)">
            <summary>
            Advances the buffer, discarding bytes
            </summary>
            <param name="count">Bytes to advance</param>
        </member>
        <member name="P:Ozeki.Media.CircularBufferStream.MaxLength">
            <summary>
            Maximum length of this circular buffer
            </summary>
        </member>
        <member name="P:Ozeki.Media.CircularBufferStream.Count">
            <summary>
            Number of bytes currently stored in the circular buffer
            </summary>
        </member>
        <member name="T:Ozeki.Media.JitterBuffer">
            <summary>
            Jitter buffer implemenation.
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.pointer_timestamp">
            <summary>
            Timestamp of what we will *get* next
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.last_returned_timestamp">
            <summary>
            Useful for getting the next packet with the same timestamp (for fragmented media)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.next_stop">
            <summary>
            Estimated time the next get() will be called
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.buffered">
            <summary>
            Amount of data we think is still buffered by the application (timestamp units)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.packets">
            <summary>
            Packets stored in the buffer
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.arrival">
            <summary>
            Packet arrival time (0 means it was late, even though it's a valid timestamp)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.delay_step">
            <summary>
            Size of the steps when adjusting buffering (timestamp units)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.concealment_size">
            <summary>
            Size of the packet loss concealment "units"
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.reset_state">
            <summary>
            True if state was just reset
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.buffer_margin">
            <summary>
            How many frames we want to keep in the buffer (lower bound)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.late_cutoff">
            <summary>
            How late must a packet be for it not to be considered at all
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.interp_requested">
            <summary>
            An interpolation is requested by <see cref="M:Ozeki.Media.JitterBuffer.UpdateDelay"/>
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.auto_adjust">
            <summary>
            Whether to automatically adjust the delay at any time
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer._tb">
            <summary>
            Don't use those directly
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.timeBuffers">
            <summary>
            Storing arrival time of latest frames so we can compute some stats
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.window_size">
            <summary>
            Total window over which the late frames are counted
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.subwindow_size">
            <summary>
            Sub-window size for faster computation
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.max_late_rate">
            <summary>
            Absolute maximum amount of late packets tolerable (in percent)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.latency_tradeoff">
            <summary>
            Latency equivalent of losing one percent of packets
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.auto_tradeoff">
            <summary>
            Latency equivalent of losing one percent of packets (automatic default)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBuffer.lost_count">
            <summary>
            Number of consecutive lost packets
            </summary>
        </member>
        <member name="M:Ozeki.Media.JitterBuffer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the jitterbuffer with a given <paramref name="step_size"/>.
            </summary>
            <param name="step_size"></param>
            <param name="maxLatency"></param>
        </member>
        <member name="M:Ozeki.Media.JitterBuffer.ComputeOptDelay">
            <summary>
            Based on available data, this computes the optimal delay for the jitter buffer. 
            The optimised function is in timestamp units and is:
            cost = delay + late_factor*[number of frames that would be late if we used that delay]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.JitterBuffer.UpdateTimings(System.Int32)">
            <summary>
            Take the following timing into consideration for future calculations
            </summary>
            <param name="timing"></param>
        </member>
        <member name="M:Ozeki.Media.JitterBuffer.Put(Ozeki.Media.JitterBufferPacket)">
            <summary>
            Put one packet into the jitter buffer
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Ozeki.Media.JitterBuffer.Get(Ozeki.Media.JitterBufferPacket@,System.Int32,System.Int32@)">
            <summary>
            Get one packet from the jitter buffer
            </summary>
            <param name="packet"></param>
            <param name="desired_span"></param>
            <param name="start_offset"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.JitterBuffer.ShiftTimings(System.Int16)">
            Compensate all timings when we do an adjustment of the buffering 
        </member>
        <member name="M:Ozeki.Media.JitterBuffer.UpdateDelay">
            <summary>
            Let the jitter buffer know it's the right time to adjust the buffering delay to the network conditions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.JitterBuffer.Tick">
            <summary>
            Call this method to indicate one step in time (one tick).
            </summary>
        </member>
        <member name="T:Ozeki.Media.JitterBufferPacket">
            <summary>
            Represents the container for one packte in the buffer.
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferPacket.data">
            <summary>
            Data bytes contained in the packet
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferPacket.len">
            <summary>
            Length of the packet in bytes
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferPacket.timestamp">
            <summary>
            Timestamp for the packet
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferPacket.span">
            <summary>
            Time covered by the packet (same units as timestamp)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferPacket.sequence">
            <summary>
            RTP Sequence number if available (0 otherwise)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferPacket.user_data">
            <summary>
            Put whatever data you like here (it's ignored by the jitter buffer)
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferResult.JITTER_BUFFER_OK">
            <summary>
            Packet has been retrieved
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferResult.JITTER_BUFFER_MISSING">
            <summary>
            Packet is lost or is late
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferResult.JITTER_BUFFER_INSERTION">
            <summary>
            A "fake" packet is meant to be inserted here to increase buffering
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferResult.JITTER_BUFFER_INTERNAL_ERROR">
            <summary>
            There was an error in the jitter buffer
            </summary>
        </member>
        <member name="F:Ozeki.Media.JitterBufferResult.JITTER_BUFFER_BAD_ARGUMENT">
            <summary>
            Invalid argument
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaJitterBuffer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaJitterBuffer"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaJitterBuffer.Get(System.Int32)">
            <summary>
            Returns the next frame from the buffer.
            </summary>
            <param name="dataSize"></param>
        </member>
        <member name="M:Ozeki.Media.MediaJitterBuffer.Put(System.Byte[])">
            <summary>
            Puts the <paramref name="frameData"/> into the buffer. Note that the given byte array
            is not copied so you transfer ownership to the buffer.
            </summary>
            <param name="frameData"></param>
        </member>
        <member name="T:Ozeki.Media.MediaBufferType">
            <summary>
            Defines media buffering methods.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaBufferType.JitterBuffer">
            <summary>
            Data buffering using jitter buffer.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaBufferType.Stream">
            <summary>
            Data buffering using circular stream.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaBufferType.PacketQueue">
            <summary>
            Data buffering by queuing packets.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MediaBufferWrapper">
            <summary>
            Class for media data buffering. Includes jitter buffer.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaBufferWrapper.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaBufferWrapper"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaBufferWrapper.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaBufferWrapper"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaBufferWrapper.Put(System.Byte[])">
            <summary>
            Puts the given data into the buffer.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Ozeki.Media.MediaBufferWrapper.Get">
            <summary>
            Gets the next data from the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.Media.StreamMediaBuffer">
            <summary>
            Stream-re ir, stream-rol olvas
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecDescription.CodecPayloadType">
            <summary>
            Gets or sets the numeric ID of the codec.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecDescription.CodecType">
            <summary>
            Gets the type of the codec.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecDescription.Name">
            <summary>
            Gets the encoding name of the codec.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecDescription.SampleRate">
            <summary>
            Gets the sample rate of the codec.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecDescription.Channels">
            <summary>
            Gets the number of channels.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecDescription.MediaType">
            <summary>
            Gets the media type that the codec can encode and decode.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecDescription.EncodingParameters">
            <summary>
            For audio streams, indicates the number of audio channels.
            For video streams, no encoding parameters are currently specified.
            Additional encoding parameters MAY be defined in the future, butt codec-specific parameters SHOULD NOT be added.
            </summary>
        </member>
        <member name="M:Ozeki.Media.ArrayUtil.Split(System.Byte[],System.Int32)">
            <summary>
            Frame size mereture darabolja a tombot
            </summary>
            <param name="array"></param>
            <param name="frameSize"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.ArrayUtil.Aggregate(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            A tombokbol egy byte tombot csinal
            </summary>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="T:Ozeki.Media.CodecInfo">
            <summary>
            Provides information about a codec.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CodecInfo.#ctor(System.Int32,System.String,System.Int32,System.Boolean,Ozeki.Media.CodecMediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.CodecInfo"/> class.
            </summary>
            <param name="payloadType">The payload of the codec.</param>
            <param name="name">The name of the codec.</param>
            <param name="sampleRate">The name of the codec.</param>
            <param name="enabled">Boolean value whether the codec is enabled.</param>
            <param name="type">Gets the media type of the codec.</param>
        </member>
        <member name="M:Ozeki.Media.CodecInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>true if the parameter object is equal to the current object, otherwise false</returns>
        </member>
        <member name="M:Ozeki.Media.CodecInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>The hash code of the codec</returns>
        </member>
        <member name="M:Ozeki.Media.CodecInfo.ToString">
            <summary>
            Creates the string representation of the CodecInfo object.
            </summary>
            <returns>The string representation of the CodecInfo object.</returns>
        </member>
        <member name="P:Ozeki.Media.CodecInfo.PayloadType">
            <summary>
            Gets the payload type of the codec.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecInfo.CodecType">
            <summary>
            Gets the type of the codec.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecInfo.Enabled">
            <summary>
            Gets or sets a boolean value indicating whether the codec is enabled during the following calls.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecInfo.CodecName">
            <summary>
            Gets the name of the codec.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecInfo.SampleRate">
            <summary>
            Gets the sample rate of the codec.
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecInfo.MediaType">
            <summary>
            Gets the media type of the codec.
            </summary>
        </member>
        <member name="T:Ozeki.Media.CodecMediaType">
            <summary>
            Codec type enumeration.
            </summary>
        </member>
        <member name="F:Ozeki.Media.CodecMediaType.Unknown">
            <summary>
            Unknown codec type
            </summary>
        </member>
        <member name="F:Ozeki.Media.CodecMediaType.Audio">
            <summary>
            Audio codec
            </summary>
        </member>
        <member name="F:Ozeki.Media.CodecMediaType.Video">
            <summary>
            Video codec
            </summary>
        </member>
        <member name="T:Ozeki.Media.ICodec">
            <summary>
            
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ozeki.Media.ICodec.Encode(System.Byte[])">
            <summary>
            A nyers adatot kódolja(tömöríti)
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.ICodec.Decode(System.Byte[])">
            <summary>
            A kódolt(tömörített) adatot nyers formámban adja vissza
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Ozeki.Media.ICodec.Description">
            <summary>
            A kodek leírása, amit megjelenítéshez lehet használni
            </summary>
        </member>
        <member name="P:Ozeki.Media.ICodec.SampleRate">
            <summary>
            Mintavételezési ráta
            </summary>
        </member>
        <member name="P:Ozeki.Media.ICodec.PayloadType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.ICodec.MediaType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.ICodec.EncodingName">
            <summary>
            A kodek azonosítási neve
            </summary>
        </member>
        <member name="P:Ozeki.Media.ICodec.Channels">
            <summary>
            Adatcsatornák száma.
            </summary>
        </member>
        <member name="P:Ozeki.Media.ICodec.PacketizationTime">
            <summary>
            Default ms/packet (csak audionál van szerepe)
            </summary>
        </member>
        <member name="P:Ozeki.Media.ICodec.Bitrate">
            <summary>
            Kodek (az enkódolt adat) bitrátája bit/sec-ben.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IPPCodecBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ozeki.Media.IPPCodecBase.EncoderDataSize">
            <summary>
            Az encodernek milyen hosszu adatot kell beadni.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IPPCodecBase.DecoderDataSize">
            <summary>
            A decoder-nek milyen hosszu adatot kell beadni.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CodecG722.#ctor(System.Int32)">
            <summary>
            Támogatott bitráták
            64000, 56000, 48000
            </summary>
            <param name="bitrate"></param>
        </member>
        <member name="M:Ozeki.Media.CodecG723.#ctor(System.Int32)">
            <summary>
            Támotatott bitráták 6300 vagy 5300
            </summary>
            <param name="bitrate"></param>
        </member>
        <member name="M:Ozeki.Media.CodecFactoryG726.#ctor(System.Int32)">
            <summary>
            Támogatott bitráták
            16000, 24000, 32000, 48000
            </summary>
            <param name="bitrate"></param>
        </member>
        <member name="M:Ozeki.Media.CodecG726.#ctor(System.Int32)">
            <summary>
            Támogatott bitráták
            16000, 24000, 32000, 40000
            </summary>
            <param name="bitrate"></param>
        </member>
        <member name="M:Ozeki.Media.IVideoCodecConfigurable.SetEncoderConfig(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Átállítja az encoder konfigurációt
            </summary>
            <returns>True, ha megváltozott a konfig</returns>
        </member>
        <member name="M:Ozeki.Media.BaseH263Codec.Encode(System.Byte[])">
            <summary>
            A nyers adatot kódolja(tömöríti)
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.BaseH263Codec.Decode(System.Byte[])">
            <summary>
            A kódolt(tömörített) adatot nyers formámban adja vissza
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.BaseH263Codec.SetEncoderConfig(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Átállítja az encoder konfigurációt
            </summary>
            <returns>True, ha megváltozott a konfig</returns>
        </member>
        <member name="M:Ozeki.Media.BaseH263Codec.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ozeki.Media.BaseH263Codec.Description">
            <summary>
            A kodek leírása, amit megjelenítéshez lehet használni
            </summary>
        </member>
        <member name="P:Ozeki.Media.BaseH263Codec.SampleRate">
            <summary>
            Mintavételezési ráta
            </summary>
        </member>
        <member name="P:Ozeki.Media.BaseH263Codec.PayloadType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.BaseH263Codec.MediaType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.BaseH263Codec.EncodingName">
            <summary>
            A kodek azonosítási neve
            </summary>
        </member>
        <member name="P:Ozeki.Media.BaseH263Codec.Channels">
            <summary>
            Adatcsatornák száma.
            </summary>
        </member>
        <member name="P:Ozeki.Media.BaseH263Codec.PacketizationTime">
            <summary>
            Default ms/packet (csak audionál van szerepe)
            </summary>
        </member>
        <member name="T:Ozeki.Media.CodecH263">
            <summary>
            A szabvány szerint a másik félnek csak olyan méretű képet küldhetnénk, amit megadott az fmtp ben.
            Ha átméretezem a képet, akkor exception nel elszáll az X-Lite, Bria
            A képátméretező működik (teszteltem)
            Ha nem méretezem át, akkor nem szabványos a protokoll implementáció, de a 3CX softphone kivételével (nem jeleníti meg a képet csak ha QCIF, CIF felbontásban van a kamera) mindenhol működik
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecH263.Description">
            <summary>
            A kodek leírása, amit megjelenítéshez lehet használni
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecH263.PayloadType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecH263.EncodingName">
            <summary>
            A kodek azonosítási neve
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecH263Plus.Description">
            <summary>
            Codec neve
            </summary>
        </member>
        <member name="M:Ozeki.Media.H263Encoder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ozeki.Media.CodecH264.Description">
            <summary>
            Codec neve
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecH264.SampleRate">
            <summary>
            Mintavételezési ráta
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecH264.PayloadType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecH264.MediaType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecH264.EncodingName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecH264.Channels">
            <summary>
            Adatcsatornák száma.
            </summary>
        </member>
        <member name="M:Ozeki.Media.H264Decoder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ozeki.Media.H264Encoder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ozeki.Media.VideoFormat">
            <summary>
            Defines format information of video data.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoFormat.#ctor(Ozeki.Media.VideoType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoFormat"/> class.
            </summary>
            <param name="codecType">The type of the video.</param>
        </member>
        <member name="M:Ozeki.Media.VideoFormat.#ctor(Ozeki.Media.VideoType,Ozeki.Media.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoFormat"/> class.
            </summary>
            <param name="codecType">The type of the video.</param>
            <param name="resolution">The resolution of the video.</param>
        </member>
        <member name="M:Ozeki.Media.VideoFormat.#ctor(Ozeki.Media.VideoType,System.Double,Ozeki.Media.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoFormat"/> class.
            </summary>
            <param name="codecType">The type of the video.</param>
            <param name="maxFrameRate">The maximum framerate for the video.</param>
            <param name="resolution">The resolution of the video.</param>
        </member>
        <member name="M:Ozeki.Media.VideoFormat.#ctor(Ozeki.Media.VideoType,System.Double,Ozeki.Media.Resolution,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoFormat"/> class.
            </summary>
            <param name="codecType">The type of the video.</param>
            <param name="maxFrameRate">The maximum framerate for the video.</param>
            <param name="resolution">The resolution of the video.</param>
            <param name="maxBitrate">The maximum bitrate for the video.</param>
        </member>
        <member name="M:Ozeki.Media.VideoFormat.Supports(Ozeki.Media.VideoFormat)">
            <summary>
            Determines if the current video format has no restrictive
            parameters than the argument, and this VideoFormat can be used
            for codecs instead of the parameter VideoFormat.
            </summary>
            <param name="format">VideoFormat to check if it has no restrictive
            parameters than this VideoFormat.</param>
            <returns>True if this VideoFormat can be used instead of parameter VideoFormat.</returns>
        </member>
        <member name="M:Ozeki.Media.VideoFormat.Modify(Ozeki.Media.Resolution,System.Double,System.Int32)">
            <summary>
            Copies the current VideoFormat based on the current VideoFormat with modified parameters.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoFormat.CodecType">
            <summary>
            Gets the encoded type of the video data.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoFormat.Width">
            <summary>
            Gets the width of the video.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoFormat.Height">
            <summary>
            Gets the height of the video.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoFormat.MaxFramerate">
            <summary>
            Gets the maximum available framerate for the video.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoFormat.Resolution">
            <summary>
            Gets the resolution of the video data.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoFormat.MaxBitrate">
            <summary>
            Gets the maximum bitrate for the video data.
            </summary>
        </member>
        <member name="M:Ozeki.Media.H264VideoFormat.Modify(Ozeki.Media.Resolution,System.Double,System.Int32)">
            <summary>
            Copies the current VideoFormat based on the current VideoFormat with modified parameters.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CodecFactoryiLBC.ParseFmtpString(System.String)">
            <summary>
            Parses the fmtp string located in the SDP.
            </summary>
            <returns>mode</returns>
        </member>
        <member name="P:Ozeki.Media.CodecMPEG4.Description">
            <summary>
            Codec neve
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecMPEG4.SampleRate">
            <summary>
            Mintavételezési ráta
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecMPEG4.PayloadType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecMPEG4.MediaType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecMPEG4.EncodingName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ozeki.Media.CodecMPEG4.Channels">
            <summary>
            Adatcsatornák száma.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CodecSpeex.#ctor(System.Int32)">
            <summary>
            Narrow 8000
            Wideband 16000
            Ultrawineband 32000
            </summary>
            <param name="sampleRate"></param>
        </member>
        <member name="T:Ozeki.Media.MediaConnector">
            <summary>
            Class for creating connections between media handling objects.
            </summary>
            <remarks>
            The <see cref="T:Ozeki.Media.MediaConnector"/> class defines connections between audio and video handler objects. These connections can be destroyed as well.
            
            An audio connection consists of an <see cref="T:Ozeki.Media.IAudioSender"/> and an <see cref="T:Ozeki.Media.IAudioReceiver"/>. The connection operates only in one way.
            A video connection consists of an <see cref="T:Ozeki.Media.IVideoSender"/> and an <see cref="T:Ozeki.Media.IVideoReceiver"/>. The connection operates only in one way.
            The media data will flow from the sender to the receiver.
            
            The connection performs automatic conversion between the source and destination media format.
            </remarks>
        </member>
        <member name="M:Ozeki.Media.MediaConnector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaConnector"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaConnector.Connect(Ozeki.Media.IAudioSender,Ozeki.Media.IAudioReceiver)">
            <summary>
            Connects an <see cref="T:Ozeki.Media.IAudioSender"/> with an <see cref="T:Ozeki.Media.IAudioReceiver"/>. The media data will flow from the sender to the receiver.
            </summary>
            <param name="sender">The audio source that sends the data.</param>
            <param name="receiver">The audio handler that receives the data.</param>
            <returns>False, if the source and destination is already connected. Otherwise true.</returns>
        </member>
        <member name="M:Ozeki.Media.MediaConnector.Connect(Ozeki.Media.IVideoSender,Ozeki.Media.IVideoReceiver)">
            <summary>
            Connects an <see cref="T:Ozeki.Media.IVideoSender"/> with an <see cref="T:Ozeki.Media.IVideoReceiver"/>. The media data will flow from the sender to the receiver.
            </summary>
            <param name="sender">The video source that sends the data.</param>
            <param name="receiver">The video handler that receives the data.</param>
        </member>
        <member name="M:Ozeki.Media.MediaConnector.Disconnect(Ozeki.Media.IAudioSender,Ozeki.Media.IAudioReceiver)">
            <summary>
            Closes the connection between two audio handlers.
            </summary>
            <param name="sender">The audio source that sent the data.</param>
            <param name="receiver">The audio handler that received the data.</param>
            <remarks>
            When disconnecting an audio connection, the audio handlers will not be disposed!
            </remarks>
        </member>
        <member name="M:Ozeki.Media.MediaConnector.Disconnect(Ozeki.Media.IVideoSender,Ozeki.Media.IVideoReceiver)">
            <summary>
            Closes the connection between two video handlers.
            </summary>
            <param name="sender">The video source that sent the data.</param>
            <param name="receiver">The video handler that received the data.</param>
            <remarks>
            When disconnecting a video connection, the video handlers will not be disposed!
            </remarks>
        </member>
        <member name="M:Ozeki.Media.ReceiveAudioMixerConnection.Connect(Ozeki.Media.IAudioSender)">
            <summary>
            Hogyha már több audio sender-t kötöttek ugyanahhoz a receiver-hez, akkor mixer objektumot hozunk létre
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.VideoConnectionHandler.FixFormat(Ozeki.Media.VideoData,System.String)">
            <summary>
            Ha hiányoznak adatok pl. H264 video esetén  hiányzik a felbontás, akkor itt detektáljuk
            és kitöltjük a video adat formátumában
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.VideoConnectionHandler.Split(System.Byte[])">
            <summary>
            Splitteli a pattern szerint az eredményben a minta nem fog szerepelni
            </summary>
            <param name="array"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.VideoFormatSelector.GetReceiverFormats(System.String,Ozeki.Media.VideoFormat)">
            <summary>
            Megadja, hogy melyik receiver-hez milyen formátumot rendel. Megtalálja a
            legoptimálisabb formátumohasználatot a receiverekhez, hogy a lehető legkevesebb konverziót
            kelljen csinálni. Egy video formátumból (kodek típus, felbontás) max egyet csinál, 
            és a többinek is a legminimálisabb extra paraméterekkel küldi, ha több receiver is támogatja. Ha közvetlenül a forrást
            is használhatja, akkor null-t rendel receiver-hez.
            </summary>
            <param name="name"></param>
            <param name="sourceFormat">A forrás formátum, amit figyelembe kell venni a lehetséges optimalizáláshoz.</param>
            <returns>Receiver-VideoFormat párosítás, amely formátummal kodeket is létre lehet hozni. A VideoFormat null, 
            ha a forrás formátumát lehet használni a receiver-hez.</returns>
        </member>
        <member name="M:Ozeki.Media.VideoFormatSelector.CreateCodecFormat(Ozeki.Media.VideoFormat)">
            <summary>
            Olyan formátumot kell belőle csinálni, hogy minden szükséges
            adat ki legyen töltve, mert különben nem fogja tudni legyártani a
            kodeket a format alapján
            </summary>
            <param name="videoData"></param>
            <param name="destFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.VideoFormatSelector.FilterDuplicateFormats(System.Collections.Generic.Dictionary{Ozeki.Media.IVideoReceiver,Ozeki.Media.VideoFormat})">
            <summary>
            Megnézi, hogy lehet-e helyettesíteni
            egyik formátumot egy másikkal, hogy a végén a lehető legkevesebb formátumot használjuk 
            (pl. H264 High 30FPS vagy H264 0x0@0 helyettesíthető H264 Baseline 15FPS-sel)
            </summary>
            <param name="optimalFormats"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.VideoFormatSelector.GetOptimalFormats(System.Collections.Generic.Dictionary{Ozeki.Media.IVideoReceiver,System.Collections.Generic.List{Ozeki.Media.VideoFormat}})">
            <summary>
             Melyik receiver melyik formátumot támogatja úgy, hogy a lehető legtöbb 
            receivernek jó legyen az adott formátum
            </summary>
            <param name="preferredFormats"></param>
            <returns></returns>
        </member>
        <member name="F:Ozeki.Media.CameraURLBuilderAddWF.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CameraURLBuilderAddWF.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ozeki.Media.CameraURLBuilderAddWF.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Ozeki.Media.CameraURLBuilderSettingWF.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CameraURLBuilderSettingWF.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ozeki.Media.CameraURLBuilderSettingWF.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Ozeki.Media.CameraURLBuilderWF.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CameraURLBuilderWF.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ozeki.Media.CameraURLBuilderAddWPF">
            <summary>
            Interaction logic for CameraURLBuilderAddWPF.xaml
            </summary>
            <summary>
            CameraURLBuilderAddWPF
            </summary>
        </member>
        <member name="M:Ozeki.Media.CameraURLBuilderAddWPF.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Ozeki.Media.CameraURLBuilderSettingWPF">
            <summary>
            Interaction logic for SettingWizardWPF.xaml
            </summary>
            <summary>
            CameraURLBuilderSettingWPF
            </summary>
        </member>
        <member name="M:Ozeki.Media.CameraURLBuilderSettingWPF.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Ozeki.Media.CameraURLBuilderWPF">
            <summary>
            Interaction logic for ConnectionWizardWPF.xaml
            </summary>
            <summary>
            CameraURLBuilderWPF
            </summary>
        </member>
        <member name="M:Ozeki.Media.CameraURLBuilderWPF.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Ozeki.Media.FlipMode">
            <summary>
            Defines constants for flipping an image at render time.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FlipMode.None">
            <summary>
            No flipping is used.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FlipMode.FlipX">
            <summary>
            Flip horizontally.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FlipMode.FlipY">
            <summary>
            Flip vertically.
            </summary>
        </member>
        <member name="F:Ozeki.Media.FlipMode.FlipXY">
            <summary>
            Flip horizontally and vertically.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IVideoControl`1.Start">
            <summary>
            Start the videoviewer control
            </summary>
        </member>
        <member name="M:Ozeki.Media.IVideoControl`1.Stop">
            <summary>
            Stop the videoviewer control
            </summary>
        </member>
        <member name="T:Ozeki.Media.VideoViewerWF">
            <summary>
            Represents a Windows Control to display video.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoViewerWF.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoViewerWF"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoViewerWF.SetImageProvider(Ozeki.Media.IImageProvider{System.Drawing.Image})">
            <summary>
            Sets an <see cref="T:Ozeki.Media.IImageProvider`1"/> object that will provide images for displaying. If no image provider set, the control will not display anything.
            </summary>
            <param name="imageProvider">The specified image provider.</param>
        </member>
        <member name="M:Ozeki.Media.VideoViewerWF.Start">
            <summary>
            Starts playing the video.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoViewerWF.Stop">
            <summary>
            Stops playing the video.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoViewerWF.ResetTransforms">
            <summary>
            Resets the flip and rotate information to 0.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoViewerWF.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="P:Ozeki.Media.VideoViewerWF.IsRunning">
            <summary>
            Gets a value that indicates the videoviewer is actually running or not
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoViewerWF.FlipMode">
            <summary>
            Gets or sets a value that indicates the displayed image is flipped vertically or horizontally.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoViewerWF.RotateAngle">
            <summary>
            Gets or sets a value that indicates the rotation angle in degrees to apply to the image in the control.
            Only 0, 90, 180 or 270 values are allowed.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoViewerWF.FrameStretch">
            <summary>
            Change the viewer aspect ratio
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoViewerWF.FullScreenEnabled">
            <summary>
            Gets or sets a value that indicates the fullscreen mode is enable or disable
            </summary>
        </member>
        <member name="M:Ozeki.Media.IPPEchoFilter.Filter(System.Byte[],System.Byte[])">
            <summary>
            Performs echo cancellation.
            </summary>
            <param name="localFrame">Contains speech with echo.</param>
            <param name="remoteFrame">Contains echo.</param>
            <returns>Speech without echo.</returns>
        </member>
        <member name="M:Ozeki.Media.SpeexEchoFilter.Filter(System.Byte[],System.Byte[])">
            <summary>
            Performs echo cancellation.
            </summary>
            <param name="localFrame">Contains speech with echo.</param>
            <param name="remoteFrame">Contains echo.</param>
            <returns>Speech without echo.</returns>
        </member>
        <member name="F:Ozeki.Media.IppAecAlgorithmType.Subband">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecAlgorithmType.FullBand">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecAlgorithmType.FastSubband">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ozeki.Media.IppAecAdaptationMode">
            <summary>
            Defines values determining how fast will the echo canceller adopt.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecAdaptationMode.Off">
            <summary>
            No adaptation.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecAdaptationMode.Full">
            <summary>
            Full adaptation.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecAdaptationMode.Lite">
            <summary>
            Lite adaptation.
            </summary>
        </member>
        <member name="T:Ozeki.Media.IppAecNoiseReductionLevel">
            <summary>
            Noise mitigation level enumeration.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecNoiseReductionLevel.NoReduction">
            <summary>
            No noise reduction will be made.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecNoiseReductionLevel.Low">
            <summary>
            Low filtering.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecNoiseReductionLevel.Medium">
            <summary>
            Medium filtering.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecNoiseReductionLevel.Normal">
            <summary>
            Normal filtering.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecNoiseReductionLevel.High">
            <summary>
            High filtering.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecNoiseReductionLevel.Auto">
            <summary>
            Automatically detects the level of the noise reduction.
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecNoiseReductionSmoothing.NoSmoothing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecNoiseReductionSmoothing.Static">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ozeki.Media.IppAecNoiseReductionSmoothing.Dynamic">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ozeki.Media.FrequencyGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            Azért nem statikusan gyártom, mert pl dtmf hangnál nem lenne meg a teljes hullám, hanem úgy kezdené elorol az ismétlodést, hogy pl a hullám vége nem lenne ott
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.Media.NoiseReductionLevel">
            <summary>
            Noise mitigation level enumeration.
            </summary>
        </member>
        <member name="F:Ozeki.Media.NoiseReductionLevel.NoReduction">
            <summary>
            No noise reduction will be made.
            </summary>
        </member>
        <member name="F:Ozeki.Media.NoiseReductionLevel.Low">
            <summary>
            Low filtering.
            </summary>
        </member>
        <member name="F:Ozeki.Media.NoiseReductionLevel.Medium">
            <summary>
            Medium filtering.
            </summary>
        </member>
        <member name="F:Ozeki.Media.NoiseReductionLevel.High">
            <summary>
            High filtering.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VADDetector.#ctor">
            <summary>
            Supported pcm format
            Frequency: 8000 khz
            BitsPerSample: 16 bit
            Channel: 1 channel
            </summary>
        </member>
        <member name="M:Ozeki.Media.VADDetector.DetectVoice(System.Byte[])">
            <summary>
            PCM data length must be equal 160
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.VADDetector.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Ozeki.Media.IMediaChannel">
            <summary>
            Represents a channel on which the media data will flow.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMediaChannel.SendMediaData(Ozeki.Media.MediaData)">
            <summary>
            Sends media data to the remote address.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMediaChannel.SendRTPEvent(System.Int32,Ozeki.Media.AudioData)">
            <summary>
            Sends RTP event data to the remote address.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMediaChannel.Close">
            <summary>
            Closes the media channel and frees up the resources used by the channel.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMediaChannel.ConnectToRemoteHost(System.String,System.Int32)">
            <summary>
             Connects to the given remote address and port.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMediaChannel.SetCryptoParameters(Ozeki.VoIP.CryptoDescription,Ozeki.VoIP.CryptoDescription)">
            <summary>
            Sets the encryption and decryption parameters of the media channel.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaChannel.ChannelID">
            <summary>
            Gets the ID of the channel.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaChannel.MediaType">
            <summary>
            Gets the media type of the channel.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaChannel.LocalPort">
            <summary>
            Gets the local media port of the channel.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaChannel.LocalAddress">
            <summary>
            Gets the local address of the channel.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaChannel.RemoteAddress">
            <summary>
            Gets the remote address of the channel where to the data will be sent.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaChannel.RemoteRtspServerAddress">
            <summary>
            Gets or sets the remote rtsp server address.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaChannel.RemotePort">
            <summary>
            Gets the remote port of the channel where to the data will be sent.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaChannel.CodecConfig">
            <summary>
            Gets the currently selected payload type of the encoder.
            </summary>
        </member>
        <member name="P:Ozeki.Media.IMediaChannel.TransportLayer">
            <summary>
            Gets or sets the transport layer.
            </summary>
        </member>
        <member name="E:Ozeki.Media.IMediaChannel.MediaDataReceived">
            <summary>
            Occurs when a media data received through the channel.
            </summary>
        </member>
        <member name="E:Ozeki.Media.IMediaChannel.EncoderChanged">
            <summary>
            Occurs when the payload type of the sent media data has changed.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IMediaChannelFactory.CreateChannel(System.String,Ozeki.Media.MediaType,Ozeki.VoIP.MediaProtocol,System.Int32)">
            <summary>
            A megadott információk alapján visszad egy channelt
            </summary>
            <param name="localAddress"></param>
            <param name="mediaProtocol"></param>
            <returns></returns>
        </member>
        <member name="T:Ozeki.Media.MediaDataReceivedEventArgs">
            <summary>
            Provides data for media data received events.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaDescriptionCompareResult.IsNetworkCompatible">
            <summary>
            A connection-ben olyan IP cimek szerepelnek, amelyek tudnak egymassal kommunikalni. (vagy mind a ketto lokalis, vagy mind a ketto tavoli cim)
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaDescriptionCompareResult.IsMediaProtocolCompatible">
            <summary>
            Mindketten ugyanazt a media protocolt tamogatjak (pl. RTP/AVP vagy RTP/SAVP)
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaDescriptionCompareResult.SupportedCodecs">
            <summary>
            Kozos kodekek media csatornankent.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaDescriptionFactory.GenerateOffer(System.String,System.Collections.Generic.List{Ozeki.VoIP.MediaChannelDescription},Ozeki.VoIP.Origin,System.Boolean)">
            <summary>
            Media felajánlás generálása a másik félnek.
            </summary>
            <param name="connection">Lokális IP cím, amire fogadjuk a media-t</param>
            <param name="channelDescriptions">Csatornák</param>
            <param name="unicast">Egy címre akarunk-e küldeni</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.MediaDescriptionFactory.GenerateAnswer(System.String,Ozeki.VoIP.Origin,Ozeki.VoIP.MediaDescription,System.Boolean)">
            <summary>
            Média felajánláshoz válasz generálása, amiben tartalmazza, hogy a csatornák milyen címen érhetőek el,
            és milyen kodekeket támogatnak.
            </summary>
            <param name="connection">Lokális IP cím, amire fogadjuk a media-t</param>
            <param name="offer">A felajánlás</param>
            <param name="unicast">Egy címre akarunk-e küldeni</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.MediaDescriptionFactory.GenerateChannelAnswer(Ozeki.VoIP.MediaChannelDescription,Ozeki.Media.CommunicationMode,System.Int32,Ozeki.VoIP.SRTPMode,System.Boolean)">
            <summary>
            Egy távoli féltől érkező csatornára generál egy választ.
            </summary>
            <param name="offer">Másik féltől érkezett felajánlás.</param>
            <param name="unicast">Egy címre akarunk-e küldeni</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.MediaDescriptionFactory.CreateLocalMediaDescription(System.String,Ozeki.VoIP.Origin,System.Collections.Generic.List{Ozeki.VoIP.MediaChannelDescription},System.Boolean)">
            <summary>
            Média felajánláshoz válasz generálása, amiben tartalmazza, hogy a csatornák milyen címen érhetőek el,
            és milyen kodekeket támogatnak.
            </summary>
            <param name="connection">Lokális IP cím, amire fogadjuk a media-t</param>
            <param name="mediaStreams">Csatornák</param>
            <param name="unicast">Egy címre akarunk-e küldeni</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.MediaDescriptionFactory.RejectMediaChannel(Ozeki.VoIP.MediaChannelDescription)">
            <summary>
            Ha nincs közös kodek, akkor el kell utasítani a csatornát.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.MediaDescriptionFactory.FilterByCodecName(System.Collections.Generic.List{Ozeki.Media.CodecDescription})">
            <summary>
            Ha több ugyanolyan codec-et küld az offer-ben különbőző payload type-okkal, akkor csak azok küzöl egyet küldhetünk vissza az answer-ben
            </summary>
            <param name="codecInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.MediaDescriptionHelper.Compare(Ozeki.VoIP.MediaDescription,Ozeki.VoIP.MediaDescription)">
            <summary>
            Compares the given media descriptions and gives a result about the compatibility. 
            </summary>
        </member>
        <member name="M:Ozeki.Media.AbstractMediaReceiver`2.OnDataReceived(System.Object,`0)">
            <summary>
            This will be called when media data received from a media handler.
            </summary>
            <param name="sender">The object that sent the media data.</param>
            <param name="data">The data with format information.</param>
        </member>
        <member name="M:Ozeki.Media.AbstractMediaReceiver`2.SetReceiveFormats(`1[])">
            <summary>
            Sets the audio formats that the audio handler can receive. If no audio format specified, all formats are supported.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AbstractMediaReceiver`2.ReceiveFormats">
            <summary>
            Gets a list of media formats that the media handler can handle. If no media format specified, all formats are supported.
            </summary>
        </member>
        <member name="E:Ozeki.Media.AbstractMediaReceiver`2.ReceiveFormatsChanged">
            <summary>
            Occurs when an item is added or removed from the <see cref="P:Ozeki.Media.AbstractMediaReceiver`2.ReceiveFormats"/> collection.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioHandler">
            <summary>
            Base class for audio handlers.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IAudioSender.ReceiverConnected(Ozeki.Media.IAudioReceiver)">
            <summary>
            This will be called when this object has been connected to an audio receiver.
            </summary>
            <param name="receiver">The audio receiver which this object is connected to.</param>
        </member>
        <member name="M:Ozeki.Media.IAudioSender.ReceiverDisconnected(Ozeki.Media.IAudioReceiver)">
            <summary>
            This will be called when this object has been disconnected from an audio receiver.
            </summary>
            <param name="receiver">The audio receiver which this object was connected to.</param>
        </member>
        <member name="M:Ozeki.Media.IAudioReceiver.SenderConnected(Ozeki.Media.IAudioSender)">
            <summary>
            This will be called when an audio sneder has been connected to this object.
            </summary>
            <param name="sender">The connected audio sender.</param>
        </member>
        <member name="M:Ozeki.Media.IAudioReceiver.SenderDisconnected(Ozeki.Media.IAudioSender)">
            <summary>
            This will be called when an audio sender has been disconnected from this object.
            </summary>
            <param name="sender">The disconnected audio sender.</param>
        </member>
        <member name="P:Ozeki.Media.IAudioReceiver.ConverterType">
            <summary>
            Gets or sets the type of the audio converter that will be used when resampling the sent audio data.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioHandler.OnDataReceived(System.Object,Ozeki.Media.AudioData)">
            <summary>
            This will be called when media data received from a media handler.
            </summary>
            <param name="sender">The object that sent the media data.</param>
            <param name="data">The data with format information.</param>
        </member>
        <member name="M:Ozeki.Media.AudioHandler.SendData(Ozeki.Media.AudioData)">
            <summary>
            Sends media data to the connected audio handlers.
            </summary>
            <param name="data">The data with format information.</param>
        </member>
        <member name="M:Ozeki.Media.AudioHandler.SetReceiveFormats(Ozeki.Media.AudioFormat[])">
            <summary>
            Sets the audio formats that the audio handler can receive. If no audio format specified, all formats are supported.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioHandler.SenderConnected(Ozeki.Media.IAudioSender)">
            <summary>
            This will be called when an audio sender has been connected to this object.
            </summary>
            <param name="sender">The connected audio sender.</param>
        </member>
        <member name="M:Ozeki.Media.AudioHandler.SenderDisconnected(Ozeki.Media.IAudioSender)">
            <summary>
            This will be called when an audio sender has been disconnected from this object.
            </summary>
            <param name="sender">The disconnected audio sender.</param>
        </member>
        <member name="M:Ozeki.Media.AudioHandler.ReceiverConnected(Ozeki.Media.IAudioReceiver)">
            <summary>
            This will be called when this object has been connected to an audio receiver.
            </summary>
            <param name="receiver">The audio receiver which this object is connected to.</param>
        </member>
        <member name="M:Ozeki.Media.AudioHandler.ReceiverDisconnected(Ozeki.Media.IAudioReceiver)">
            <summary>
            This will be called when this object has been disconnected from an audio receiver.
            </summary>
            <param name="receiver">The audio receiver which this object was connected to.</param>
        </member>
        <member name="E:Ozeki.Media.AudioHandler.MediaDataSent">
            <summary>
            Occurs when the audio data is ready to send.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioHandler.ReceiveFormats">
            <summary>
            Gets a list of audio formats that the audio handler can handle. If no audio format specified, all formats are supported.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioHandler.ConverterType">
            <summary>
            Gets or sets the type of the audio converter that will be used when resampling the sent audio data.
            </summary>
        </member>
        <member name="E:Ozeki.Media.AudioHandler.ReceiveFormatsChanged">
            <summary>
            Occurs when an item is added or removed from the <see cref="P:Ozeki.Media.AudioHandler.ReceiveFormats"/> collection.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioSender.ReceiverConnected(Ozeki.Media.IAudioReceiver)">
            <summary>
            This will be called when this object has been connected to an audio receiver.
            </summary>
            <param name="receiver">The audio receiver which this object is connected to.</param>
        </member>
        <member name="M:Ozeki.Media.AudioSender.ReceiverDisconnected(Ozeki.Media.IAudioReceiver)">
            <summary>
            This will be called when this object has been disconnected from an audio receiver.
            </summary>
            <param name="receiver">The audio receiver which this object was connected to.</param>
        </member>
        <member name="M:Ozeki.Media.VideoReceiver.SenderConnected(Ozeki.Media.IVideoSender)">
            <summary>
            This will be called when a video sneder has been connected to this object.
            </summary>
            <param name="sender">The connected video sender.</param>
        </member>
        <member name="M:Ozeki.Media.VideoReceiver.SenderDisconnected(Ozeki.Media.IVideoSender)">
            <summary>
            This will be called when a video sender has been disconnected from this object.
            </summary>
            <param name="sender">The disconnected video sender.</param>
        </member>
        <member name="T:Ozeki.Media.AcousticEchoCanceller">
            <summary>
            Can perform acoustic echo cancellation.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcousticEchoCanceller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AcousticEchoCanceller"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AcousticEchoCanceller.SetEchoSource(Ozeki.Media.IAudioSender)">
            <summary>
            Sets the source of the echo (usually the Speakers).
            </summary>
            <param name="handler">The media handler which from the echo comes.</param>
        </member>
        <member name="P:Ozeki.Media.AcousticEchoCanceller.Enabled">
            <summary>
            Gets or sets a boolean value indicating whether echo filtering is enabled.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AnswerMachineDetectionResult.Human">
            <summary>
            A person answered the call
            </summary>
        </member>
        <member name="F:Ozeki.Media.AnswerMachineDetectionResult.Machine">
            <summary>
            An answering machine answered the call
            </summary>
        </member>
        <member name="T:Ozeki.Media.AnswerMachineDetector">
            <summary>
            This class represents the methods that can determine if the call was answered by a person or an answering machine.
            The method uses the theory that a person answeres the call with some short words and then waits for
            the caller to introduce themselves, while the machine plays a relatively long prerecorded audio stream that
            has less silent periods between the words.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AnswerMachineDetector.#ctor">
            <summary>
            Creates a new instance of AnswerMachineDetector
            </summary>
        </member>
        <member name="M:Ozeki.Media.AnswerMachineDetector.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of AnswerMachineDetector
            </summary>
            <param name="maxGreetingTime">The maximum greeting time. Default value: 3000.</param>
            <param name="maxPauseTime">The maximum time of silence between two words. Default value: 600.</param>
            <param name="maxDelayTime">The maximum time of delay. Default value: 700.</param>
            <param name="timeout">The timeout of answering. Default value: 4000.</param>
        </member>
        <member name="M:Ozeki.Media.AnswerMachineDetector.Start">
            <summary>
            Starts the recognition.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AnswerMachineDetector.Stop">
            <summary>
            Stops the recognition.
            </summary>
        </member>
        <member name="E:Ozeki.Media.AnswerMachineDetector.DetectionCompleted">
            <summary>
            Occurs when the detection is completed.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioMixerMediaHandler">
            <summary>
            Mixes the received audio data and sends the mixed data to a connected media handler.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioMixerMediaHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioMixerMediaHandler"/> class with default AudioWaveFormat (8000 Hz, 16 bit, mono) and default packetization time (20ms).
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioMixerMediaHandler.#ctor(Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioMixerMediaHandler"/> class with default packetization time (20ms).
            </summary>
            <param name="waveFormat">The format of the mixed audio data.</param>
        </member>
        <member name="M:Ozeki.Media.AudioMixerMediaHandler.#ctor(Ozeki.Media.WaveFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioMixerMediaHandler"/> class.
            </summary>
            <param name="waveFormat">The format of the mixed audio data.</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.AudioMixerMediaHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Ozeki.Media.AudioMixerMediaHandler.EnableBuffering">
            <summary>
            Gets or sets a boolean value indicating whether the mixer drops old audio data packets. This can be set only before connecting the media handlers to it.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioQualityEnhancer">
            <summary>
            This class is for performing acoustic echo cancellation, noise reduction, automatic gain control.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioQualityEnhancer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioQualityEnhancer"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioQualityEnhancer.SetEchoSource(Ozeki.Media.Speaker)">
            <summary>
            Sets the source of the echo (usually the Speakers). An echo source must be set in order to work acoustic echo cancellation properly.
            </summary>
            <param name="handler">The media handler which from the echo comes.</param>
        </member>
        <member name="P:Ozeki.Media.AudioQualityEnhancer.AcousticEchoCancellation">
            <summary>
            Gets or sets a boolean value indicating whether the Acoustic Echo Cancellation is enabled.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioQualityEnhancer.EchoDelay">
            <summary>
            Gets or sets the delay of the acoustic echo (in milliseconds).
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioQualityEnhancer.AutoGainControl">
            <summary>
            Gets or sets a boolean value indicating whether the Auto Gain Control is enabled.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioQualityEnhancer.MaxGain">
            <summary>
            Gets or sets the maximal gain of the Auto Gain Control (in decibel).
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioQualityEnhancer.GainSpeed">
            <summary>
            Gets or sets the gain speed of the Auto Gain Control (in decibel).
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioQualityEnhancer.NoiseReductionLevel">
            <summary>
            Gets or sets the level of the noise filter.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioStreamPlayback">
            <summary>
            Can play audio from an audio file.
            </summary>
        </member>
        <member name="T:Ozeki.Media.TimerBasedMediaStreamHandler">
            <summary>
            Base class for timer based media stream handlers. Contains a built-in timer that ticks periodically when the interval has elapsed.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaStreamSender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:MediaStreamHandler"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaStreamSender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:MediaStreamHandler"/> class.
            </summary>
            <param name="filePath">The path of the media file.</param>
        </member>
        <member name="M:Ozeki.Media.MediaStreamSender.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="!:MediaStreamHandler"/> class.
            </summary>
            <param name="stream">The media stream.</param>
        </member>
        <member name="M:Ozeki.Media.MediaStreamSender.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.Media.MediaStreamSender.Pause">
            <summary>
            Pauses the streaming. (If the streaming is already paused then does nothing.)
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaStreamSender.Start">
            <summary>
            Starts the stream given in the Stream property. (If the stream is already started then does nothing.)
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaStreamSender.Stop">
            <summary>
            Stops the streaming.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaStreamSender.IsStreaming">
            <summary>
            Gets or sets a value that is true if the wave is streaming, otherwise false. 
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaStreamSender.Stream">
            <summary>
            Gets the stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaStreamSender.Position">
            <summary>
            Gets or sets the current position in the audio stream 
            </summary>
        </member>
        <member name="E:Ozeki.Media.MediaStreamSender.Stopped">
            <summary>
            Occurs when the audio recording or playing has been stopped
            </summary>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaStreamHandler.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.TimerBasedMediaStreamHandler"/> class.
            </summary>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaStreamHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.TimerBasedMediaStreamHandler"/> class.
            </summary>
            <param name="filePath">The path of the media file.</param>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaStreamHandler.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.TimerBasedMediaStreamHandler"/> class.
            </summary>
            <param name="filePath">The path of the media file.</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaStreamHandler.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.TimerBasedMediaStreamHandler"/> class.
            </summary>
            <param name="stream">The media stream.</param>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaStreamHandler.#ctor(System.IO.Stream,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.TimerBasedMediaStreamHandler"/> class.
            </summary>
            <param name="stream">The media stream.</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaStreamHandler.Start">
            <summary>
            Starts the stream given in the Stream property. (If the stream is already started then does nothing.)
            </summary>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaStreamHandler.Stop">
            <summary>
            Stops the streaming.
            </summary>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaStreamHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaStreamHandler.TimerTick(System.UInt32)">
            <summary>
            This will be called when the built-in timer ticks.
            </summary>
            <param name="timeStamp">Current system timestamp in milliseconds.</param>
        </member>
        <member name="P:Ozeki.Media.TimerBasedMediaStreamHandler.Interval">
            <summary>
            Gets the time between the send events (in milliseconds).
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.#ctor(Ozeki.Media.WaveFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamPlayback"/> class.
            </summary>
            <param name="format">The format of the audio stream</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioStreamPlayback"/> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioStreamPlayback"/> class with default packetization time (20ms)
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.#ctor(System.String,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioStreamPlayback"/> class
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioStreamPlayback"/> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
            <param name="stream">The stream</param>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioStreamPlayback"/> class with default packetization time (20ms).
            </summary>
            <param name="stream">The stream</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioStreamPlayback"/> class.
            </summary>
            <param name="stream">The stream</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.LoadReader(System.IO.Stream)">
            <summary>
            Initializes the file reader which will read the content of the stream. (This method will be invoked in the <see cref="M:Ozeki.Media.AudioStreamPlayback.LoadStream(System.IO.Stream)"/> method.)
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.TimerTick(System.UInt32)">
            <summary>
            This will be called when the built-in timer ticks.
            </summary>
            <param name="timeStamp">Current system timestamp in milliseconds.</param>
        </member>
        <member name="M:Ozeki.Media.AudioStreamPlayback.SetPlaybackWaveStream(Ozeki.Media.WaveFileStream)">
            <summary>
            Changes the playback stream to the given stream.
            </summary>
            <param name="reader">The input stream.</param>
        </member>
        <member name="P:Ozeki.Media.AudioStreamPlayback.Loop">
            <summary>
            A boolean value indicating whether the playback is repeated infinetly.
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioStreamPlayback.Cached">
            <summary>
            Gets a boolean value indicating whether the playback stream is cached in the memory.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MediaPacketType">
            <summary>
            Defines packet types for media data.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaPacketType.RTP">
            <summary>
            Standard RTP packet.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaPacketType.RTP_EVENT">
            <summary>
            RTP-Event (DTMF).
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaPacketType.H264">
            <summary>
            H264 packet.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaPacketType.MPEG4">
            <summary>
            MPEG4 packet.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaPacketType.Unknown">
            <summary>
            Unknown packet.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaPacketType.H263Plus">
            <summary>
            H263-1998 packet.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaPacketType.H263">
            <summary>
            H263 packet.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaPacketType.RTP_Dummy">
            <summary>
            Dummy RTP packet for test purposes.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CodecUtils.FilterAvailableCodecs(System.Collections.Generic.Dictionary{Ozeki.Common.OzTuple{Ozeki.Media.MediaType,System.Int32},Ozeki.Media.ICodec},System.Collections.Generic.Dictionary{Ozeki.Common.OzTuple{Ozeki.Media.MediaType,System.Int32,System.Int32},Ozeki.Media.CodecDescription})">
            <summary>
            </summary>
            <param name="localCodecs">Codec-ek a rendszerben, MediaType, Payload-al kulcsolva</param>
            <param name="remoteDescriptions">A távoldal lehetséges kodekjei, MediaType, Payload, RemotePort-al kulcsolva</param>
            <returns>Helyi kodekek a tevoli eleresekhez.</returns>
        </member>
        <member name="T:Ozeki.Media.VoIPEventArgs`1">
            <summary>
            Provides data for VoIP SIP SDK events to handle events with type parameters easily.
            </summary>
            <typeparam name="T">Type of the held object.</typeparam>
        </member>
        <member name="M:Ozeki.Media.VoIPEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VoIPEventArgs`1"/> class.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Ozeki.Media.VoIPEventArgs`1.Item">
            <summary>
            Gets the held item.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.AudioConferenceHandlers">
            <summary>
            Contains media handlers for audio conferencing.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ConferenceRoom">
            <summary>
            Class for audio conferencing.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.ConferenceRoom"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.AddToConference(Ozeki.VoIP.ICall)">
            <summary>
            Adds a phone call to the conference.
            </summary>
            <param name="call">The specified phone call object.</param>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.RemoveFromConference(Ozeki.VoIP.ICall)">
            <summary>
            Removes a phone call from the conference.
            </summary>
            <param name="call">The specified phone call object.</param>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.StartConferencing">
            <summary>
            Starts the previously added calls and begins the conferencing.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.StopConferencing">
            <summary>
            Hangs up all the phone calls and stops the conferencing. Both the phone calls and the media connections will be removed.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.ConnectSender(Ozeki.Media.IAudioSender)">
            <summary>
            Connects a media sender to the conference room.
            </summary>
            <param name="sender">The media sender.</param>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.DisconnectSender(Ozeki.Media.IAudioSender)">
            <summary>
            Disconnects a connected media sender from the conference room.
            </summary>
            <param name="sender">The media sender.</param>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.ConnectReceiver(Ozeki.Media.IAudioReceiver)">
            <summary>
            Connects a media receiver to the conference room.
            </summary>
            <param name="receiver">The media receiver.</param>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.DisconnectReceiver(Ozeki.Media.IAudioReceiver)">
            <summary>
            Disconnects a connected media receiver from the conference room.
            </summary>
            <param name="receiver">The media receiver.</param>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ConferenceRoom.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ConferenceRoom.CallConnected">
            <summary>
            Occurs when a call has connected to the conference room.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ConferenceRoom.CallDisconnected">
            <summary>
            Occurs when a call has disconnected from the conference room.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PhoneCallAudioReceiver">
            <summary>
            The media handler for receiving audio data from a call.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IPhoneCallAttachable">
            <summary>
            Defines methods to attach and detach the object to a <see cref="T:Ozeki.VoIP.ICall"/> object.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IPhoneCallAttachable.AttachToCall(Ozeki.VoIP.ICall)">
            <summary>
            Attaches the object to a <see cref="T:Ozeki.VoIP.ICall"/> object.
            </summary>
            <param name="call">The phone call object.</param>
        </member>
        <member name="M:Ozeki.VoIP.IPhoneCallAttachable.Detach">
            <summary>
            Detaches the object from the attached call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallAudioReceiver.#ctor">
            <summary>
            Initalizes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallAudioReceiver"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallAudioReceiver.AttachToCall(Ozeki.VoIP.ICall)">
            <summary>
            Attaches the object to a call so it can receive media data from that call.
            If the <see cref="T:Ozeki.VoIP.PhoneCallAudioReceiver"/> is already attached to an active call, it will be detached from it first.
            </summary>
            <param name="call">The call object to attach the listener.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallAudioReceiver.Detach">
            <summary>
            Detaches the object from the call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallAudioReceiver.DataReceivedFromCall(Ozeki.Media.MediaData)">
            <summary>
            Some data is received from the call
            </summary>
            <param name="mediaData">The media data that is received from the call</param>
        </member>
        <member name="T:Ozeki.VoIP.PhoneCallAudioSender">
            <summary>
            Can send audio data to the attached <see cref="T:Ozeki.VoIP.ICall"/> object.
            </summary>
            <remarks>
            Inherited from the <see cref="T:Ozeki.Media.AudioReceiver"/> class, so it can be connected to other <see cref="T:Ozeki.Media.AudioReceiver"/> objects.
            
            The class implements the <see cref="T:Ozeki.VoIP.IPhoneCallAttachable"/> interface so it can be attached to a <see cref="T:Ozeki.VoIP.ICall"/> object.
            When a <see cref="T:Ozeki.VoIP.PhoneCallAudioSender"/> is attached to an <see cref="T:Ozeki.VoIP.ICall"/> object, it will send the available audio data to the attached call.
            
            When a connected <see cref="T:Ozeki.Media.AudioReceiver"/> sends audio data to the <see cref="T:Ozeki.VoIP.PhoneCallAudioSender"/>, it will send it directly to the call.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallAudioSender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallAudioSender"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallAudioSender.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallAudioSender.AttachToCall(Ozeki.VoIP.ICall)">
            <summary>
            Attaches the object to a call and so it can send media data to the call.
            If the <see cref="T:Ozeki.VoIP.PhoneCallAudioSender"/> is already attached to a call, it will be detached from it first.
            </summary>
            <param name="call">The call object to attach the listener.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallAudioSender.Detach">
            <summary>
            Detaches the object from the currently active call.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PhoneCallStateWavePlayer">
            <summary>
            Plays arbitrary looped wave files when the attached call changes its state.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveStreamPlayback">
            <summary>
            Can play audio from a wave file.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveStreamPlayback.#ctor(Ozeki.Media.WaveFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamPlayback"/> class.
            </summary>
            <param name="format">The format of the audio stream</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamPlayback.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamPlayback"/> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamPlayback.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamPlayback"/> class with default packetization time (20ms)
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamPlayback.#ctor(System.String,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamPlayback"/> class
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamPlayback.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamPlayback"/> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
            <param name="stream">The stream</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamPlayback"/> class with default packetization time (20ms).
            </summary>
            <param name="stream">The stream</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamPlayback"/> class.
            </summary>
            <param name="stream">The stream</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamPlayback.LoadReader(System.IO.Stream)">
            <summary>
            Initializes the file reader which will read the content of the stream. (This method will be invoked in the <see cref="M:Ozeki.Media.AudioStreamPlayback.LoadStream(System.IO.Stream)"/> method.)
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallStateWavePlayer"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.#ctor(Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallStateWavePlayer"/> class.
            </summary>
            <param name="waveFormat"></param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.#ctor(Ozeki.Media.WaveFormat,System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallStateWavePlayer"/> class.
            </summary>
            <param name="waveFormat">The initial arbitrary media format.</param>
            <param name="outgoingCallStateMap">Wave file names for states of outgoing activeCall.</param>
            <param name="incomingCallStateMap">Wave file names for states of incoming activeCall.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.#ctor(Ozeki.VoIP.ICall,Ozeki.Media.WaveFormat,System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallStateWavePlayer"/> class and attaches to a call object.
            </summary>
            <param name="call">The given call object.</param>
            <param name="waveFormat">The initial arbitrary media format.</param>
            <param name="outgoingCallStateMap">Wave file names for states of outgoing call.</param>
            <param name="incomingCallStateMap">Wave file names for states of incoming call.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.#ctor(Ozeki.Media.WaveFormat,System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.IO.Stream},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.IO.Stream})">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallStateWavePlayer"/> class.
            </summary>
            <param name="waveFormat">The initial arbitrary media format.</param>
            <param name="outgoingCallStateMap">Wave streams for states of outgoing call.</param>
            <param name="incomingCallStateMap">Wave streams for states of incoming call.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.#ctor(Ozeki.VoIP.ICall,Ozeki.Media.WaveFormat,System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.IO.Stream},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.IO.Stream})">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallStateWavePlayer"/> class  and attaches to a call object.
            </summary>
            <param name="call">The given call object.</param>
            <param name="waveFormat">The initial arbitrary media format.</param>
            <param name="outgoingCallStateMap">Wave streams for states of outgoing call.</param>
            <param name="incomingCallStateMap">Wave streams for states of incoming call.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.SetStateStreams(System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String})">
            <summary>
            Sets files for the states of the activeCall.
            </summary>
            <param name="outgoingCallFileNames">Wave file names for states of outgoing activeCall.</param>
            <param name="incomingCallFileNames">Wave file names for states of incoming activeCall.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.UpdateIncomingStateStream(Ozeki.VoIP.CallState,System.String)">
            <summary>
            Updates one wave file name for the given state for the activeCall.
            </summary>
            <param name="state">The give state.</param>
            <param name="filepath">The new file path for the state.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.UpdateOutgoingStateStream(Ozeki.VoIP.CallState,System.String)">
            <summary>
            Updates one wave file name for the given state for the activeCall.
            </summary>
            <param name="state">The give state.</param>
            <param name="filepath">The new file path for the state.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.AttachToCall(Ozeki.VoIP.ICall)">
            <summary>
            Attaches this object to the given phone call.
            </summary>
            <param name="call">The given phone call.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallStateWavePlayer.Detach">
            <summary>
            Detaches the object from the attached call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneCallStateWavePlayer.Call">
            <summary>
            Gets or sets the attached call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneCallStateWavePlayer.HasActualCall">
            <summary>
            Gets a boolean value indicating whether the attached activeCall is not null.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PhoneCallVideoReceiver">
            <summary>
            The media handler for receiving video data from a remote party through a call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallVideoReceiver.#ctor">
            <summary>
            Initalizes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallVideoReceiver"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallVideoReceiver.AttachToCall(Ozeki.VoIP.ICall)">
            <summary>
            Attaches the object to a call so it can receive media data from that call.
            If the <see cref="T:Ozeki.VoIP.PhoneCallVideoReceiver"/> is already attached to an active call, it will be detached from it first.
            </summary>
            <param name="call">The call object to attach the listener.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallVideoReceiver.Detach">
            <summary>
            Detaches the object from the call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallVideoReceiver.UpdateSupportedVideoTypes">
            <summary>
            Updates the supported video types by getting the supported codecs of the call.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PhoneCallVideoSender">
            <summary>
            Can send video data to the attached <see cref="T:Ozeki.VoIP.ICall"/> object.
            </summary>
            <remarks>
            Inherited from the <see cref="T:Ozeki.Media.IVideoReceiver"/> class, so it can be connected to <see cref="T:Ozeki.Media.IVideoSender"/> objects.
            
            The class implements the <see cref="T:Ozeki.VoIP.IPhoneCallAttachable"/> interface so it can be attached to a <see cref="T:Ozeki.VoIP.ICall"/> object.
            When a <see cref="T:Ozeki.VoIP.PhoneCallVideoSender"/> is attached to an <see cref="T:Ozeki.VoIP.ICall"/> object, it will send the available video data to the attached call.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallVideoSender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.PhoneCallVideoSender"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallVideoSender.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallVideoSender.AttachToCall(Ozeki.VoIP.ICall)">
            <summary>
            Attaches the object to a call and so it can send media data to the call.
            If the <see cref="T:Ozeki.VoIP.PhoneCallAudioSender"/> is already attached to a call, it will be detached from it first.
            </summary>
            <param name="call">The call object to attach the listener.</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallVideoSender.Detach">
            <summary>
            Detaches the object from the currently active call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneCallVideoSender.GetFmtpParams(System.Collections.Generic.IEnumerable{Ozeki.Media.CodecDescription},Ozeki.Media.CodecPayloadType,System.String)">
            <summary>
            Az megadott codec-hez tartozó FMTP paramétereket szedi szét kulcs-érték párokra. A kulcsot uppercase-eli, hogy
            könnyebb legyen az eredmény kulcsai közt keresni.
            </summary>
            <param name="codecInfos">Az összes támogatott kodekhez tartozó információk, amiből majd felhasználjuk az FMTP-t.</param>
            <param name="codec">A kodek, amelynek az FMTP értékeit meg akarjuk kapni.</param>
            <returns>Visszaadja egy dictionary-ben az adott kodekhez tartozó FTMP paramétereket kulcs-érték párokként. Null-t ad vissza,
            ha az adott kodek nincs támogatva a megadott codecInfo alapján. Üres dictionary-t ad vissza, ha a codec támogatva van,
            de nincsenek megadott FMTP paraméterek.</returns>
        </member>
        <member name="T:Ozeki.VoIP.ContactIdEventQualifier">
            <summary>
            Types of alarm events
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ContactIdEventQualifier.NewEvent">
            <summary>
            New Event or Opening
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ContactIdEventQualifier.NewRestore">
            <summary>
            New Restore or Closing
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ContactIdEventQualifier.StatusReport">
            <summary>
            Previously reported condition still present (Status report)
            </summary>
        </member>
        <member name="T:Ozeki.Media.TimerBasedMediaHandler">
            <summary>
            Base class for timer based media handlers. Contains a built-in timer that ticks periodically when the interval has elapsed.
            </summary>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.TimerBasedMediaHandler"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaHandler.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.TimerBasedMediaHandler"/> class.
            </summary>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaHandler.TimerTick(System.UInt32)">
            <summary>
            This will be called when the built-in timer ticks.
            </summary>
            <param name="timeStamp">Current system timestamp in milliseconds.</param>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaHandler.StartTimer">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Ozeki.Media.TimerBasedMediaHandler.StopTimer">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="P:Ozeki.Media.TimerBasedMediaHandler.PacketizationTime">
            <summary>
            Gets the time between the send events (in milliseconds).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ContactIdHandler.Start">
            <summary>
            Starts sending or receiving Contact ID message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ContactIdHandler.Stop">
            <summary>
            Stops the Contact ID seding or receiving.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ContactIdHandler.SendNotification(System.Int32,Ozeki.VoIP.ContactIdEventQualifier,System.Int32,System.Int32,System.Int32)">
            <summary>
            Send the Contact ID message. When this method is called, the contactIdHandler will start for sending mode.
            </summary>
            <param name="accountNumber">4 digits Account number</param>
            <param name="eventQualifier">Types of alarm events: New Event, New Restore, Status report</param>
            <param name="eventCode">3 digits Event code, the type of the alarm (fire, burglar, etc.)</param>
            <param name="partitionNumber">Maximum 2 digits Group or Partition number. Use 0 to indicate that no specific group or partition information applies.</param>
            <param name="zoneNumber">Maximum 3 digits Zone number. Use 0 to indicate that no specific zone or user information applies </param>
            <returns>True if the value of the parameters are correct, otherwise it is false.</returns>
        </member>
        <member name="E:Ozeki.VoIP.ContactIdHandler.ContactIdSendSuccessful">
            <summary>
            The sending of the alarm has been successful.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ContactIdHandler.ContactIdSendFailed">
            <summary>
            The sending of the alarm (that is, the contact ID) is failed. For instance, the kissoff signal is not received.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ContactIdHandler.ReceivedNotification">
            <summary>
            A Contact ID alarm is received.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ContactIdMessageType">
            <summary>
            This 2- digit sequence is used to identify the Contact ID message to the receiver. It may be transmitted as either 18 (preferred) or 98 (optional).
            New receiver implementations shall accept either a 18 or a 98. Note that some older receivers may not accept 98 .
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ContactIdNotificationEventArg">
            <summary>
            This is an EventArgs which allows you to access the elements of Contact ID message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ContactIdNotificationEventArg.#ctor(System.Int32,Ozeki.VoIP.ContactIdMessageType,Ozeki.VoIP.ContactIdEventQualifier,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="accountNumber">4 digits Account number</param>
            <param name="messageType">Message Type. This 2- digit sequence is used to identify the Contact ID message to the receiver. It may be transmitted as either 18 (Preferred) or 98 (Optional).</param>
            <param name="eventQualifier">Types of alarm events: New Event, New Restore, Status report</param>
            <param name="eventCode">3 digits Event code, the type of the alarm (fire, burglar, etc.)</param>
            <param name="eventName">The event name</param>
            <param name="partitionNumber">Maximum 2 digits Group or Partition number. Use 0 to indicate that no specific group or partition information applies.</param>
            <param name="zoneNumber">Maximum 3 digits Zone number. Use 0 to indicate that no specific zone or user information applies </param>
        </member>
        <member name="M:Ozeki.VoIP.ContactIdNotificationEventArg.ToString">
            <summary>
            Returns the received Contact ID message (Account Number, Message Type, Event Qualifier, Event Code, Partition Number, Zone Number)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ContactIdNotificationEventArg.Equals(System.Object)">
            <summary>
            Compare all field of two ContactIdNotificationEventArg objects.
            </summary>
            <param name="obj">A ContactIdNotificationEventArg object</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.FrequencyToneDetector.Detect(System.Int32,System.Int32)">
            <summary>
            Detect a specified frequency
            </summary>
            <param name="frequency">What kind of frequencies you want to detect (how many Hz)</param> 
            <param name="timeout">How long to wait and try to detect the specified frequency</param>
        </member>
        <member name="E:Ozeki.Media.FrequencyToneDetector.FrequencyDetected">
            <summary>
            The detection of the frequency has been successful
            </summary>
        </member>
        <member name="E:Ozeki.Media.FrequencyToneDetector.FrequencyNotFound">
            <summary>
            The detection of the frequency is failed, for instance you can received another frequency, or nothing in the timeout
            </summary>
        </member>
        <member name="M:Ozeki.Media.FrequencyToneGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            Generate a specified frequency
            </summary>
            <param name="frequency">What kind of frequencies you want to generate (how many Hz)</param>
            <param name="duration">Specifies the lenght of that frequency</param>
        </member>
        <member name="M:Ozeki.Media.FrequencyToneGenerator.Start">
            <summary>
            Starts the generation
            </summary>
        </member>
        <member name="M:Ozeki.Media.FrequencyToneGenerator.Stop">
            <summary>
            Stops the generation
            </summary>
        </member>
        <member name="T:Ozeki.Media.GainControl">
            <summary>
            If the sound is low or very high, then you need to use this class to regulate the level of sound.
            </summary>
        </member>
        <member name="M:Ozeki.Media.GainControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.GainControl"/> class.
            </summary>
        </member>
        <member name="P:Ozeki.Media.GainControl.Decibel">
            <summary>
            Additional decibels.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaStreamReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:MediaStreamHandler"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaStreamReceiver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:MediaStreamHandler"/> class.
            </summary>
            <param name="filePath">The path of the media file.</param>
        </member>
        <member name="M:Ozeki.Media.MediaStreamReceiver.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="!:MediaStreamHandler"/> class.
            </summary>
            <param name="stream">The media stream.</param>
        </member>
        <member name="M:Ozeki.Media.MediaStreamReceiver.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.Media.MediaStreamReceiver.Pause">
            <summary>
            Pauses the streaming. (If the streaming is already paused then does nothing.)
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaStreamReceiver.Start">
            <summary>
            Starts the stream given in the Stream property. (If the stream is already started then does nothing.)
            </summary>
        </member>
        <member name="M:Ozeki.Media.MediaStreamReceiver.Stop">
            <summary>
            Stops the streaming.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaStreamReceiver.IsStreaming">
            <summary>
            Gets or sets a value that is true if the wave is streaming, otherwise false. 
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaStreamReceiver.Stream">
            <summary>
            Gets the stream
            </summary>
        </member>
        <member name="P:Ozeki.Media.MediaStreamReceiver.Position">
            <summary>
            Gets or sets the current position in the audio stream 
            </summary>
        </member>
        <member name="E:Ozeki.Media.MediaStreamReceiver.Stopped">
            <summary>
            Occurs when the audio recording or playing has been stopped
            </summary>
        </member>
        <member name="T:Ozeki.Media.Microphone">
            <summary>
            Class for capturing audio data with microphone.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Microphone.#ctor(Ozeki.Media.DeviceInfo,Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Microphone"/> class.
            </summary>
            <param name="deviceInfo"></param>
            <param name="format">The format of the captured data.</param>
        </member>
        <member name="M:Ozeki.Media.Microphone.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.Media.Microphone.Start">
            <summary>
            Starts microphone audio capture.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Microphone.Stop">
            <summary>
            Stops microphone audio capture.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Microphone.GetDevices">
            <summary>
            Retrieves the available capturing devices.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Microphone.GetDevice(Ozeki.Media.DeviceInfo)">
            <summary>
            Retreives the specified microphone device.
            </summary>
            <param name="info">Information about the microphone device.</param>
            <returns>The microphone object.</returns>
        </member>
        <member name="M:Ozeki.Media.Microphone.GetDefaultDevice">
            <summary>
            Retreives the default microphone device.
            </summary>
            <returns>The default microphone device or null if no microphones found.</returns>
        </member>
        <member name="M:Ozeki.Media.Microphone.GetDevicesCount">
            <summary>
            Retreives the number of available capturing devices.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Microphone.DisposeDevices">
            <summary>
            Disposes the previously created and not disposed devices.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Microphone.ChangeFormat(Ozeki.Media.WaveFormat)">
            <summary>
            Changes the recording format of the device.
            </summary>
            <param name="waveFormat">The specified audio format.</param>
        </member>
        <member name="E:Ozeki.Media.Microphone.LevelChanged">
            <summary>
            Occurs when the microphone level has changed.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Microphone.MediaFormat">
            <summary>
            Gets the current audio format of the microphone.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Microphone.DeviceInfo">
            <summary>
            Gets the product information of the microphone device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Microphone.Initialized">
            <summary>
            Returns a boolean value indicating whether the selected microphone device is ready for capturing.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Microphone.State">
            <summary>
            Gets the state of the microphone.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Microphone.Volume">
            <summary>
            Gets or sets the volume of the microphone. (Range: 0-1)
            If the value is -1, the volume of the selected device is fixed and cannot be changed.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Microphone.Level">
            <summary>
            Gets the level of the microphone input. (Range: 0-100)
            </summary>
        </member>
        <member name="P:Ozeki.Media.Microphone.Muted">
            <summary>
            Gets or sets a boolean value indicating whether the microphone is muted.
            </summary>
        </member>
        <member name="E:Ozeki.Media.Microphone.Stopped">
            <summary>
            Occurs when the microphone stopped capturing.
            </summary>
        </member>
        <member name="T:Ozeki.Media.MP3StreamPlayback">
            <summary>
            Can play audio from an MP3 file.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MP3StreamPlayback.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamPlayback"/> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamPlayback.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamPlayback"/> class with default packetization time (20ms)
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamPlayback.#ctor(System.String,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamPlayback"/> class
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamPlayback.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamPlayback"/> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
            <param name="stream">The stream</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamPlayback"/> class with default packetization time (20ms).
            </summary>
            <param name="stream">The stream</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamPlayback"/> class.
            </summary>
            <param name="stream">The stream</param>
            <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
            <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
            <param name="packetizationTime">The time between the send events (in milliseconds).</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamPlayback.LoadReader(System.IO.Stream)">
            <summary>
            Initializes the file reader which will read the content of the stream. (This method will be invoked in the <see cref="M:Ozeki.Media.AudioStreamPlayback.LoadStream(System.IO.Stream)"/> method.)
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamRecorder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamRecorder"/> class with default MediaFormat (8000 kHz, 16 bit, 1 channel)
            </summary>
            <param name="filePath">The path of the media file. If the file already exists it will be overwritten.</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamRecorder.#ctor(System.String,Ozeki.Media.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamRecorder"/> class
            </summary>
            <param name="filePath">The path of the media file. If the file already exists it will be overwritten.</param>
            <param name="audioFormat">The format of the recorded data.</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamRecorder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamRecorder"/> class with default MediaFormat (16000 kHz, 16 bit, 1 channel)
            </summary>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamRecorder.#ctor(System.IO.Stream,Ozeki.Media.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamRecorder"/> class
            </summary>
            <param name="stream">The output stream.</param>
            <param name="audioFormat">The format of the recorded data.</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamRecorder.#ctor(System.String,Ozeki.Media.AudioFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamRecorder"/> class
            </summary>
            <param name="filePath">The path of the media file. If the file already exists it will be overwritten.</param>
            <param name="audioFormat">The format of the recorded data.</param>
            <param name="mpegBitRate">Bit rate of the mpeg.</param>
        </member>
        <member name="M:Ozeki.Media.MP3StreamRecorder.#ctor(System.IO.Stream,Ozeki.Media.AudioFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MP3StreamRecorder"/> class
            </summary>
            <param name="stream">The output stream.</param>
            <param name="audioFormat">The format of the recorded data.</param>
            <param name="mpegBitRate">Bit rate of the mpeg.</param>
        </member>
        <member name="E:Ozeki.Media.MP3StreamRecorder.Stopped">
            <summary>
            Occurs when the audio recording or playing has been stopped
            </summary>
        </member>
        <member name="T:Ozeki.Media.RawRecorder">
            <summary>
            Records the raw PCM data.
            </summary>
        </member>
        <member name="M:Ozeki.Media.RawRecorder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.RawRecorder"/> class.
            </summary>
            <param name="path">The path of the audio file</param>
        </member>
        <member name="M:Ozeki.Media.RawRecorder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.RawRecorder"/> class.
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Ozeki.Media.RawRecorder.#ctor(System.IO.Stream,Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.RawRecorder"/> class.
            </summary>
            <param name="stream">The output stream</param>
            <param name="format">The format of the audio stream</param>
        </member>
        <member name="T:Ozeki.Media.RawStreamPlayback">
            <summary>
            Can play raw audio files.
            </summary>
        </member>
        <member name="M:Ozeki.Media.RawStreamPlayback.#ctor(System.String,Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.RawStreamPlayback"/> class.
            </summary>
            <param name="audioFilePath">The path of the playback audio file</param>
            <param name="format">The format of the audio data</param>
        </member>
        <member name="M:Ozeki.Media.RawStreamPlayback.#ctor(System.IO.Stream,Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.RawStreamPlayback"/> class.
            </summary>
            <param name="stream">The input stream</param>
            <param name="format">The format of the audio data</param>
        </member>
        <member name="T:Ozeki.Media.Speaker">
            <summary>
            Class for playing audio through speakers.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Speaker.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.Media.Speaker.Start">
            <summary>
            Starts playing the audio from the speaker.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Speaker.Stop">
            <summary>
            Stops the playing.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDevices">
            <summary>
            Retrieves the available playback devices.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDevices(Ozeki.Media.AudioApi)">
            <summary>
            Retrieves the available playback devices.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDevice(Ozeki.Media.DeviceInfo)">
            <summary>
            Retrieves the specified playback device.
            </summary>
            <param name="info">Information about the speaker device.</param>
            <returns>The speaker object.</returns>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDevice(Ozeki.Media.DeviceInfo,Ozeki.Media.AudioApi)">
            <summary>
            Retrieves the specified playback device.
            </summary>
            <param name="info">Information about the speaker device.</param>
            <returns>The speaker object.</returns>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDevice(Ozeki.Media.DeviceInfo,Ozeki.Media.WaveformParams)">
            <summary>
            Retrieves the specified playback device.
            </summary>
            <param name="info">Information about the speaker device.</param>
            <param name="waveformParams">Parameters for the speaker.</param>
            <returns>The speaker object.</returns>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDevice(Ozeki.Media.DeviceInfo,Ozeki.Media.AudioApi,Ozeki.Media.WaveformParams)">
            <summary>
            Retrieves the specified playback device.
            </summary>
            <param name="info">Information about the speaker device.</param>
            <returns>The speaker object.</returns>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDefaultDevice">
            <summary>
            Retrieves the default playback device.
            </summary>
            <returns>The default playback device or null if no speakers found.</returns>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDefaultDevice(Ozeki.Media.AudioFormat)">
            <summary>
            Retrieves the default playback device with desired format.
            </summary>
            <param name="format"></param>
            <returns>The default playback device or null if no speakers found.</returns>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDefaultDevice(Ozeki.Media.AudioApi)">
            <summary>
            Retrieves the default playback device.
            </summary>
            <returns>The default playback device or null if no speakers found.</returns>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDefaultDevice(Ozeki.Media.WaveformParams)">
            <summary>
            Retrieves the default playback device.
            </summary>
            <param name="waveformParams">Parameters for the speaker.</param>
            <returns>The default playback device or null if no speakers found.</returns>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDefaultDevice(Ozeki.Media.AudioApi,Ozeki.Media.WaveformParams)">
            <summary>
            Retrieves the default playback device.
            </summary>
            <param name="waveformParams">Parameters for the speaker.</param>
            <returns>The default playback device or null if no speakers found.</returns>
        </member>
        <member name="M:Ozeki.Media.Speaker.GetDevicesCount">
            <summary>
            Retrieves the number of available playback devices.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Speaker.DisposeDevices">
            <summary>
            Disposes the previously created and not disposed devices.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Speaker.ChangeFormat(Ozeki.Media.WaveFormat)">
            <summary>
            Changes the playback format of the device.
            </summary>
            <param name="waveFormat">The specified audio format.</param>
        </member>
        <member name="E:Ozeki.Media.Speaker.LevelChanged">
            <summary>
            Occurs when the speaker level has changed.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Speaker.MediaFormat">
            <summary>
            Gets the current audio format of the speaker.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Speaker.DeviceInfo">
            <summary>
            Gets the product information of the speaker device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Speaker.Initialized">
            <summary>
            Returns a boolean value indicating whether the selected speaker device is ready.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Speaker.State">
            <summary>
            Gets the state of the playback device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Speaker.Volume">
            <summary>
            Gets or sets the volume of the speaker. (Range: 0-1)
            </summary>
        </member>
        <member name="P:Ozeki.Media.Speaker.Level">
            <summary>
            Gets the level of the speaker output. (Range: 0-100)
            </summary>
        </member>
        <member name="P:Ozeki.Media.Speaker.Muted">
            <summary>
            Gets or sets a boolean value indicating whether the speaker is muted.
            </summary>
        </member>
        <member name="E:Ozeki.Media.Speaker.Stopped">
            <summary>
            Occurs when the speaker stopped playing.
            </summary>
        </member>
        <member name="T:Ozeki.Media.DefaultSpeechToText">
            <summary>
            The default speech-to-text engine installed on the system.
            </summary>
        </member>
        <member name="T:Ozeki.Media.ISpeechToText">
            <summary>
            Interface for speech-to-text engine.
            </summary>
        </member>
        <member name="M:Ozeki.Media.ISpeechToText.Init(Ozeki.Media.AudioFormat,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes the speech engine with the specified audio format.
            </summary>
            <param name="audioFormat">The format of the audio stream.</param>
            <param name="choices">The words that can be recognized.</param>
        </member>
        <member name="M:Ozeki.Media.ISpeechToText.StartRecognition(System.IO.Stream)">
            <summary>
            Starts recognizing the words.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:Ozeki.Media.ISpeechToText.StopRecognition">
            <summary>
            Stops the recognition process.
            </summary>
        </member>
        <member name="M:Ozeki.Media.ISpeechToText.GetRecognizers">
            <summary>
            Retrieves the available speech recognizers.
            </summary>
        </member>
        <member name="M:Ozeki.Media.ISpeechToText.ChangeRecognizer(System.String)">
            <summary>
            Changes the language of the recognizer in the speech-to-text engine.
            </summary>
            <param name="recognizerID">The ID of the recognizer</param>
            <returns>True, if successfully changed.</returns>
        </member>
        <member name="M:Ozeki.Media.ISpeechToText.Dispose">
            <summary>
            Disposes the speech-to-text engine.
            </summary>
        </member>
        <member name="P:Ozeki.Media.ISpeechToText.Name">
            <summary>
            Gets the name of the speech-to-text engine.
            </summary>
        </member>
        <member name="P:Ozeki.Media.ISpeechToText.RecognizerInfo">
            <summary>
            Gets the information about of the selected recognizer.
            </summary>
        </member>
        <member name="P:Ozeki.Media.ISpeechToText.Initialized">
            <summary>
            Gets a boolean value indicating whether the speech engine initialized successfully.
            </summary>
        </member>
        <member name="E:Ozeki.Media.ISpeechToText.WordRecognized">
            <summary>
            Occurs when some words are recognized from the audio stream.
            </summary>
        </member>
        <member name="E:Ozeki.Media.ISpeechToText.WordHypothesized">
            <summary>
            Occurs when some words are recognized hypothetically from the audio stream.
            </summary>
        </member>
        <member name="E:Ozeki.Media.ISpeechToText.SpeechDetected">
            <summary>
            Occurs when speech is detected from the audio stream.
            </summary>
        </member>
        <member name="E:Ozeki.Media.ISpeechToText.RecognitionCompleted">
            <summary>
            Occurs when the speech engine finished processing one segment of the audio.
            </summary>
        </member>
        <member name="T:Ozeki.Media.ITextToSpeech">
            <summary>
            Interface for text-to-speech engine.
            </summary>
        </member>
        <member name="M:Ozeki.Media.ITextToSpeech.GetAvailableVoices">
            <summary>
            Retrieves the installed TTS voices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.ITextToSpeech.ChangeVoice(System.String)">
            <summary>
            Changes the voice of the TTS engine.
            </summary>
            <param name="voice">The name of the given TTS voice</param>
        </member>
        <member name="M:Ozeki.Media.ITextToSpeech.ChangeLanguage(System.String)">
            <summary>
            Changes the language of the TTS engine.
            </summary>
            <param name="language">The language of the given TTS voice</param>
        </member>
        <member name="M:Ozeki.Media.ITextToSpeech.ChangeLanguage(System.String,System.String)">
            <summary>
            Changes the language of the TTS engine.
            </summary>
            <param name="language">The language of the given TTS voice</param>
            <param name="voice">The name of the given TTS voice</param>
        </member>
        <member name="M:Ozeki.Media.ITextToSpeech.Speak(System.String)">
            <summary>
            Synchronously speaks the input text into a stream.
            </summary>
            <param name="text">The input text</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.ITextToSpeech.Dispose">
            <summary>
            Disposes the TTS engine.
            </summary>
        </member>
        <member name="P:Ozeki.Media.ITextToSpeech.Name">
            <summary>
            Gets the name of the TTS engine.
            </summary>
        </member>
        <member name="P:Ozeki.Media.ITextToSpeech.Rate">
            <summary>
            Gets or sets the playback rate of the readout.
            </summary>
        </member>
        <member name="P:Ozeki.Media.ITextToSpeech.Voice">
            <summary>
            Gets or sets the current voice of the TTS.
            </summary>
        </member>
        <member name="P:Ozeki.Media.ITextToSpeech.Format">
            <summary>
            Gets or sets the format of the output audio.
            </summary>
        </member>
        <member name="M:Ozeki.Media.DefaultTextToSpeech.#ctor(Ozeki.Media.AudioFormat)">
            <summary>
            Initializes a text to speech engine with given media format.
            </summary>
            <param name="mediaFormat">The media format of the playback.</param>
        </member>
        <member name="M:Ozeki.Media.DefaultTextToSpeech.Speak(System.String)">
            <summary>
            Creates a new stream that includes the spoken audio made by the Speech engine.
            </summary>
        </member>
        <member name="M:Ozeki.Media.DefaultTextToSpeech.GetAvailableVoices">
            <summary>
            Returns the collection of available Text-To-Speech voice.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.DefaultTextToSpeech.ChangeLanguage(System.String,System.String)">
            <summary>
            Changes the voice of the Text-To-Speech engine.
            </summary>
            <param name="language">The language of the given TTS voice.</param>
            <param name="name">The name of the given TTS voice.</param>
        </member>
        <member name="P:Ozeki.Media.DefaultTextToSpeech.Rate">
            <summary>
            Gets or sets the playback rate of the speech. (Range: -10 - 10)
            </summary>
        </member>
        <member name="T:Ozeki.Media.SpeechRecognizerInfo">
            <summary>
            Contains information about a speech recognizer.
            </summary>
        </member>
        <member name="M:Ozeki.Media.SpeechRecognizerInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.SpeechRecognizerInfo"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.SpeechRecognizerInfo.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.SpeechRecognizerInfo"/> class.
            </summary>
            <param name="id">The ID of the recognizer.</param>
            <param name="name">The name of the recognizer.</param>
            <param name="culture">The culture of the recognizer.</param>
        </member>
        <member name="P:Ozeki.Media.SpeechRecognizerInfo.ID">
            <summary>
            Gets or sets the identifier of the recognizer.
            </summary>
        </member>
        <member name="P:Ozeki.Media.SpeechRecognizerInfo.Name">
            <summary>
            Gets or sets the name of the recognizer.
            </summary>
        </member>
        <member name="P:Ozeki.Media.SpeechRecognizerInfo.Culture">
            <summary>
            Gets or sets the culture of the recognizer.
            </summary>
        </member>
        <member name="P:Ozeki.Media.SpeechRecognizerInfo.SupportedAudioFormats">
            <summary>
            Gets the audio formats supported by the recognizer.
            </summary>
        </member>
        <member name="T:Ozeki.Media.SpeechToText">
            <summary>
            Base class for Speech-to-text.
            </summary>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.#ctor(Ozeki.Media.AudioFormat,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a speech recognizer and STT instance.
            </summary>
            <param name="audioFormat">Media format the the audio stream.</param>
            <param name="choices">Words to recognize.</param>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a speech recognizer and STT instance.
            </summary>
            <param name="choices">Words to recognize.</param>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.CreateInstance">
            <summary>
            Initializes a speech recognizer and STT instance with voice activity detection.
            </summary>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.CreateInstance(Ozeki.Media.AudioFormat)">
            <summary>
            Initializes a speech recognizer and STT instance with voice activity detection.
            </summary>
            <param name="audioFormat">Media format of the audio stream.</param>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.CreateInstance(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a speech recognizer and STT instance.
            </summary>
            <param name="choices">Words to recognize.</param>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.CreateInstance(System.Collections.Generic.IEnumerable{System.String},Ozeki.Media.WordDetectionMode)">
            <summary>
            Initializes a speech recognizer and STT instance.
            </summary>
            <param name="choices">Words to recognize.</param>
            <param name="mode">The recognition mode for word detection</param>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.CreateInstance(Ozeki.Media.AudioFormat,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a speech recognizer and STT instance.
            </summary>
            <param name="audioFormat">Media format of the audio stream.</param>
            <param name="choices">Words to recognize.</param>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.CreateInstance(Ozeki.Media.AudioFormat,System.Collections.Generic.IEnumerable{System.String},Ozeki.Media.WordDetectionMode)">
            <summary>
            Initializes a speech recognizer and STT instance.
            </summary>
            <param name="audioFormat">Media format of the audio stream.</param>
            <param name="choices">Words to recognize.</param>
            <param name="mode">The recognition mode for word detection</param>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.GetRecognizers">
            <summary>
            Retrieves the available speech recognizers.
            </summary>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.ChangeRecognizer(System.String)">
            <summary>
            Changes the language of the recognizer in the speech-to-text engine.
            </summary>
            <param name="recognizerID">The ID of the recognizer</param>
            <returns>True, if successfully changed.</returns>
        </member>
        <member name="M:Ozeki.Media.SpeechToText.Reset">
            <summary>
            Resets the state of the speech-to-text.
            </summary>
        </member>
        <member name="P:Ozeki.Media.SpeechToText.SpeechEngine">
            <summary>
            Gets the underlying speech-to-text engine that will be used for word detection.
            </summary>
        </member>
        <member name="P:Ozeki.Media.SpeechToText.Choices">
            <summary>
            Gets the words that can be recognized by the speech engine.
            </summary>
        </member>
        <member name="E:Ozeki.Media.SpeechToText.WordRecognized">
            <summary>
            Occurs when some words are recognized from the audio stream.
            </summary>
        </member>
        <member name="E:Ozeki.Media.SpeechToText.WordHypothesized">
            <summary>
            Occurs when some words are recognized hypothetically from the audio stream.
            </summary>
        </member>
        <member name="E:Ozeki.Media.SpeechToText.SpeechDetected">
            <summary>
            Occurs when speech is detected from the audio stream.
            </summary>
        </member>
        <member name="T:Ozeki.Media.SpeechToTextContinuous">
            <summary>
            Can recognize words from an audio stream. The engine detects words real-time, but the detection is a bit inacurate.
            </summary>
        </member>
        <member name="P:Ozeki.Media.SpeechToTextContinuous.MinAudioSegmentLength">
            <summary>
            Gets the minimum length of an audio segment. That segment will be used by the STT engine when detecting words (in milliseconds).
            </summary>
        </member>
        <member name="P:Ozeki.Media.SpeechToTextContinuous.MaxAudioSegmentLength">
            <summary>
            Gets the maximum length of an audio segment. That segment will be used bye the STT engine when detecting words (in milliseconds).
            </summary>
            <remarks>In order to detect longer words, the value of the this property have to be larger.</remarks>
            <example>To detect the word 'information' the value must be set between 1220 and 1420</example>
        </member>
        <member name="T:Ozeki.Media.SpeechToTextVAD">
            <summary>
            Can recognize words from an audio stream. The engine uses VAD for word detection.
            </summary>
        </member>
        <member name="P:Ozeki.Media.SpeechToTextVAD.SilenceLength">
            <summary>
            Gets the length of silence between sentences (in milliseconds);
            </summary>
        </member>
        <member name="T:Ozeki.Media.TextToSpeech">
            <summary>
            Can convert text input to audio data.
            </summary>
            <remarks>
            The text inputs will be placed in a queue.  Only one text is being played at a time and when it is finished the next text will be played.
            Custom text-to-speech implementation can be added to the engine.
            </remarks>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.AddTTSEngine(Ozeki.Media.ITextToSpeech)">
            <summary>
            
            </summary>
            <param name="ttsEngine"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.AddText(System.String)">
            <summary>
            Adds text to the waiting queue.
            </summary>
            <param name="text">The text to read.</param>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.AddAndStartText(System.String)">
            <summary>
            Adds a text to the waiting queue and begins the playing with the first text in the queue.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.NextText">
            <summary>
            Skips the actual text and begins playing the next text.
            </summary>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.GetAvailableVoices">
            <summary>
            Returns the collection of available Text-To-Speech voice.
            </summary>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.ChangeVoice(System.String)">
            <summary>
            Changes the voice of the TTS engine.
            </summary>
            <param name="name">The name of the given TTS voice</param>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.ChangeLanguage(System.String)">
            <summary>
            Changes the language of the TTS engine.
            </summary>
            <param name="language">The language of the given TTS voice</param>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.ChangeLanguage(System.String,System.String)">
            <summary>
            Changes the language of the TTS engine.
            </summary>
            <param name="language">The language of the given TTS voice</param>
            <param name="name">The name of the given TTS voice</param>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.Start">
            <summary>
            Starts playing the queue.
            </summary>
        </member>
        <member name="M:Ozeki.Media.TextToSpeech.Clear">
            <summary>
            Clears the input queue.
            </summary>
        </member>
        <member name="P:Ozeki.Media.TextToSpeech.Rate">
            <summary>
            Gets or sets the playback rate of the speech. (Range: -10 - 10)
            </summary>
        </member>
        <member name="T:Ozeki.Media.WordDetectionMode">
            <summary>
            Specifies detection modes for speech-to-text engine.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WordDetectionMode.VAD">
            <summary>
            Using Voice Activity Detection for word detection. Can detect individual words better.
            </summary>
        </member>
        <member name="F:Ozeki.Media.WordDetectionMode.Continuous">
            <summary>
            Detects words in continuous speech better, but can provide a bit inaccurate results too.
            </summary>
        </member>
        <member name="T:Ozeki.Media.StereoMixer">
            <summary>
            MediaHandler, which is able to create stereo audio from two different audio sources.
            </summary>
        </member>
        <member name="M:Ozeki.Media.StereoMixer.#ctor">
            <summary>
            Creates a new StereoMixer instance, which is able to create stereo audio from two different audio sources.
            </summary>
        </member>
        <member name="M:Ozeki.Media.StereoMixer.#ctor(Ozeki.Media.AudioFormat)">
            <summary>
            Creates a new StereoMixer instance, which is able to create stereo audio from two different audio sources.
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Ozeki.Media.StereoMixer.LeftChannel">
            <summary>
            Represents the Left channel of the stereo.
            </summary>
        </member>
        <member name="P:Ozeki.Media.StereoMixer.RightChannel">
            <summary>
            Represents the Right channel of the stereo.
            </summary>
        </member>
        <member name="T:Ozeki.Media.VADFilter">
            <summary>
            Class for filtering silence in the received media data.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VADFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VADFilter"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VADFilter.Dispose(System.Boolean)">
            <summary>
            This will be called when media data received from a media handler.
            </summary>
            <param name="sender">The object that sent the media data.</param>
            <param name="e">The data with format information.</param>
        </member>
        <member name="P:Ozeki.Media.VADFilter.ActivationLevel">
            <summary>
            Gets or sets the additional level of the voice activity detection in dB.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VADFilter.Enabled">
            <summary>
            Indicates whether the filter is turned on
            </summary>
        </member>
        <member name="E:Ozeki.Media.VADFilter.VoiceDetected">
            <summary>
            Indicates whether the speech is detected in the received media data.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AnaglyphAlgorithm">
            <summary>
            Represents the stereoscopic effect type for 3D video streaming.
            </summary>
        </member>
        <member name="F:Ozeki.Media.AnaglyphAlgorithm.TrueAnaglyph">
            <summary>
            True (red-blue) anaglyph algorithm
            </summary>
        </member>
        <member name="F:Ozeki.Media.AnaglyphAlgorithm.GrayAnaglyph">
            <summary>
            Gray anaglyph algorithm
            </summary>
        </member>
        <member name="F:Ozeki.Media.AnaglyphAlgorithm.ColorAnaglyph">
            <summary>
            Full color anaglyph algorithm
            </summary>
        </member>
        <member name="F:Ozeki.Media.AnaglyphAlgorithm.HalfColorAnaglyph">
            <summary>
            Half color anaglyph algorithm
            </summary>
        </member>
        <member name="F:Ozeki.Media.AnaglyphAlgorithm.OptimizedAnaglyph">
            <summary>
            Optimized anaglyph algorithm
            </summary>
        </member>
        <member name="T:Ozeki.Media.AnaglyphVideoHandler">
            <summary>
            MediaHandler class for stereoscopic 3D video handling
            </summary>
        </member>
        <member name="M:Ozeki.Media.AnaglyphVideoHandler.#ctor">
            <summary>
            Creates a new instance of the AnaglyphVideoHandler class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AnaglyphVideoHandler.#ctor(Ozeki.Media.AnaglyphAlgorithm)">
            <summary>
            Creates a new instance of the AnaglyphVideoHandler class.
            </summary>
            <param name="algorithm">The AnaglyphAlgorithm type used for creating the stereoscopic video frames</param>
        </member>
        <member name="P:Ozeki.Media.AnaglyphVideoHandler.VideoSource1">
            <summary>
            Gets the first VideoHandler for the stereoscopic 3D video 
            </summary>
        </member>
        <member name="P:Ozeki.Media.AnaglyphVideoHandler.VideoSource2">
            <summary>
            Gets the second VideoHandler for the stereoscopic 3D video
            </summary>
        </member>
        <member name="P:Ozeki.Media.AnaglyphVideoHandler.Algorithm">
            <summary>
            Gets and sets the AnaglyphAlgorithm type for the stereoscopic 3D video creation
            </summary>
        </member>
        <member name="T:Ozeki.Media.MdatFile">
            <summary>
            Adatblokkokat tartalmazó fájl, melynek szerkezete int32|adat|int32|adat..., ahol int az azt követő adatrész hossza.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioPlayer.TimerTick(System.UInt32)">
            <summary>
            This will be called when the built-in timer ticks.
            </summary>
            <param name="sender">The timer object.</param>
            <param name="e">Timer arguments.</param>
        </member>
        <member name="M:Ozeki.Media.AudioPlayer.Start">
            <summary>
            Starts the media.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioPlayer.Pause">
            <summary>
            Pauses the media.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioPlayer.Stop">
            <summary>
            Stops the media.
            </summary>
        </member>
        <member name="T:Ozeki.Media.AVPlayer">
            <summary>
            Can play audio and video from an mp4, avi file.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AVPlayer.#ctor(System.String,System.Collections.Generic.List{Ozeki.Media.AudioFormat},Ozeki.Media.AudioConverterType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AVPlayer"/> class
            The stream will not be cached and will be played only once.
            </summary>
            <param name="filePath">The path of the playback audio file</param>
        </member>
        <member name="F:Ozeki.Media.AVPlayer._isStarted">
            <summary>
            Starts the media.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AVPlayer.Stop">
            <summary>
            Stops the media.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AVPlayer.Pause">
            <summary>
            Pauses the media.
            </summary>
        </member>
        <member name="M:Ozeki.Media.AVPlayer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ozeki.Media.AVPlayer.VideoChannel">
            <summary>
            Gets the video player object
            </summary>
        </member>
        <member name="P:Ozeki.Media.AVPlayer.AudioChannel">
            <summary>
            Gets the Audio player object
            </summary>
        </member>
        <member name="T:Ozeki.Media.DrawingImageProvider">
            <summary>
            Creates a <see cref="T:System.Drawing.Image"/> object from received byte array.
            </summary>
        </member>
        <member name="T:Ozeki.Media.ImageProvider`1">
            <summary>
            Media handler that creates image from received byte array.
            </summary>
        </member>
        <member name="T:Ozeki.Media.IImageProvider`1">
            <summary>
            The interface that should be implemented by image providers
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Ozeki.Media.IImageProvider`1.ImageReady">
            <summary>
            Occurs when the provider has finished creating the image.
            </summary>
        </member>
        <member name="M:Ozeki.Media.ImageProvider`1.#ctor(Ozeki.Common.IByteArrayConverter{`0})">
            <summary>
            Initializes a new instance of the  <see cref="T:Ozeki.Media.ImageProvider`1"/> class.
            </summary>
            <param name="converter">The converter that converts the byte array into an image.</param>
        </member>
        <member name="P:Ozeki.Media.ImageProvider`1.Converter">
            <summary>
            Gets or sets the converter that makes conversion between byte array and image.
            </summary>
        </member>
        <member name="E:Ozeki.Media.ImageProvider`1.ImageReady">
            <summary>
            Occurs when the <see cref="T:Ozeki.Media.ImageProvider`1"/> has finished converting the data to an image.
            </summary>
        </member>
        <member name="M:Ozeki.Media.DrawingImageProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.DrawingImageProvider"/> class.
            </summary>
        </member>
        <member name="P:Ozeki.Media.OzChannelFiltering.Blue">
            <summary>
            Gets or sets the Blue Channel value of the filter. (Range: 0-255)
            </summary>
        </member>
        <member name="P:Ozeki.Media.OzChannelFiltering.Green">
            <summary>
            Gets or sets the Green Channel value of the filter. (Range: 0-255)
            </summary>
        </member>
        <member name="P:Ozeki.Media.OzChannelFiltering.Red">
            <summary>
            Gets or sets the Red Channel value of the filter. (Range: 0-255)
            </summary>
        </member>
        <member name="T:Ozeki.Media.FPSTimer">
            <summary>
            A MediaTimer -t nem hasznalhatom, mert csak 20 es 30 ms es idozitest tud
            Az Internal media timert nem hasznalhatom, mert ha abbol tobb mint 5 le van pledanyositva, akkor lehal
            ezert kellett letrehozzak egy uj tipusu timer-t
            </summary>
        </member>
        <member name="M:Ozeki.Media.FPSTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ozeki.Media.FrameCapture.Start">
            <summary>
            Start the frame capturing
            </summary>
        </member>
        <member name="M:Ozeki.Media.FrameCapture.Stop">
            <summary>
            Stop the frame capturing
            </summary>
        </member>
        <member name="M:Ozeki.Media.FrameCapture.OnDataReceived(System.Object,Ozeki.Media.VideoData)">
            <summary>
            Receiving the VideoData from the sender.
            </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:Ozeki.Media.FrameCapture.SetInterval(System.Int32)">
            <summary>
            Set the time interval between frames
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Ozeki.Media.FrameCapture.SetInterval(System.Double,System.Double)">
            <summary>
            Set the time interval between frames
            </summary>
            <param name="sec"></param>
        </member>
        <member name="M:Ozeki.Media.FrameCapture.SetInterval(System.TimeSpan)">
            <summary>
            Set the time interval between frames
            </summary>
            <param name="time"></param>
        </member>
        <member name="P:Ozeki.Media.FrameCapture.IsRunning">
            <summary>
            Gets that the frame capturing is running or not.
            </summary>
        </member>
        <member name="E:Ozeki.Media.FrameCapture.OnFrameCaptured">
            <summary>
            This event is executed when new frame has arrived.
            </summary>
        </member>
        <member name="T:Ozeki.Media.HighlightMotion">
            <summary>
            Highlith motion type
            </summary>
        </member>
        <member name="M:Ozeki.Media.MotionDetector.#ctor">
            <summary>
            Class to represent a motion detector, which detects on receive VideoDatas.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MotionDetector.OnDataReceived(System.Object,Ozeki.Media.VideoData)">
            <summary>
            Receiving the VideoData from the sender.
            </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:Ozeki.Media.MotionDetector.Start">
            <summary>
            Starts the detection.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MotionDetector.Stop">
            <summary>
            Stops the detection.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MotionDetector.Restart">
            <summary>
            Restarts the detector.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MotionDetector.DetectionFPS">
            <summary>
            Gets or sets that how many frames should be checked per second.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MotionDetector.PixelIntensitySensitivy">
            <summary>
            Gets or sets that what intensity difference between pixels should be recognized as motion.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MotionDetector.PixelAmountSensitivy">
            <summary>
            Gets or sets that what percent of the image should change to be recognized as motion.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MotionDetector.HighlightMotion">
            <summary>
            Gets or sets how to highlight the moving objects.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MotionDetector.IsRunning">
            <summary>
            Gets that the motion detector is running or not.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MotionDetector.MotionColor">
            <summary>
            Gets or sets the highlight color.
            </summary>
        </member>
        <member name="E:Ozeki.Media.MotionDetector.MotionDetection">
            <summary>
            Carries the motion information for the checked frame as arguments.
            </summary>
        </member>
        <member name="E:Ozeki.Media.MotionDetector.DetectionError">
            <summary>
            Occurs when the detection get error
            </summary>
        </member>
        <member name="T:Ozeki.Media.MotionDetectorImpl">
            <summary>
            MotionDetector3Optimized
            </summary>
        </member>
        <member name="T:Ozeki.Media.MPEG4Recorder">
            <summary>
            </summary>
        </member>
        <member name="M:Ozeki.Media.MPEG4Recorder.#ctor(System.String)">
            <summary>
            Initialize an MPEG4 recorder, which will mux the data from connected audio and video handlers to an MP4 audio/video file.
            The actual file write will be done when Multiplex() is called.
            </summary>
            <param name="path">Path to MP4 file to write.</param>
        </member>
        <member name="M:Ozeki.Media.MPEG4Recorder.#ctor(System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Initialize an MPEG4 recorder, which will mux the data from connected audio and video handlers to an MP4 audio/video file.
            The actual file write will be done when Multiplex() is called.
            </summary>
            <param name="path">Path to MP4 file to write.</param>
            <param name="audioStream">The temporary stream the audio data will be written.</param>
            <param name="videoStream">The temporary stream the video data will be written.</param>
        </member>
        <member name="M:Ozeki.Media.MPEG4Recorder.Multiplex">
            <summary>
            Writes the actual multiplexed MP4 file from video and audio elementary streams in the background.
            This process takes some time. When multiplex has been finished, MultiplexFinished event will fired;
            </summary>
        </member>
        <member name="E:Ozeki.Media.MPEG4Recorder.MultiplexFinished">
            <summary>
            Event fired when Multiplex async method has been finished.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MPEG4Recorder.AudioRecorder">
            <summary>
            </summary>
        </member>
        <member name="P:Ozeki.Media.MPEG4Recorder.VideoRecorder">
            <summary>
            </summary>
        </member>
        <member name="P:Ozeki.Media.MPEG4VideoRecorder.FramesCount">
            <summary>
            Count of the recorded frames.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MPEG4VideoRecorder.Format">
            <summary>
            VideoFormat of the recorder
            </summary>
        </member>
        <member name="T:Ozeki.Media.ScreenCapture">
            <summary>
            Description of DesktopCapture.
            </summary>
        </member>
        <member name="M:Ozeki.Media.SnapshotHandler.#ctor">
            <summary>
            Constructor of the snapshothandler object
            </summary>
        </member>
        <member name="M:Ozeki.Media.SnapshotHandler.OnDataReceived(System.Object,Ozeki.Media.VideoData)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:Ozeki.Media.SnapshotHandler.TakeSnapshot">
            <summary>
            Function to create a snapshot from the video stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.Media.TextOverlay.Start">
            <summary>
            Starts the media.
            </summary>
        </member>
        <member name="M:Ozeki.Media.TextOverlay.Stop">
            <summary>
            Stops the media.
            </summary>
        </member>
        <member name="M:Ozeki.Media.TextOverlay.OnDataReceived(System.Object,Ozeki.Media.VideoData)">
            <summary>
            
            </summary>
            <param name="sender">The object that send the VideoData.</param>
            <param name="data">The VideoData object that arrived from sender.</param>
        </member>
        <member name="P:Ozeki.Media.TextOverlay.IsRunning">
            <summary>
            Gets the current VideoHandler is started or not
            </summary>
        </member>
        <member name="P:Ozeki.Media.TextOverlay.Text">
            <summary>
            Text to display on the video
            </summary>
        </member>
        <member name="P:Ozeki.Media.TextOverlay.Font">
            <summary>
            Font type of the text
            </summary>
        </member>
        <member name="P:Ozeki.Media.TextOverlay.Brush">
            <summary>
            Font color of the text
            </summary>
        </member>
        <member name="P:Ozeki.Media.TextOverlay.Position">
            <summary>
            Position of the string on the screen
            </summary>
        </member>
        <member name="P:Ozeki.Media.TextOverlay.X">
            <summary>
            Gets the x coordinate of the position of the text
            </summary>
        </member>
        <member name="P:Ozeki.Media.TextOverlay.Y">
            <summary>
            Gets the y coordinate of the position of the text
            </summary>
        </member>
        <member name="T:Ozeki.Media.TextOverlayPosition">
            <summary>
            Property to set the horizontal and vertical position of Text
            </summary>
        </member>
        <member name="P:Ozeki.Media.Tripwire.PixelAmountSensitivy">
            <summary>
            Gets or sets that what percent of the image should changeArgs to be recognized as motion.
            </summary>
        </member>
        <member name="T:Ozeki.Media.TripwireDetector">
            <summary>
            MotionDetector3Optimized
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoCodecConverter.Start">
            <summary>
            This method start the mediahandler
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoCodecConverter.Stop">
            <summary>
            This method stop the mediahandler
            </summary>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.Media.VideoCodecConverter.#ctor(Ozeki.Media.VideoFormat,Ozeki.Media.VideoQuality,System.Boolean)” -->
        <member name="M:Ozeki.Media.VideoCodecConverter.#ctor(Ozeki.Media.VideoFormat,Ozeki.Media.VideoFormat,Ozeki.Media.VideoQuality,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="source_format">
            Input format of the converter
            </param>
            /// <param name="output_quality">
            Output Quality of the converter
            </param>
            <param name="destination_format">Output format of the converter
            </param>
            <param name="force_transcode">
            If true it forces transcoding in all cases, even when the input and output formats are the same
            </param>
        </member>
        <member name="P:Ozeki.Media.VideoCodecConverter.IsRunning">
            <summary>
            True if Converter is running, otherwise false
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCodecConverter.SourceFormat">
            <summary>
            Input format
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCodecConverter.DestinationFormat">
            <summary>
            Output format
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCodecConverter.ForceTranscode">
            <summary>
            If true it forces transcoding in all cases, even when the input and output formats are the same
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCodecConverter.OutputQuality">
            <summary>
            Quality level used for encodig;
            </summary>
        </member>
        <member name="M:Ozeki.Media.WatermarkResizer.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
            Mindig akkora képkockát ad ki, mint amekkorát a kezdetben megadtunk
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bytesPerPixel"></param>
        </member>
        <member name="M:Ozeki.Media.Zoom.Start">
            <summary>
            Starts the media.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Zoom.Stop">
            <summary>
            Stops the media.
            </summary>
        </member>
        <member name="T:Ozeki.Media.WaveStreamRecorder">
            <summary>
            Can record audio data into a wave file.
            </summary>
        </member>
        <member name="M:Ozeki.Media.WaveStreamRecorder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamRecorder"/> class with default MediaFormat (8 kHz, 16 bit, 1 channel)
            </summary>
            <param name="filePath">The path of the media file. If the file already exists it will be overwritten.</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamRecorder.#ctor(System.String,Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamRecorder"/> class
            </summary>
            <param name="filePath">The path of the media file. If the file already exists it will be overwritten.</param>
            <param name="waveFormat">The format of the recorded data.</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamRecorder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamRecorder"/> class with default MediaFormat (8 kHz, 16 bit, 1 channel)
            </summary>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamRecorder.#ctor(System.IO.Stream,Ozeki.Media.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.WaveStreamRecorder"/> class
            </summary>
            <param name="stream">The output stream.</param>
            <param name="waveFormat">The format of the recorded data.</param>
        </member>
        <member name="M:Ozeki.Media.WaveStreamRecorder.Stop">
            <summary>
            Stops the streaming. (If the streaming is already stopped then does nothing.)
            </summary>
        </member>
        <member name="T:Ozeki.Media.ChannelMediaStrategy">
            <summary>
            Normal behaviour for media strategy
            </summary>
        </member>
        <member name="T:Ozeki.Media.MediaStrategy">
            <summary>
            Normal behaviour for media strategy
            </summary>
        </member>
        <member name="T:Ozeki.Media.MediaType">
            <summary>
            Defines types for media data.
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaType.Unknown">
            <summary>
            Unknown media type
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaType.Audio">
            <summary>
            Audio type
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaType.Video">
            <summary>
            Video type
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaType.Application">
            <summary>
            Application type
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaType.Data">
            <summary>
            Data type
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaType.Control">
            <summary>
            Control type
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaType.Text">
            <summary>
            Text type
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaType.Message">
            <summary>
            Message type
            </summary>
        </member>
        <member name="F:Ozeki.Media.MediaType.Whiteboard">
            <summary>
            Whiteboard type
            </summary>
        </member>
        <member name="T:Ozeki.Media.MJPEGConnection">
            <summary>
            Initializes an object, which can be connected to an MJPEG Streamer.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MJPEGConnection.#ctor">
            <summary>
            Initializes an object, which can be connected to an MJPEG Streamer.
            </summary>
        </member>
        <member name="M:Ozeki.Media.MJPEGConnection.Connect(System.String,System.Int32,System.String,System.String)">
            <summary>
            Connects the mediahandler to the streamer through the given URL.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Ozeki.Media.MJPEGConnection.Disconnect">
            <summary>
            Disconnects the mediahandler from the MJPEG Streamer.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MJPEGConnection.ConversationRunning">
            <summary>
            It is true if the MJPEGConnection object has an active network conversation with the server
            </summary>
        </member>
        <member name="P:Ozeki.Media.MJPEGConnection.Connected">
            <summary>
            It is true if the MJPEGConnection object is connected to the server
            </summary>
        </member>
        <member name="P:Ozeki.Media.MJPEGConnection.DeviceUrl">
            <summary>
            Url of the MJPEGStreamer.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MJPEGConnection.HTTPHeaders">
            <summary>
            Gets the HTTP Headers.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MJPEGConnection.VideoChannel">
            <summary>
            VideoSender object, which can be connected to receivers.
            </summary>
        </member>
        <member name="P:Ozeki.Media.MJPEGConnection.IsRunning">
            <summary>
            It is true if the the MJPEGConnection object is sendig video data through it's VideoChannel
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioWriter.ConfigWidth">
            <summary>
            Width of the config control
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioWriter.ConfigHeight">
            <summary>
            Height of the config control
            </summary>
        </member>
        <member name="P:Ozeki.Media.AudioWriter.OptimalBufferSize">
            <summary>
            Optimal size of the buffer used in each write operation to obtain best performance.
            This value must be greater than 0 
            </summary>
        </member>
        <member name="T:Ozeki.Media.Mp3Writer">
            <summary>
            Convert PCM audio data to PCM format
            The data received through the method write is assumed as PCM audio data. 
            This data is converted to MP3 format and written to the result stream. 
            <seealso cref="!:yeti.mmedia.utils.AudioFileWriter"/>
            <seealso cref="!:yeti.Lame"/>
            </summary>
        </member>
        <member name="M:Ozeki.Media.Mp3Writer.#ctor(System.IO.Stream,Ozeki.Media.WaveFormat)">
            <summary>
            Create a Mp3Writer with the default MP3 format
            </summary>
            <param name="Output">Stream that will hold the MP3 resulting data</param>
            <param name="InputDataFormat">PCM format of input data</param>
        </member>
        <member name="M:Ozeki.Media.Mp3Writer.#ctor(System.IO.Stream,Ozeki.Media.Mp3WriterConfig)">
            <summary>
            Create a Mp3Writer with specific MP3 format
            </summary>
            <param name="Output">Stream that will hold the MP3 resulting data</param>
            <param name="cfg">Writer Config</param>
        </member>
        <member name="M:Ozeki.Media.Mp3Writer.#ctor(System.IO.Stream,Ozeki.Media.WaveFormat,Ozeki.Media.BE_CONFIG)">
            <summary>
            Create a Mp3Writer with specific MP3 format
            </summary>
            <param name="Output">Stream that will hold the MP3 resulting data</param>
            <param name="InputDataFormat">PCM format of input data</param>
            <param name="Mp3Config">Desired MP3 config</param>
        </member>
        <member name="M:Ozeki.Media.Mp3Writer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send to the compressor an array of bytes.
            </summary>
            <param name="buffer">Input buffer</param>
            <param name="index">Start position</param>
            <param name="count">Bytes to process. The optimal size, to avoid buffer copy, is a multiple of <see cref="!:yeti.mmedia.utils.AudioFileWriter.OptimalBufferSize"/></param>
        </member>
        <member name="M:Ozeki.Media.Mp3Writer.Write(System.Byte[])">
            <summary>
            Send to the compressor an array of bytes.
            </summary>
            <param name="buffer">The optimal size, to avoid buffer copy, is a multiple of <see cref="!:yeti.mmedia.utils.AudioFileWriter.OptimalBufferSize"/></param>
        </member>
        <member name="P:Ozeki.Media.Mp3Writer.Mp3Config">
            <summary>
            MP3 Config of final data
            </summary>
        </member>
        <member name="T:Ozeki.Media.Mp3WriterConfig">
            <summary>
            Config information for MP3 writer
            </summary>
        </member>
        <member name="T:Ozeki.Media.AudioWriterConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ozeki.Media.AudioWriterConfig.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            A constructor with this signature must be implemented by descendants. 
            <see cref="T:System.Runtime.Serialization.ISerializable"/> for more information
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> where is the serialized data.</param>
            <param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:Ozeki.Media.Lame_encDll">
            <summary>
            Lame_enc DLL functions
            </summary>
        </member>
        <member name="M:Ozeki.Media.Lame_encDll.EncodeChunk(System.UInt32,System.Byte[],System.Int32,System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Encodes a chunk of samples. Samples are contained in a byte array
            </summary>
            <param name="hbeStream">Handle of the stream.</param>
            <param name="buffer">Bytes to encode</param>
            <param name="index">Position of the first byte to encode</param>
            <param name="nBytes">Number of bytes to encode (not samples, samples are two byte lenght)</param>
            <param name="pOutput">Buffer where to write the encoded data.
            This buffer should be at least of the minimum size returned by beInitStream().</param>
            <param name="pdwOutput">Returns the number of bytes of encoded data written. 
            The amount of data written might vary from chunk to chunk</param>
            <returns>On success: BE_ERR_SUCCESSFUL</returns>
        </member>
        <member name="M:Ozeki.Media.Lame_encDll.EncodeChunk(System.UInt32,System.Byte[],System.Byte[],System.UInt32@)">
            <summary>
            Encodes a chunk of samples. Samples are contained in a byte array
            </summary>
            <param name="hbeStream">Handle of the stream.</param>
            <param name="buffer">Bytes to encode</param>
            <param name="pOutput">Buffer where to write the encoded data.
            This buffer should be at least of the minimum size returned by beInitStream().</param>
            <param name="pdwOutput">Returns the number of bytes of encoded data written. 
            The amount of data written might vary from chunk to chunk</param>
            <returns>On success: BE_ERR_SUCCESSFUL</returns>
        </member>
        <member name="T:Ozeki.Media.Lame_encDll.beInitStreamDelegate">
            <summary>
            This function is the first to call before starting an encoding stream.
            </summary>
            <param name="pbeConfig">Encoder settings</param>
            <param name="dwSamples">Receives the number of samples (not bytes, each sample is a SHORT) to send to each beEncodeChunk() on return.</param>
            <param name="dwBufferSize">Receives the minimun number of bytes that must have the output(result) buffer</param>
            <param name="phbeStream">Receives the stream handle on return</param>
            <returns>On success: BE_ERR_SUCCESSFUL</returns>
        </member>
        <member name="T:Ozeki.Media.Lame_encDll.beEncodeChunkDelegate">
            <summary>
            Encodes a chunk of samples. Please note that if you have set the output to 
            generate mono MP3 files you must feed beEncodeChunk() with mono samples
            </summary>
            <param name="hbeStream">Handle of the stream.</param>
            <param name="nSamples">Number of samples to be encoded for this call. 
            This should be identical to what is returned by beInitStream(), 
            unless you are encoding the last chunk, which might be smaller.</param>
            <param name="pInSamples">Array of 16-bit signed samples to be encoded. 
            These should be in stereo when encoding a stereo MP3 
            and mono when encoding a mono MP3</param>
            <param name="pOutput">Buffer where to write the encoded data. 
            This buffer should be at least of the minimum size returned by beInitStream().</param>
            <param name="pdwOutput">Returns the number of bytes of encoded data written. 
            The amount of data written might vary from chunk to chunk</param>
            <returns>On success: BE_ERR_SUCCESSFUL</returns>
        </member>
        <member name="T:Ozeki.Media.SentVideoResolutionMode">
            <summary>
            Defines resolution settings for outgoing video streams.
            </summary>
        </member>
        <member name="F:Ozeki.Media.SentVideoResolutionMode.ProfileBased">
            <summary>
            Determines the resolution of the sent video based on the selected codec profile.
            </summary>
        </member>
        <member name="F:Ozeki.Media.SentVideoResolutionMode.SourceBased">
            <summary>
            The resolution of the sent video will be the same as the resolution of the video coming from the source.
            </summary>
        </member>
        <member name="F:Ozeki.Media.SentVideoResolutionMode.Fixed">
            <summary>
            The resolution of the sent video will be set to a fixed custom value.
            </summary>
        </member>
        <member name="T:Ozeki.Media.TimeMapper">
            <summary>
            A belső, másodperces időskála és az egyéb különböző időskálák közötti megfeleltetést biztosítja valósidejű streameknél.
            Kívülről beérkezett adat (ExternalTime) első időpontja az aktuális rendszeridőhöz lesz rendelve, a további időpontok ebből számolódnak. Ez azért kell, hogy
            az A-V szinkronizálás biztosítva legyen akkor is, ha valósidőben érkezik az adat, és pl. a video később lesz elindítva.
            </summary>
        </member>
        <member name="T:Ozeki.Media.BitmapSourceProvider">
            <summary>
            Creates a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> object from received byte array.
            </summary>
        </member>
        <member name="M:Ozeki.Media.BitmapSourceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.BitmapSourceProvider"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.BitmapResizer.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
            Mindig akkora képkockát ad ki, mint amekkorát a kezdetben megadtunk
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bytesPerPixel"></param>
        </member>
        <member name="T:Ozeki.Media.BitmapSourceConverter">
            <summary>
            Converts <see cref="T:System.Windows.Interop.InteropBitmap"/> data type to an array of bytes, and an array of bytes to <see cref="F:Ozeki.Media.BitmapSourceConverter._bitmapSource"/>.
            </summary>
            <remarks>
            A konverter lefoglal egy memóriaterületet. Az InteropBitmap erről a memóriaterületről dolgozik.
            Konvertáláskor a kapott byte array-t erre a memóriaterületre másolja át, így a kép automatikusan előáll.
            A lefoglalt terület mérete függ az előállított kép méretétől, így konvertálás előtt inicializálni kell a konvertert.
            Ha más méretű képet akarunk előállítani, akkor újra kell inicializálni.
            </remarks>
        </member>
        <member name="M:Ozeki.Media.BitmapSourceConverter.ByteArrayToObject(System.Byte[])">
            <summary>
            Converts an array of bytes to a <see cref="T:System.Windows.Interop.InteropBitmap"/> object.
            </summary>
            <param name="array">The array of bytes.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Ozeki.Media.BitmapSourceConverter.GetBytes(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts the specified <see cref="T:System.Windows.Interop.InteropBitmap"/> object to an array of bytes.
            </summary>
            <param name="obj">The object that is to be converted.</param>
            <returns>The specified object as an array of bytes.</returns>
        </member>
        <member name="T:Ozeki.Media.DrawingImageConverter">
            <summary>
            Converts <see cref="T:System.Drawing.Image"/> data type to an array of bytes, and an array of bytes to <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="M:Ozeki.Media.DrawingImageConverter.ByteArrayToObject(System.Byte[])">
            <summary>
            Converts an array of bytes to a <see cref="T:System.Drawing.Image"/> object.
            </summary>
            <param name="array">The array of bytes.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Ozeki.Media.DrawingImageConverter.GetBytes(System.Drawing.Image)">
            <summary>
            Converts the specified <see cref="T:System.Drawing.Image"/> object to an array of bytes.
            </summary>
            <param name="obj">The object that is to be converted.</param>
            <returns>The specified object as an array of bytes.</returns>
        </member>
        <member name="T:Ozeki.Media.BitmapSourceTransform">
            <summary>
            Egy BitmapSource objektumot tud tukrozni vagy elforgatni.
            </summary>
            <remarks>
            Hasznalat:
            1. Konstruktorban megadjuk a source-t, beallitjuk a Property-ket.
            2. Meghivjuk a Transform()-ot
            3. Attol fuggoen, hogyan akarjuk visszakapni az alakitott kepet meghivjuk a
               GetBytes() vagy GetTransformedBitmap()-et
            </remarks>
        </member>
        <member name="P:Ozeki.Media.InternalVideoDeviceInfo.DeviceID">
            <summary>
            Gets the identifier of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.InternalVideoDeviceInfo.Name">
            <summary>
            Gets the name of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.InternalVideoDeviceInfo.Capabilities">
            <summary>
            Gets the supported resolutions and frame rates of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.InternalVideoDeviceInfo.MonikerString">
            <summary>
            Gets the display name of the device moniker.
            </summary>
        </member>
        <member name="M:Ozeki.Media.IVideoCaptureDevice.ChangeDevice(System.Int32)">
            <summary>
            Changes the capturing device. If the capturer is already capturing then restarts it.
            </summary>
            <param name="deviceID">The identifier of the capturing device.</param>
        </member>
        <member name="E:Ozeki.Media.IVideoCaptureDevice.ImageCaptured">
            <summary>
            Occurs when an image captured from the capturing device.
            </summary>
        </member>
        <member name="E:Ozeki.Media.IVideoCaptureDevice.Stopped">
            <summary>
            Occurs when the capturing has stopped.
            </summary>
        </member>
        <member name="T:Ozeki.Media.Resolution">
            <summary>
            Represents the resolution od a video stream
            </summary>
        </member>
        <member name="M:Ozeki.Media.Resolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Resolution"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.Resolution.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Resolution"/> class.
            </summary>
            <param name="width">Horizontal pixels.</param>
            <param name="height">Vertical pixels.</param>
        </member>
        <member name="M:Ozeki.Media.Resolution.Equals(System.Object)">
            <summary>
            Checks if the current Resolution is equal to the parameter object
            </summary>
            <param name="obj">The object to be compared to the current Resolution</param>
            <returns>true if the current resolution is equal to the parameter object, otherwise false</returns>
        </member>
        <member name="M:Ozeki.Media.Resolution.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ozeki.Media.Resolution.GetPixels">
            <summary>
            Gets the number of pixels.
            </summary>
            <returns>Number of pixels in this resolution.</returns>
        </member>
        <member name="M:Ozeki.Media.Resolution.GetClosest(Ozeki.Media.Resolution,Ozeki.Media.Resolution)">
            <summary>
            Compare two input resolution to this, and
            returns the Resolution which has closer pixel number.
            </summary>
            <param name="res1">First resolution to compare to this Resolution.</param>
            <param name="res2">Second resolution to compare to this Resolution.</param>
            <returns>Resolution which is closest to this Resolution. Returns null on equality.</returns>
        </member>
        <member name="P:Ozeki.Media.Resolution.Width">
            <summary>
            Gets the number of the horizonal pixels.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Resolution.Height">
            <summary>
            Gets the number of the vertical pixels.
            </summary>
        </member>
        <member name="P:Ozeki.Media.Resolution.Ratio">
            <summary>
            Gets picture ratio of this resolution.
            </summary>
        </member>
        <member name="T:Ozeki.Media.VideoCapabilities">
            <summary>
            Provides information about the supported resolutions and frame rates for a video device.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoCapabilities.ToString">
            <summary>
            Returns the string representation of the current object
            </summary>
            <returns>The string that represents the current object</returns>
        </member>
        <member name="P:Ozeki.Media.VideoCapabilities.Resolution">
            <summary>
            Gets the resolution of a frame.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCapabilities.MaxFrameRate">
            <summary>
            Gets the maximum supported frame rate for the resolution.
            </summary>
        </member>
        <member name="T:Ozeki.Media.VideoCaptureDevice">
            <summary>
            Can capture image from webcamera
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoCaptureDevice.#ctor(Ozeki.Media.InternalVideoDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoCaptureDevice"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoCaptureDevice.ChangeDevice(System.Int32)">
            <summary>
            Changes the capturing device. If the camera is already capturing then restarts it.
            </summary>
            <param name="deviceID"></param>
        </member>
        <member name="M:Ozeki.Media.VideoCaptureDevice.Start">
            <summary>
            Starts the capturing.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoCaptureDevice.Stop">
            <summary>
            Stops the capturing.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoCaptureDevice.GetDevices">
            <summary>
            Retrieves the available capturing devices.
            </summary>
            <returns>The list containing the devices.</returns>
        </member>
        <member name="M:Ozeki.Media.VideoCaptureDevice.Finalize">
            <summary>
            Finalizer. Only called when user forgets to call <see>Dispose</see>
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureDevice.DeviceInfo">
            <summary>
            Gets the capabilities of the selected capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureDevice.CurrentFrameRate">
            <summary>
            Gets the current frame rate of the capture.
            (Aktuális FPS)
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureDevice.FrameSize">
            <summary>
            Gets or sets the size of the captured frames.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureDevice.DesiredFrameRate">
            <summary>
            Gets or sets the desired frame rate. If this value is set to 0 then maximum frame rate will be used.
            (Kívülről állítjuk be, hogy ha lehet, ennyi FPS-el menjen.)
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureDevice.CameraFrameRate">
            <summary>
            Gets the average frame rate of the device.
            (Kamerának beállított FPS)
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureDevice.Capturing">
            <summary>
            Gets a boolean value indicating whether the capturing is started.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureDevice.Initialized">
            <summary>
            Gets a boolean value indicating whether the device has been initialized.
            </summary>
        </member>
        <member name="E:Ozeki.Media.VideoCaptureDevice.ImageCaptured">
            <summary>
            Occurs when an image captured from the capturing device.
            </summary>
        </member>
        <member name="E:Ozeki.Media.VideoCaptureDevice.Stopped">
            <summary>
            Occurs when the capturing has stopped.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoCaptureEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoCaptureEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoCaptureEventArgs.#ctor(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoCaptureEventArgs"/> class.
            </summary>
            <param name="buffer">Pointer to a buffer that contains the sample data.</param>
            <param name="data">The byte array that contains the sample data.</param>
            <param name="width">The width of the captured image (in pixels).</param>
            <param name="height">The height of the captured image (in pixels).</param>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureEventArgs.SampleData">
            <summary>
            Gets the byte array that contains the sample data.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureEventArgs.Buffer">
            <summary>
            Gets the pointer to a buffer that contains the sample data.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureEventArgs.Width">
            <summary>
            Gets the width of the captured image.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoCaptureEventArgs.Height">
            <summary>
            Gets the height of the captured image.
            </summary>
        </member>
        <member name="T:Ozeki.Media.VideoData">
            <summary>
            Provides data with format information for audio.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoData.#ctor(Ozeki.Media.VideoFormat,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoData"/> class.
            </summary>
            <param name="format">The format of the video data.</param>
            <param name="data">The video data.</param>
            <param name="timestamp">The timestamp for the video data.</param>
        </member>
        <member name="P:Ozeki.Media.VideoData.Format">
            <summary>
            Gets the format of the video data.
            </summary>
        </member>
        <member name="T:Ozeki.Media.VideoDeviceInfo">
            <summary>
            Provides information about a video capturing device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoDeviceInfo.DeviceID">
            <summary>
            Gets the identifier of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoDeviceInfo.Name">
            <summary>
            Gets the name of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoDeviceInfo.Capabilities">
            <summary>
            Gets the supported resolutions and frame rates of the device.
            </summary>
        </member>
        <member name="P:Ozeki.Media.VideoDeviceInfo.MonikerString">
            <summary>
            Gets the display name of the device moniker.
            </summary>
        </member>
        <member name="T:Ozeki.Media.VideoDeviceInfoEx">
            <summary>
            This class stores methods that can transform between VideoDeviceInfo and InternalVideoDeviceInfo objects
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoDeviceInfoEx.AsInternalVideoDeviceInfo(Ozeki.Media.VideoDeviceInfo)">
            <summary>
            Transforms the current VideoDeviceInfo into InternalVideoDeviceInfo
            </summary>
            <param name="info">The current VideoDeviceInfo</param>
            <returns>The transformed InternalVideoDeviceInfo</returns>
        </member>
        <member name="M:Ozeki.Media.VideoDeviceInfoEx.AsVideoDeviceInfo(Ozeki.Media.InternalVideoDeviceInfo)">
            <summary>
            Transforms the current InternalVideoDeviceInfo into VideoDeviceInfo
            </summary>
            <param name="info">The current InternalVideoDeviceInfo</param>
            <returns>The transformed VideoDeviceInfo</returns>
        </member>
        <member name="T:Ozeki.Media.VideoQuality">
            <summary>
            Specifies video quality options
            </summary>
        </member>
        <member name="F:Ozeki.Media.VideoQuality.VeryLow">
            <summary>
            Bits per pixel 0.02
            </summary>
        </member>
        <member name="F:Ozeki.Media.VideoQuality.Low">
            <summary>
            Bits per pixel 0.055
            </summary>
        </member>
        <member name="F:Ozeki.Media.VideoQuality.Medium">
            <summary>
            Bits per pixel 0.1
            </summary>
        </member>
        <member name="F:Ozeki.Media.VideoQuality.High">
            <summary>
            Bits per pixel 0.14
            </summary>
        </member>
        <member name="F:Ozeki.Media.VideoQuality.VeryHigh">
            <summary>
            Bits per pixel 0.2
            </summary>
        </member>
        <member name="T:Ozeki.Media.VideoQualityConverter">
            <summary>
            Converts video quality to video format parameters.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoQualityConverter.ConvertToBitsPerPixel(Ozeki.Media.VideoQuality)">
            <summary>
            Gets the bits per pixel value for the video quality.
            </summary>
        </member>
        <member name="M:Ozeki.Media.VideoQualityConverter.ConvertToBitrate(Ozeki.Media.VideoQuality,System.Int32,System.Int32,System.Double)">
            <summary>
            Gets the bitrate value for the video quality.
            </summary>
        </member>
        <member name="T:Ozeki.Common.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Ozeki.Common.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Ozeki.Common.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Ozeki.Common.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Ozeki.Common.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Ozeki.Common.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Ozeki.Common.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Ozeki.Common.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Ozeki.Common.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Ozeki.Common.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Ozeki.Common.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Ozeki.Common.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Ozeki.Common.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Ozeki.Common.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Ozeki.Common.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Ozeki.Common.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Ozeki.Common.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:Ozeki.Common.MeansImplicitUseAttribute"/>
            or <see cref="T:Ozeki.Common.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Ozeki.Common.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Ozeki.Common.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Ozeki.Common.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Ozeki.Common.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Ozeki.Common.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Ozeki.Common.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Ozeki.Common.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Ozeki.Common.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LicenseManager">
            <summary>
            Manages the SDK licences
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LicenseManager.SetLicense(System.String,System.String)">
            <summary>
             Sets your license according to the license key you got after purchasing the SDK
            </summary>
            <param name="userId">User identity</param>
            <param name="licenseKey">The given license key determines your permissons.</param>
            <exception cref="T:Ozeki.Common.LicenseException">Occurs when user id or license key is not valid.</exception>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.Instance">
            <summary>
             Singleton instance
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.MaxPhoneCall">
            <summary>
             Indicates the maximum simultaneous phone call which is allowed with your license.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.MaxPhoneLine">
            <summary>
             Indicates the maximum simultaneous phone line which is allowed with your license.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.LicenseType">
            <summary>
             Your actual Ozeki VoIP SDK license type.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.RemainingDays">
            <summary>
             Indicates remaining time of the Ozeki VoIP SDK trial period.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.G729Enabled">
            <summary>
            Indicates whether the G729 codec is enabled at the SDK.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.MaxSilverlightClient">
            <summary>
            Indicates the maximum nummber of Silverlight clients that is allowed with your license
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.MaxFlashClient">
            <summary>
            Indicates the maximum nummber of Flash clients that is allowed with your license
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.MaxWindowsPhoneClient">
            <summary>
            Indicates the maximum nummber of Windows Phone clients that is allowed with your license
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.LicenseManager.MaxIPCameraConnection">
            <summary>
            Indicates the maximum nummber of IP camera clients that is allowed with your license
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LicenseState">
            <summary>
            Ez ugyanaz mint a LicenseType csak ezt belül fogjuk használni
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.LicenseState.Activated">
            <summary>
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.LicenseState.Expired">
            <summary>
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.LicenseState.Trial">
            <summary>
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LicenseType">
            <summary>
            SDK licence type
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.LicenseType.Activated">
            <summary>
            Activated
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.LicenseType.Expired">
            <summary>
            Expired
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.LicenseType.Trial">
            <summary>
            Trial
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.AllAccess">
            <summary>Specifies all possible access flags for the process object.</summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.CreateThread">
            <summary>Enables usage of the process handle in the CreateRemoteThread function to create a thread in the process.</summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.DuplicateHandle">
            <summary>Enables usage of the process handle as either the source or target process in the DuplicateHandle function to duplicate a handle.</summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.QueryInformation">
            <summary>Enables usage of the process handle in the GetExitCodeProcess and GetPriorityClass functions to read information from the process object.</summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.SetInformation">
            <summary>Enables usage of the process handle in the SetPriorityClass function to set the priority class of the process.</summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.Terminate">
            <summary>Enables usage of the process handle in the TerminateProcess function to terminate the process.</summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.VMOperation">
            <summary>Enables usage of the process handle in the VirtualProtectEx and WriteProcessMemory functions to modify the virtual memory of the process.</summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.VMRead">
            <summary>Enables usage of the process handle in the ReadProcessMemory function to' read from the virtual memory of the process.</summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.VMWrite">
            <summary>Enables usage of the process handle in the WriteProcessMemory function to write to the virtual memory of the process.</summary>
        </member>
        <member name="F:Ozeki.VoIP.ProcessAccess.Synchronize">
            <summary>Enables usage of the process handle in any of the wait functions to wait for the process to terminate.</summary>
        </member>
        <member name="M:Ozeki.VoIP.ArchiveFactory.Open(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Opens an Archive for random access
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ArchiveFactory.Open(System.String)">
            <summary>
            Constructor expects a filepath to an existing file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Ozeki.VoIP.ArchiveFactory.Open(System.IO.FileInfo)">
            <summary>
            Constructor with a FileInfo object to an existing file.
            </summary>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Ozeki.VoIP.ArchiveFactory.Open(System.String,Ozeki.VoIP.Options)">
            <summary>
            Constructor expects a filepath to an existing file.
            </summary>
            <param name="filePath"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.ArchiveFactory.Open(System.IO.FileInfo,Ozeki.VoIP.Options)">
            <summary>
            Constructor with a FileInfo object to an existing file.
            </summary>
            <param name="fileInfo"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.ArchiveFactory.WriteToDirectory(System.String,System.String,Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.ExtractOptions)">
            <summary>
            Extract to specific directory, retaining filename
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ArchiveFactory.WriteToDirectory(System.String,System.String,Ozeki.VoIP.ExtractOptions)">
            <summary>
            Extract to specific directory, retaining filename
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IArchiveEntryExtensions.WriteToDirectory(Ozeki.VoIP.IArchiveEntry,System.String,Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.ExtractOptions)">
            <summary>
            Extract to specific directory, retaining filename
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IArchiveEntryExtensions.WriteToDirectory(Ozeki.VoIP.IArchiveEntry,System.String,Ozeki.VoIP.ExtractOptions)">
            <summary>
            Extract to specific directory, retaining filename
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IArchiveEntryExtensions.WriteToFile(Ozeki.VoIP.IArchiveEntry,System.String,Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.ExtractOptions)">
            <summary>
            Extract to specific file
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IArchiveEntryExtensions.WriteToFile(Ozeki.VoIP.IArchiveEntry,System.String,Ozeki.VoIP.ExtractOptions)">
            <summary>
            Extract to specific file
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.FileInfoRarArchiveVolume">
            <summary>
            A rar part based on a FileInfo object
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RarVolume">
            <summary>
            A RarArchiveVolume is a single rar file that may or may not be a split RarArchive.  A Rar Archive is one to many Rar Parts
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IVolume.VolumeFile">
            <summary>
            File that backs this volume, if it not stream based
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Volume.IsFirstVolume">
            <summary>
            RarArchive is the first volume of a multi-part archive.
            Only Rar 3.0 format and higher
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Volume.IsMultiVolume">
            <summary>
            RarArchive is part of a multi-part archive.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarVolume.IsFirstVolume">
            <summary>
            RarArchive is the first volume of a multi-part archive.
            Only Rar 3.0 format and higher
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarVolume.IsMultiVolume">
            <summary>
            RarArchive is part of a multi-part archive.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarVolume.VolumeFile">
            <summary>
            File that backs this volume, if it not stream based
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarVolume.IsSolidArchive">
            <summary>
            RarArchive is SOLID (this means the Archive saved bytes by reusing information which helps for archives containing many small files).
            Currently, SharpCompress cannot decompress SOLID archives.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RarFilePart">
            <summary>
            This represents a single file part that exists in a rar volume.  A compressed file is one or many file parts that are spread across one or may rar parts.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.#ctor(System.IO.FileInfo,Ozeki.VoIP.Options)">
            <summary>
            Constructor with a FileInfo object to an existing file.
            </summary>
            <param name="fileInfo"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream},Ozeki.VoIP.Options)">
            <summary>
            Takes multiple seekable Streams for a multi-part archive
            </summary>
            <param name="streams"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.Open(System.String)">
            <summary>
            Constructor expects a filepath to an existing file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.Open(System.IO.FileInfo)">
            <summary>
            Constructor with a FileInfo object to an existing file.
            </summary>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.Open(System.String,Ozeki.VoIP.Options)">
            <summary>
            Constructor expects a filepath to an existing file.
            </summary>
            <param name="filePath"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.Open(System.IO.FileInfo,Ozeki.VoIP.Options)">
            <summary>
            Constructor with a FileInfo object to an existing file.
            </summary>
            <param name="fileInfo"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.Open(System.IO.Stream)">
            <summary>
            Takes a seekable Stream as a source
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.Open(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Takes a seekable Stream as a source
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.Open(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Takes multiple seekable Streams for a multi-part archive
            </summary>
            <param name="streams"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchive.Open(System.Collections.Generic.IEnumerable{System.IO.Stream},Ozeki.VoIP.Options)">
            <summary>
            Takes multiple seekable Streams for a multi-part archive
            </summary>
            <param name="streams"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.RarArchiveExtensions.IsFirstVolume(Ozeki.VoIP.RarArchive)">
            <summary>
            RarArchive is the first volume of a multi-part archive.  If MultipartVolume is true and IsFirstVolume is false then the first volume file must be missing.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RarArchiveExtensions.IsMultipartVolume(Ozeki.VoIP.RarArchive)">
            <summary>
            RarArchive is part of a multi-part archive.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RarArchiveExtensions.IsSolidArchive(Ozeki.VoIP.RarArchive)">
            <summary>
            RarArchive is SOLID (this means the Archive saved bytes by reusing information which helps for archives containing many small files).
            Currently, SharpCompress cannot decompress SOLID archives.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.Crc">
            <summary>
            The File's 32 bit CRC Hash
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.FilePath">
            <summary>
            The path of the file internal to the Rar Archive.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.CompressedSize">
            <summary>
            The compressed file size
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.Size">
            <summary>
            The uncompressed file size
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.LastModifiedTime">
            <summary>
            The entry last modified time in the archive, if recorded
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.CreatedTime">
            <summary>
            The entry create time in the archive, if recorded
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.LastAccessedTime">
            <summary>
            The entry last accessed time in the archive, if recorded
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.ArchivedTime">
            <summary>
            The entry time whend archived, if recorded
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.IsEncrypted">
            <summary>
            Entry is password protected and encrypted and cannot be extracted.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Entry.IsDirectory">
            <summary>
            Entry is password protected and encrypted and cannot be extracted.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarEntry.Crc">
            <summary>
            The File's 32 bit CRC Hash
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarEntry.FilePath">
            <summary>
            The path of the file internal to the Rar Archive.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarEntry.LastModifiedTime">
            <summary>
            The entry last modified time in the archive, if recorded
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarEntry.CreatedTime">
            <summary>
            The entry create time in the archive, if recorded
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarEntry.LastAccessedTime">
            <summary>
            The entry last accessed time in the archive, if recorded
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarEntry.ArchivedTime">
            <summary>
            The entry time whend archived, if recorded
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarEntry.IsEncrypted">
            <summary>
            Entry is password protected and encrypted and cannot be extracted.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarEntry.IsDirectory">
            <summary>
            Entry is password protected and encrypted and cannot be extracted.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ZipArchive.Open(System.String)">
            <summary>
            Constructor expects a filepath to an existing file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Ozeki.VoIP.ZipArchive.Open(System.IO.FileInfo)">
            <summary>
            Constructor with a FileInfo object to an existing file.
            </summary>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Ozeki.VoIP.ZipArchive.Open(System.String,Ozeki.VoIP.Options)">
            <summary>
            Constructor expects a filepath to an existing file.
            </summary>
            <param name="filePath"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.ZipArchive.Open(System.IO.FileInfo,Ozeki.VoIP.Options)">
            <summary>
            Constructor with a FileInfo object to an existing file.
            </summary>
            <param name="fileInfo"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.ZipArchive.Open(System.IO.Stream)">
            <summary>
            Takes a seekable Stream as a source
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Ozeki.VoIP.ZipArchive.Open(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Takes a seekable Stream as a source
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.ZipArchive.#ctor(System.IO.FileInfo,Ozeki.VoIP.Options)">
            <summary>
            Constructor with a FileInfo object to an existing file.
            </summary>
            <param name="fileInfo"></param>
            <param name="options"></param>
        </member>
        <member name="M:Ozeki.VoIP.ZipArchive.#ctor(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Takes multiple seekable Streams for a multi-part archive
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
        </member>
        <member name="F:Ozeki.VoIP.ExtractOptions.Overwrite">
            <summary>
            overwrite target if it exists
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ExtractOptions.ExtractFullPath">
            <summary>
            extract with internal directory structure
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.GZipVolume.VolumeFile">
            <summary>
            File that backs this volume, if it not stream based
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.Options.None">
            <summary>
            No options specified
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.Options.KeepStreamsOpen">
            <summary>
            SharpCompress will keep the supplied streams open
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.Options.CheckForSFX">
            <summary>
            Check for self-extracting archives
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.Options.GiveDirectoryEntries">
            <summary>
            Return entries for directories as well as files
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarHeader.ReadBytes">
            <summary>
            This is the number of bytes read when reading the header
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarHeader.Flags">
            <summary>
            Untyped flags.  These should be typed when Promoting to another header
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarHeader.AdditionalSize">
            <summary>
            This additional size of the header could be file data
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.FileNameDecoder">
            <summary>
            This is for the crazy Rar encoding that I don't understand
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.FlagUtility.HasFlag``1(System.Int64,``0)">
            <summary>
            Returns true if the flag is set on the specified bit field.
            Currently only works with 32-bit bitfields. 
            </summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.FlagUtility.HasFlag``1(System.UInt64,``0)">
            <summary>
            Returns true if the flag is set on the specified bit field.
            Currently only works with 32-bit bitfields. 
            </summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.FlagUtility.HasFlag(System.UInt64,System.UInt64)">
            <summary>
            Returns true if the flag is set on the specified bit field.
            Currently only works with 32-bit bitfields. 
            </summary>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.FlagUtility.HasFlag``1(``0,``0)">
            <summary>
            Returns true if the flag is set on the specified bit field.
            Currently only works with 32-bit bitfields. 
            </summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.FlagUtility.HasFlag(System.Int64,System.Int64)">
            <summary>
            Returns true if the flag is set on the specified bit field.
            Currently only works with 32-bit bitfields. 
            </summary>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.FlagUtility.SetFlag``1(System.Int64,``0,System.Boolean)">
            <summary>
            Sets a bit-field to either on or off for the specified flag.
            </summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to change</param>
            <param name="on">bool</param>
            <returns>The flagged variable with the flag changed</returns>
        </member>
        <member name="M:Ozeki.VoIP.FlagUtility.SetFlag``1(``0,``0,System.Boolean)">
            <summary>
            Sets a bit-field to either on or off for the specified flag.
            </summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to change</param>
            <param name="on">bool</param>
            <returns>The flagged variable with the flag changed</returns>
        </member>
        <member name="P:Ozeki.VoIP.TarVolume.VolumeFile">
            <summary>
            File that backs this volume, if it not stream based
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ZipVolume.VolumeFile">
            <summary>
            File that backs this volume, if it not stream based
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the same polynomial
            used by Zip. This type is used internally by DotNetZip; it is generally not used
            directly by applications wishing to create, read, or manipulate zip archive
            files.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ozeki.VoIP.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ozeki.VoIP.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
            Get the CRC32 for the given (word,byte) combo.  This is a computation
            defined by PKzip.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Ozeki.VoIP.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:Ozeki.VoIP.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
            Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
            This is useful when using a divide-and-conquer approach to calculating a CRC.
            Multiple threads can each calculate a CRC32 on a segment of the data, and then
            combine the individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="P:Ozeki.VoIP.CRC32.TotalBytesRead">
            <summary>
            indicates the total number of bytes read on the CRC stream.
            This is used when writing the ZipDirEntry when compressing files.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:Ozeki.VoIP.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
            Instances returned from this constructor will leave the underlying stream
            open upon Close().
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Ozeki.VoIP.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            The constructor allows the caller to specify how to handle the underlying
            stream at close.
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the CrcCalculatorStream.; false otherwise.</param>
        </member>
        <member name="M:Ozeki.VoIP.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            A constructor allowing the specification of the length of the stream to read.
            </summary>
            <remarks>
            Instances returned from this constructor will leave the underlying stream open
            upon Close().
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:Ozeki.VoIP.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            A constructor allowing the specification of the length of the stream to
            read, as well as whether to keep the underlying stream open upon Close().
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the CrcCalculatorStream.; false otherwise.</param>
        </member>
        <member name="M:Ozeki.VoIP.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ozeki.VoIP.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:Ozeki.VoIP.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not implemented.
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Ozeki.VoIP.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="P:Ozeki.VoIP.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
             Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
             This is either the total number of bytes read, or the total number of bytes
             written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.CrcCalculatorStream.Crc">
            <summary>
            Provides the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CrcCalculatorStream.LeaveOpen">
            <summary>
            Indicates whether the underlying stream will be left open when the
            CrcCalculatorStream is Closed.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CrcCalculatorStream.CanSeek">
            <summary>
            Indicates whether the stream supports seeking.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CrcCalculatorStream.Length">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CrcCalculatorStream.Position">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DeflateManager.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:Ozeki.VoIP.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:Ozeki.VoIP.ZlibStream"/>
             <seealso cref="T:Ozeki.VoIP.GZipStream"/>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,Ozeki.VoIP.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,Ozeki.VoIP.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.
            </summary>
            <remarks>
            This may or may not result in a <c>Close()</c> call on the captive stream.
            See the constructors that have a <c>leaveOpen</c> parameter for more information.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ozeki.VoIP.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ozeki.VoIP.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ozeki.VoIP.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ozeki.VoIP.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:Ozeki.VoIP.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ozeki.VoIP.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ozeki.VoIP.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:Ozeki.VoIP.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ozeki.VoIP.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ozeki.VoIP.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:Ozeki.VoIP.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:Ozeki.VoIP.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ozeki.VoIP.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ozeki.VoIP.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ozeki.VoIP.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ozeki.VoIP.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ozeki.VoIP.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ozeki.VoIP.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ozeki.VoIP.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Ozeki.VoIP.FlushType">
            <summary>
            Describes how to flush the current deflate operation. 
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:Ozeki.VoIP.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:Ozeki.VoIP.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases. 
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:Ozeki.VoIP.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:Ozeki.VoIP.ZlibStream"/> and <see cref="T:Ozeki.VoIP.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:Ozeki.VoIP.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:Ozeki.VoIP.DeflateStream"/>
             <seealso cref="T:Ozeki.VoIP.ZlibStream"/>
        </member>
        <member name="F:Ozeki.VoIP.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,Ozeki.VoIP.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:Ozeki.VoIP.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:Ozeki.VoIP.GZipStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,Ozeki.VoIP.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,Ozeki.VoIP.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.
            </summary>
            <remarks>
            This may or may not result in a <c>Close()</c> call on the captive stream.
            See the doc on constructors that take a <c>leaveOpen</c> parameter for more information.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ozeki.VoIP.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ozeki.VoIP.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ozeki.VoIP.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ozeki.VoIP.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ozeki.VoIP.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ozeki.VoIP.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ozeki.VoIP.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ozeki.VoIP.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ozeki.VoIP.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ozeki.VoIP.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ozeki.VoIP.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.ParallelDeflateOutputStream">
             <summary>
               A class for compressing and decompressing streams using the
               Deflate algorithm with multiple threads.
             </summary>
            
             <remarks>
             <para>
               This class is for compression only, and that can be only
               through writing.
             </para>
            
             <para>
               For more information on the Deflate algorithm, see IETF RFC 1951, "DEFLATE
               Compressed Data Format Specification version 1.3."
             </para>
            
             <para>
               This class is similar to <see cref="T:Ozeki.VoIP.DeflateStream"/>, except
               that this implementation uses an approach that employs multiple worker
               threads to perform the DEFLATE.  On a multi-cpu or multi-core computer,
               the performance of this class can be significantly higher than the
               single-threaded DeflateStream, particularly for larger streams.  How
               large?  Anything over 10mb is a good candidate for parallel compression.
             </para>
            
             <para>
               The tradeoff is that this class uses more memory and more CPU than the
               vanilla DeflateStream, and also is less efficient as a compressor. For
               large files the size of the compressed data stream can be less than 1%
               larger than the size of a compressed data stream from the vanialla
               DeflateStream.  For smaller files the difference can be larger.  The
               difference will also be larger if you set the BufferSize to be lower
               than the default value.  Your mileage may vary. Finally, for small
               files, the ParallelDeflateOutputStream can be much slower than the vanilla
               DeflateStream, because of the overhead of using the thread pool.
             </para>
            
             </remarks>
             <seealso cref="T:Ozeki.VoIP.DeflateStream"/>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.#ctor(System.IO.Stream)">
             <summary>
             Create a ParallelDeflateOutputStream.
             </summary>
             <remarks>
            
             <para>
               This stream compresses data written into it via the DEFLATE
               algorithm (see RFC 1951), and writes out the compressed byte stream.
             </para>
            
             <para>
               The instance will use the default compression level, the default
               buffer sizes and the default number of threads and buffers per
               thread.
             </para>
            
             <para>
               This class is similar to <see cref="T:Ozeki.VoIP.DeflateStream"/>,
               except that this implementation uses an approach that employs
               multiple worker threads to perform the DEFLATE.  On a multi-cpu or
               multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream,
               particularly for larger streams.  How large?  Anything over 10mb is
               a good candidate for parallel compression.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ParallelDeflateOutputStream to compress
             data.  It reads a file, compresses it, and writes the compressed data to
             a second, output file.
            
             <code>
             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
             int n= -1;
             String outputFile = fileToCompress + ".compressed";
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new ParallelDeflateOutputStream(raw))
                     {
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim buffer As Byte() = New Byte(4096) {}
             Dim n As Integer = -1
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                     Using compressor As Stream = New ParallelDeflateOutputStream(raw)
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to which compressed data will be written.</param>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionLevel)">
            <summary>
              Create a ParallelDeflateOutputStream using the specified CompressionLevel.
            </summary>
            <remarks>
              See the <see cref="M:Ozeki.VoIP.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Ozeki.VoIP.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionLevel,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Ozeki.VoIP.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionLevel,Ozeki.VoIP.CompressionStrategy,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream using the specified
            CompressionLevel and CompressionStrategy, and specifying whether to
            leave the captive stream open when the ParallelDeflateOutputStream is
            closed.
            </summary>
            <remarks>
              See the <see cref="M:Ozeki.VoIP.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="strategy">
              By tweaking this parameter, you may be able to optimize the compression for
              data with particular characteristics.
            </param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               To use the ParallelDeflateOutputStream to compress data, create a
               ParallelDeflateOutputStream with CompressionMode.Compress, passing a
               writable output stream.  Then call Write() on that
               ParallelDeflateOutputStream, providing uncompressed data as input.  The
               data sent to the output stream will be the compressed form of the data
               written.
             </para>
            
             <para>
               To decompress data, use the <see cref="T:Ozeki.VoIP.DeflateStream"/> class.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.Dispose(System.Boolean)">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            You must call Close on the stream to guarantee that all of the data written in has
            been compressed, and the compressed data has been written out.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.Reset(System.IO.Stream)">
             <summary>
               Resets the stream for use with another stream.
             </summary>
             <remarks>
               Because the ParallelDeflateOutputStream is expensive to create, it
               has been designed so that it can be recycled and re-used.  You have
               to call Close() on the stream first, then you can call Reset() on
               it, to use it again on another stream.
             </remarks>
            
             <example>
             <code>
             ParallelDeflateOutputStream deflater = null;
             foreach (var inputFile in listOfFiles)
             {
                 string outputFile = inputFile + ".compressed";
                 using (System.IO.Stream input = System.IO.File.OpenRead(inputFile))
                 {
                     using (var outStream = System.IO.File.Create(outputFile))
                     {
                         if (deflater == null)
                             deflater = new ParallelDeflateOutputStream(outStream,
                                                                        CompressionLevel.Best,
                                                                        CompressionStrategy.Default,
                                                                        true);
                         deflater.Reset(outStream);
            
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             deflater.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ParallelDeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.BuffersPerCore">
             <summary>
             The number of buffers per CPU or CPU core.
             </summary>
            
             <remarks>
             <para>
               This property sets the number of memory buffers to create, for every
               CPU or CPU core in the machine.  The divide-and-conquer approach
               taken by this class assumes a single thread from the application
               will call Write().  There will be multiple background threads that
               then compress (DEFLATE) the data written into the stream, and also a
               single output thread, also operating in the background, aggregating
               those results and finally emitting the output.
             </para>
            
             <para>
               The default value is 4.  Different values may deliver better or
               worse results, depending on the dynamic performance characteristics
               of your storage and compute resources.
             </para>
            
             <para>
               The total amount of storage space allocated for buffering will be
               (n*M*S*2), where n is the number of CPUs, M is the multiple (this
               property), S is the size of each buffer (<see cref="P:Ozeki.VoIP.ParallelDeflateOutputStream.BufferSize"/>),
               and there are 2 buffers used by the compressor, one for input and
               one for output. For example, if your machine has 4 cores, and you
               set BuffersPerCore to 3, and you retain the default buffer size of
               128k, then the ParallelDeflateOutputStream will use 3mb of buffer
               memory in total.
             </para>
            
             <para>
               The application can set this value at any time, but it is effective
               only before the first call to Write(), which is when the buffers are
               allocated.
             </para>
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.BufferSize">
             <summary>
               The size of the buffers used by the compressor threads.
             </summary>
             <remarks>
            
             <para>
               The default buffer size is 128k. The application can set this value at any
               time, but it is effective only before the first Write().
             </para>
            
             <para>
               Larger buffer sizes implies larger memory consumption but allows
               more efficient compression. Using smaller buffer sizes consumes less
               memory but result in less effective compression.  For example, using
               the default buffer size of 128k, the compression delivered is within
               1% of the compression delivered by the single-threaded <see cref="T:Ozeki.VoIP.DeflateStream"/>.  On the other hand, using a
               BufferSize of 8k can result in a compressed data stream that is 5%
               larger than that delivered by the single-threaded
               <c>DeflateStream</c>.  Excessively small buffer sizes can also cause
               the speed of the ParallelDeflateOutputStream to drop, because of
               larger thread scheduling overhead dealing with many many small
               buffers.
             </para>
            
             <para>
               The total amount of storage space allocated for buffering will be
               (n*M*S*2), where n is the number of CPUs, M is the multiple (<see cref="P:Ozeki.VoIP.ParallelDeflateOutputStream.BuffersPerCore"/>), S is the size of each buffer (this
               property), and there are 2 buffers used by the compressor, one for
               input and one for output. For example, if your machine has a total
               of 4 cores, and if you set <see cref="P:Ozeki.VoIP.ParallelDeflateOutputStream.BuffersPerCore"/> to 3, and
               you keep the default buffer size of 128k, then the
               <c>ParallelDeflateOutputStream</c> will use 3mb of buffer memory in
               total.
             </para>
            
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.Crc32">
            <summary>
            The CRC32 for the data that was written out, prior to compression.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.BytesProcessed">
            <summary>
            The total number of uncompressed bytes processed by the ParallelDeflateOutputStream.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.CanRead">
            <summary>
            Indicates whether the stream supports Read operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.CanWrite">
            <summary>
            Indicates whether the stream supports Write operations.
            </summary>
            <remarks>
            Returns true if the provided stream is writable.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.Length">
            <summary>
            Reading this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ParallelDeflateOutputStream.Position">
            <summary>
            Reading or Writing this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.   
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream. 
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data. 
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library. 
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Ozeki.VoIP.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ozeki.VoIP.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
             
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:Ozeki.VoIP.Adler">
            <summary>
            Computes an Adler-32 checksum. 
            </summary>
            <remarks>
            The Adler checksum is similar to a CRC checksum, but faster to compute, though less
            reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
            is a required part of the "ZLIB" standard.  Applications will almost never need to
            use this class directly.
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:Ozeki.VoIP.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.#ctor(Ozeki.VoIP.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.Inflate(Ozeki.VoIP.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.InitializeDeflate(Ozeki.VoIP.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.InitializeDeflate(Ozeki.VoIP.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.InitializeDeflate(Ozeki.VoIP.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.InitializeDeflate(Ozeki.VoIP.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.Deflate(Ozeki.VoIP.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.SetDeflateParams(Ozeki.VoIP.CompressionLevel,Ozeki.VoIP.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="P:Ozeki.VoIP.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:Ozeki.VoIP.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:Ozeki.VoIP.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:Ozeki.VoIP.DeflateStream"/>
             <seealso cref="T:Ozeki.VoIP.GZipStream"/>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use the
               default compression level. The "captive" stream will be closed when the
               <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the compressed
             data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,Ozeki.VoIP.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.#ctor(System.IO.Stream,Ozeki.VoIP.CompressionMode,Ozeki.VoIP.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also closed. In
               some cases this is not desired, for example if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be re-read after compression.
               Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             </remarks>
            
             <example>
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is effective only when
             mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.
            </summary>
            <remarks>
            This may or may not result in a <c>Close()</c> call on the captive stream.
            See the constructors that have a  <c>leaveOpen</c> parameter for more information.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ozeki.VoIP.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ozeki.VoIP.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ozeki.VoIP.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ozeki.VoIP.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ozeki.VoIP.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ozeki.VoIP.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ozeki.VoIP.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ozeki.VoIP.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ozeki.VoIP.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ozeki.VoIP.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ozeki.VoIP.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ozeki.VoIP.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ozeki.VoIP.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ozeki.VoIP.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ozeki.VoIP.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="P:Ozeki.VoIP.Decode.DecodeLen">
            <summary> returns the decode Length array</summary>
            <returns> decodeLength
            </returns>
        </member>
        <member name="P:Ozeki.VoIP.Decode.DecodeNum">
            <summary> returns the decode num array</summary>
            <returns> decodeNum
            </returns>
        </member>
        <member name="P:Ozeki.VoIP.Decode.DecodePos">
            <summary> returns the decodePos array</summary>
            <returns> decodePos
            </returns>
        </member>
        <member name="M:Ozeki.VoIP.Pointer.#ctor(System.Byte[])">
            <summary> Initialize the object with the array (may be null)</summary>
            <param name="mem">the byte array
            </param>
        </member>
        <member name="T:Ozeki.VoIP.Unpack20">
            <summary> DOCUMENT ME
            
            </summary>
            <author>  $LastChangedBy$
            </author>
            <version>  $LastChangedRevision$
            </version>
        </member>
        <member name="T:Ozeki.VoIP.Unpack15">
            <summary> DOCUMENT ME
            
            </summary>
            <author>  $LastChangedBy$
            </author>
            <version>  $LastChangedRevision$
            </version>
        </member>
        <member name="F:Ozeki.VoIP.BitInput.MAX_SIZE">
            <summary> the max size of the input</summary>
        </member>
        <member name="M:Ozeki.VoIP.BitInput.#ctor">
            <summary>  </summary>
        </member>
        <member name="M:Ozeki.VoIP.BitInput.AddBits(System.Int32)">
            <summary>
            also named faddbits
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:Ozeki.VoIP.BitInput.GetBits">
            <summary> 
            (also named fgetbits)
            </summary>
            <returns>
            the bits (unsigned short) 
            </returns>
        </member>
        <member name="M:Ozeki.VoIP.BitInput.Overflow(System.Int32)">
            <summary> Indicates an Overfow</summary>
            <param name="IncPtr">how many bytes to inc
            </param>
            <returns> true if an Oververflow would occur
            </returns>
        </member>
        <member name="M:Ozeki.VoIP.GZipReader.Open(System.IO.Stream,Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.Options)">
            <summary>
            Opens a TarReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="listener"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.GZipReader.Open(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Opens a TarReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.IReaderExtensions.WriteEntryToDirectory(Ozeki.VoIP.IReader,System.String,Ozeki.VoIP.ExtractOptions)">
            <summary>
            Extract to specific directory, retaining filename
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IReaderExtensions.WriteEntryToFile(Ozeki.VoIP.IReader,System.String,Ozeki.VoIP.ExtractOptions)">
            <summary>
            Extract to specific file
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RarReader">
            <summary>
            This class faciliates Reading a Rar Archive in a non-seekable forward-only manner
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RarReader.Open(System.IO.Stream,Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.Options)">
            <summary>
            Opens a RarReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="listener"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RarReader.Open(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Opens a RarReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RarReader.Open(System.Collections.Generic.IEnumerable{System.IO.Stream},Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.Options)">
            <summary>
            Opens a RarReader for Non-seeking usage with multiple volumes
            </summary>
            <param name="streams"></param>
            <param name="listener"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RarReader.Open(System.Collections.Generic.IEnumerable{System.IO.Stream},Ozeki.VoIP.Options)">
            <summary>
            Opens a RarReader for Non-seeking usage with multiple volumes
            </summary>
            <param name="streams"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="P:Ozeki.VoIP.RarReaderEntry.CompressedSize">
            <summary>
            The compressed file size
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RarReaderEntry.Size">
            <summary>
            The uncompressed file size
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ReaderFactory.OpenReader(System.IO.Stream,Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.Options)">
            <summary>
            Opens a Reader for Non-seeking usage
            </summary>
            <param name="stream"></param>
            <param name="listener"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ReaderFactory.OpenReader(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Opens a CompressedStreamReader for Non-seeking usage
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.TarGZipReader.Open(System.IO.Stream,Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.Options)">
            <summary>
            Opens a TarGZipReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="listener"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.TarGZipReader.Open(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Opens a TarGZipReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.TarReader.Open(System.IO.Stream,Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.Options)">
            <summary>
            Opens a TarReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="listener"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.TarReader.Open(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Opens a TarReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ZipReader.Open(System.IO.Stream,Ozeki.VoIP.IExtractionListener,Ozeki.VoIP.Options)">
            <summary>
            Opens a ZipReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="listener"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ZipReader.Open(System.IO.Stream,Ozeki.VoIP.Options)">
            <summary>
            Opens a ZipReader for Non-seeking usage with a single volume
            </summary>
            <param name="stream"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.Utility.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ozeki.VoIP.Utility.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ozeki.VoIP.Utility.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ozeki.VoIP.Utility.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ozeki.VoIP.Utility.Fill``1(``0[],System.Int32,System.Int32,``0)">
            <summary>
            Fills the array with an specific value from an specific index to an specific index.
            </summary>
            <param name="array">The array to be filled.</param>
            <param name="fromindex">The first index to be filled.</param>
            <param name="toindex">The last index to be filled.</param>
            <param name="val">The value to fill the array with.</param>
        </member>
        <member name="M:Ozeki.VoIP.Utility.Fill``1(``0[],``0)">
            <summary>
            Fills the array with an specific value.
            </summary>
            <param name="array">The array to be filled.</param>
            <param name="val">The value to fill the array with.</param>
        </member>
        <member name="M:Ozeki.VoIP.Utility.readIntBigEndian(System.Byte[],System.Int32)">
            <summary> Read a int value from the byte array at the given position (Big Endian)
            
            </summary>
            <param name="array">the array to read from
            </param>
            <param name="pos">the offset
            </param>
            <returns> the value
            </returns>
        </member>
        <member name="M:Ozeki.VoIP.Utility.readShortLittleEndian(System.Byte[],System.Int32)">
            <summary> Read a short value from the byte array at the given position (little
            Endian)
            
            </summary>
            <param name="array">the array to read from
            </param>
            <param name="pos">the offset
            </param>
            <returns> the value
            </returns>
        </member>
        <member name="M:Ozeki.VoIP.Utility.readIntLittleEndian(System.Byte[],System.Int32)">
            <summary> Read an int value from the byte array at the given position (little
            Endian)
            
            </summary>
            <param name="array">the array to read from
            </param>
            <param name="pos">the offset
            </param>
            <returns> the value
            </returns>
        </member>
        <member name="M:Ozeki.VoIP.Utility.writeIntBigEndian(System.Byte[],System.Int32,System.Int32)">
            <summary> Write an int value into the byte array at the given position (Big endian)
            
            </summary>
            <param name="array">the array
            </param>
            <param name="pos">the offset
            </param>
            <param name="value">the value to write
            </param>
        </member>
        <member name="M:Ozeki.VoIP.Utility.WriteLittleEndian(System.Byte[],System.Int32,System.Int16)">
            <summary> Write a short value into the byte array at the given position (little
            endian)
            
            </summary>
            <param name="array">the array
            </param>
            <param name="pos">the offset
            </param>
            <param name="value">the value to write
            </param>
        </member>
        <member name="M:Ozeki.VoIP.Utility.incShortLittleEndian(System.Byte[],System.Int32,System.Int16)">
            <summary> Increment a short value at the specified position by the specified amount
            (little endian).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.Utility.WriteLittleEndian(System.Byte[],System.Int32,System.Int32)">
            <summary> Write an int value into the byte array at the given position (little
            endian)
            
            </summary>
            <param name="array">the array
            </param>
            <param name="pos">the offset
            </param>
            <param name="value">the value to write
            </param>
        </member>
        <member name="M:Ozeki.VoIP.SecurityManager.#ctor">
            <summary>
            Reads the Public key file and Loads the RSAParameters with the 
            Modulous and Exponent data.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SecurityManager.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature for a given data.
            </summary>
            <param name="signature">The signature </param>
            <param name="signedData">Original data in Base64</param>
            <returns></returns>
        </member>
        <member name="P:Ozeki.VoIP.BaseAuthenticationInfo.AuthName">
            <summary>
            Gets the value of the auth. name sent in the SIP request.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CommonDependencyGraph">
            <summary>
            Altalanos dependency graph, ami azokat az objektumokat tartalmazza, ami szerver es kliens oldalon ugyanazok.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.DtmfInfo">
            <summary>
            Provides information about the DTMF events.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DtmfInfo.#ctor(Ozeki.VoIP.DtmfSignal,Ozeki.VoIP.DtmfSignalingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DtmfInfo"/> class.
            </summary>
            <param name="signal">The DTMF signal</param>
            <param name="mode">The signaling method.</param>
        </member>
        <member name="P:Ozeki.VoIP.DtmfInfo.Signal">
            <summary>
            Gets the DTMF signal.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DtmfInfo.SignallingMode">
            <summary>
            Gets the signaling mode of the DTMF signal.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.DtmfNamedEventConverter">
            <summary>
            The class that converts int data to DTMF signals
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DtmfNamedEventConverter.FromInt(System.Int32)">
            <summary>
            Converts an integer to a DTMF signal
            </summary>
            <param name="signal">The integer to convert to DTMF signal</param>
            <returns>A DTMF named event</returns>
        </member>
        <member name="M:Ozeki.VoIP.DtmfNamedEventConverter.SignalFromString(System.String)">
            <summary>
            Converts a string to a DTMF integer.
            </summary>
            <param name="signal">The string to convert to DTMF integer.</param>
            <returns>A DTMF integer.</returns>
        </member>
        <member name="M:Ozeki.VoIP.DtmfNamedEventConverter.FromString(System.String)">
            <summary>
            Converts a string to a DTMF event.
            </summary>
            <param name="signal">The string to convert to DTMF event.</param>
            <returns>A DTMF named event.</returns>
        </member>
        <member name="T:Ozeki.VoIP.DtmfNamedEvents">
            <summary>
            DtmfGenerator Named Events
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf0">
            <summary>DtmfGenerator tone 0</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf1">
            <summary>DtmfGenerator tone 1</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf2">
            <summary>DtmfGenerator tone 2</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf3">
            <summary>DtmfGenerator tone 3</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf4">
            <summary>DtmfGenerator tone 4</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf5">
            <summary>DtmfGenerator tone 5</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf6">
            <summary>DtmfGenerator tone 6</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf7">
            <summary>DtmfGenerator tone 7</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf8">
            <summary>DtmfGenerator tone 8</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf9">
            <summary>DtmfGenerator tone 9</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfStar">
            <summary>DtmfGenerator tone *</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfHashMark">
            <summary>DtmfGenerator tone #</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfA">
            <summary>DtmfGenerator tone A</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfB">
            <summary>DtmfGenerator tone B</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfC">
            <summary>DtmfGenerator tone C</summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfD">
            <summary>DtmfGenerator tone D</summary>
        </member>
        <member name="T:Ozeki.VoIP.DtmfSignal">
             <summary>
             DTMF signal.
             </summary>
             <remarks>
            The DTMF signals can be used for interactins between the communication parties. You can only send
            or receive a DTMF signal on a Call object. Every DTMF signal has a certain frequency and duration.
             </remarks>
        </member>
        <member name="M:Ozeki.VoIP.DtmfSignal.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DtmfSignal"/> class.
            </summary>
            <param name="signal">The DTMF tone.</param>
            <param name="duration">The duration of the DTMF tone.</param>
        </member>
        <member name="M:Ozeki.VoIP.DtmfSignal.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Ozeki.VoIP.DtmfSignal"/> is equal to the current <see cref="T:Ozeki.VoIP.DtmfSignal"/>.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.DtmfSignal.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:Ozeki.VoIP.DtmfSignal"/>.</returns>
        </member>
        <member name="P:Ozeki.VoIP.DtmfSignal.Signal">
            <summary>
            Numerical representation of the signal.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DtmfSignal.Duration">
            <summary>
            Duration of the signal.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.DtmfSignalingMode">
            <summary>
            Defines different types of DTMF signaling methods
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfSignalingMode.RFC2833">
            <summary>
            Specially marked events in the RTP stream (RTP EVENT).
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfSignalingMode.SIPINFO">
            <summary>
            The body of the SIP INFO message consists of signaling information.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfSignalingMode.InBand">
            <summary>
            In-band signaling is the sending of metadata and control information within the same band or channel used for voice (e.g. DTMF tones) and can be heard by the callers
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.DtmfSignalingMode.Auto">
            <summary>
            Automatically selects the best method for DTMF signaling.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InfoDtmfEvent">
            <summary>
            Ha SIP INFO-ban jon a DTMF, tartalmazza a duration-t.
            Hogy egyseges legyen, az RFC 2833 miatt, DtmfStarted es DtmfReceived
            eventeket kell hasznalni ennel is.
            Amikor megerkezik az INFO, akkor DtmfStarted, majd inditani kell egy timert a duration-nel.
            Ha a timer tickel, akkor ki kell valtani a DtmfStopped esemenyt.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IExtensionBase">
            <summary>
            Interface for SIP and other type of extensions.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionBase.OnMessageReceived(Ozeki.VoIP.Message)">
            <summary>
            This will be called when an extension sent a message to this extension.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IExtensionBase.ExtensionID">
            <summary>
            Gets the ID of the extension.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IExtensionBase.Type">
            <summary>
            Gets the type of the extension (e.g. SIP).
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.DtmfEventWavePlayer">
            <summary>
            Can play DtmfGenerator tones.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DtmfEventWavePlayer.#ctor">
            <summary>
            Initalizes a new instance of the <see cref="T:Ozeki.VoIP.DtmfEventWavePlayer"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DtmfEventWavePlayer.Start(System.Int32)">
            <summary>
            Starts generating the specified DtmfGenerator tone.
            </summary>
            <param name="dtmfEvent"></param>
        </member>
        <member name="M:Ozeki.VoIP.DtmfEventWavePlayer.Start(Ozeki.VoIP.DtmfNamedEvents)">
            <summary>
            Starts generating the specified DtmfGenerator tone.
            </summary>
            <param name="dtmfEvent"></param>
        </member>
        <member name="M:Ozeki.VoIP.DtmfEventWavePlayer.Stop">
            <summary>
            Stops generating the DtmfGenerator tone.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IMessageHeader">
            <summary>
            Interface for headers in PBX messages.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Message">
            <summary>
            Represents an instant message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.Message.#ctor(Ozeki.VoIP.IExtensionBase,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Message"/> class.
            </summary>
            <param name="source">The extension who sent the message.</param>
            <param name="recipient">The recepient of the message set by the sender.</param>
            <param name="content">Content of the message.</param>
        </member>
        <member name="M:Ozeki.VoIP.Message.#ctor(Ozeki.VoIP.IExtensionBase,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Message"/> class.
            </summary>
            <param name="source">The extension who sent the message.</param>
            <param name="recipient">The recepient of the message set by the sender.</param>
            <param name="content">Content of the message.</param>
            <param name="contentType">Content type of the message.</param>
        </member>
        <member name="M:Ozeki.VoIP.Message.#ctor(Ozeki.VoIP.IExtensionBase,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Message"/> class.
            </summary>
            <param name="source">The extension who sent the message.</param>
            <param name="sender">The sender who sent the message.</param>
            <param name="recipient">The recepient of the message set by the sender.</param>
            <param name="content">Content of the message.</param>
            <param name="contentType">Content type of the message.</param>
        </member>
        <member name="M:Ozeki.VoIP.Message.#ctor(Ozeki.VoIP.IExtensionBase,System.String,System.String,System.String,Ozeki.VoIP.MimeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Message"/> class.
            </summary>
            <param name="source">The extension who sent the message.</param>
            <param name="sender">The sender who sent the message.</param>
            <param name="recipient">The recepient of the message set by the sender.</param>
            <param name="content">Content of the message.</param>
            <param name="contentType">Content type of the message.</param>
        </member>
        <member name="M:Ozeki.VoIP.Message.#ctor(Ozeki.VoIP.IExtensionBase,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Message"/> class.
            </summary>
            <param name="source">The extension who sent the message.</param>
            <param name="sender">The sender who sent the message.</param>
            <param name="recipient">The recepient of the message set by the sender.</param>
            <param name="content">Content of the message.</param>
            <param name="contentType">Content type of the message.</param>
            <param name="hopCount">A time-to-live value is decremented when message is precessed.</param>
        </member>
        <member name="M:Ozeki.VoIP.Message.#ctor(Ozeki.VoIP.IExtensionBase,System.String,System.String,System.String,System.String,System.Int32,System.Collections.Generic.List{Ozeki.VoIP.IMessageHeader})">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Message"/> class.
            </summary>
            <param name="source">The extension who sent the message.</param>
            <param name="sender">The sender who sent the message.</param>
            <param name="recipient">The recepient of the message set by the sender.</param>
            <param name="content">Content of the message.</param>
            <param name="contentType">Content type of the message.</param>
            <param name="hopCount">A time-to-live value is decremented when message is precessed.</param>
            <param name="headers">Extra headers.</param>
        </member>
        <member name="M:Ozeki.VoIP.Message.#ctor(System.String,Ozeki.VoIP.IExtensionBase,System.String,System.String,System.String,System.String,System.Int32,System.Collections.Generic.List{Ozeki.VoIP.IMessageHeader})">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Message"/> class.
            </summary>
            <param name="id">The unique identifier of the message.</param>
            <param name="source">The extension who sent the message.</param>
            <param name="sender">The sender who sent the message.</param>
            <param name="recipient">The recepient of the message set by the sender.</param>
            <param name="content">Content of the message.</param>
            <param name="contentType">Content type of the message.</param>
            <param name="hopCount">A time-to-live value is decremented when message is precessed.</param>
            <param name="headers">Extra headers.</param>
        </member>
        <member name="P:Ozeki.VoIP.Message.Source">
            <summary>
            The source extension ID who sent the message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Message.ID">
            <summary>
            Gets the unique identifier of the message
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Message.Sender">
            <summary>
            The name of the sender who sent the message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Message.Recipient">
            <summary>
            The recepient of the message set by the sender.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Message.MessageType">
            <summary>
            The type of the message. Can be used for distinguish different types of message. (eg. email, sms)
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Message.Content">
            <summary>
            Content of the message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Message.ContentType">
            <summary>
            Type of the content.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Message.HopCount">
            <summary>
            A time-to-live value is decremented when message is precessed. 
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Message.Headers">
            <summary>
            Additional message headers.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPHeader">
            <summary>
            Represents a SIP header. Contains the name of the header and its value.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPHeader.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.SIPHeader"/> class.
            </summary>
            <param name="headerName">The name of the header.</param>
            <param name="value">The value of the header.</param>
            <exception cref="T:System.ArgumentException">Throws an exception when value is null.</exception>
        </member>
        <member name="P:Ozeki.VoIP.SIPHeader.HeaderName">
            <summary>
            Gets the name of the SIP header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPHeader.Value">
            <summary>
            Gets or sets the value of the SIP header.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.Account.#ctor(System.String,System.String,System.String)">
            <summary>
            Account constructor.
            </summary>
            <param name="displayName">Displayed name of the account.</param>
            <param name="userName">Username of the account.</param>
            <param name="domain">Domain where the account is registered to. Domain has to contain the IP address and port in IP:PORT format.</param>
        </member>
        <member name="M:Ozeki.VoIP.Account.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Account constructor.
            </summary>
            <param name="displayName">Displayed name of the account.</param>
            <param name="userName">Username of the account.</param>
            <param name="domain">Domain where the account is registered to. If domain is in IP:PORT format, then port is ignored.</param>
            <param name="port">Port of the domain where the account is registered to. If domain is in IP:PORT format, then this parameter is ignored.</param>
        </member>
        <member name="P:Ozeki.VoIP.Account.DisplayName">
            <summary>
            Gets the display name of the account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Account.UserName">
            <summary>
            Gets the user ID of the account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Account.HostName">
            <summary>
            Gets the host name of the account.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IAuthenticator.CheckPassword(Ozeki.VoIP.IUserAgentInstance,System.String,System.String,Ozeki.VoIP.RequestAuthenticationInfo)">
            <summary>
            Validates the Authorization Name and Password against credentials received in an authentication request.
            </summary>
            <param name="extension">Extension to authenticate.</param>
            <param name="authName">Authentication name of the SIP extension to authenticate with.</param>
            <param name="password">Password of the SIP extension to authenticate with.</param>
            <param name="requestAuthInfo">Information about the request that is being authenticated</param>
        </member>
        <member name="T:Ozeki.VoIP.RequestAuthenticationInfo">
            <summary>
            Contains information about a SIP request that will be authenticated.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RequestAuthenticationInfo.ID">
            <summary>
            Gets the authentication ID.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RequestAuthenticationInfo.InstanceInfo">
            <summary>
            Gets information about the SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RequestAuthenticationInfo.From">
            <summary>
            Gets the value of the From header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RequestAuthenticationInfo.To">
            <summary>
            Gets the value of the To header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RequestAuthenticationInfo.CSeq">
            <summary>
            Gets the value of the CSeq header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RequestAuthenticationInfo.RequestMethod">
            <summary>
            Gets the method name of the SIP request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RequestAuthenticationInfo.CallID">
            <summary>
            Gets the value of the Call-ID header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RequestAuthenticationInfo.ContentType">
            <summary>
            Gets the content type of the body.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RequestAuthenticationInfo.IsMidDialogRequest">
            <summary>
            Gets a boolean value indicating whether the request is a mid-dialog request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallManagerExtensions.CallFilter">
            <summary>
            Gets or sets custom call filter when an incoming call received or an outgoing call has been made.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallManagerExtensions.ExtensionStatusChecker">
            <summary>
            Gets or sets an interface that will check custom conditions when routing the call to an extension. (e.g. the dialed extension is disabled, or activated the DND mode).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallManagerExtensions.TransferFilter">
            <summary>
            Gets or sets an interface that filters blind transfer and attended transfer requests.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallManagerExtensions.CallFilter">
            <summary>
            A licenszeleshez kell ez.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICallFilter.FilterCall(Ozeki.VoIP.IBaseCall)">
            <summary>
            Overrides the dial plan and creates a custom call when routing the specified call.
            </summary>
            <param name="call">The incoming or outgoing call that will be routed to an extension.</param>
            <returns>Null, if no filtering has been made.</returns>
        </member>
        <member name="T:Ozeki.VoIP.ITransferFilter">
            <summary>
            Filters blind transfer and attended transfer requests.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallManager.DialplanProvider">
            <summary>
            Gets or sets the dial plan provider used when routing calls.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallManager.DefaultRingTime">
            <summary>
            Gets or sets the default ring time in seconds.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallManager.SessionMode">
            <summary>
            Gets or sets whether peer-to-peer or relay calls are made on the PBX.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallManager.ActiveSessions">
            <summary>
            Gets the currently active sessions.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallManager.SessionContainer">
            <summary>
            Gets the container that contains the sessions.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICallManager.SessionCreated">
            <summary>
            Occurs when a new session has been created.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICallManager.SessionClosed">
            <summary>
            Occurs when a session has been closed.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallManager.RouteCall(Ozeki.VoIP.ISessionCall)">
            <summary>
            Bejovo hivas eseten hivodik meg. A dial plan alapjan fogja routingolni a caller.To-t figyelembe veve.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallManager.RouteCall(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.Destination)">
            <summary>
            Konkretan megadjuk, hogy kit hivjunk fel. Ekkor a routing kimarad az elso korbol (viszont ha pl. Busy, akkor utana mar a routing ismet ervenyesul).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallManager.PreRouteCall(Ozeki.VoIP.ISessionCall)">
            <summary>
            A tenyleges routing elott meg rendszer szinten beleszolhatunk a hivasba (validalas, custom license, stb).
            </summary>
            <returns>True, ha tortent elozetes routing</returns>
        </member>
        <member name="M:Ozeki.VoIP.CallManager.RouteCall(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.RouteParams)">
            <summary>
            Lekerdezi a dial plantol a destinationt, majd legyart a destination-hoz egy hivast.
            Ha tortent kozben valami error, arrol ertesulunk.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallManager.NotifyTransferState(Ozeki.VoIP.CallSession,Ozeki.VoIP.TransferState)">
            <summary>
            Notifies the state of the attended transfer to the other sessions.
            </summary>
            <param name="attendedSession">The transferred session.</param>
            <param name="transferState">The state of the transfer.</param>
        </member>
        <member name="M:Ozeki.VoIP.CallManager.CloseAllSessions(Ozeki.VoIP.CallSession)">
            <summary>
            Egy bejott hivas elinditott sessionjeit toroljuk call ID alapjan.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallRouter.Route(Ozeki.VoIP.RouteParams)">
            <summary>
            Elvegzi a routingot a megadott parameterek alapjan. ha kell, ujra routingol. Call-t nem gyart, csak megmondja, hogy kit kell felhivni.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallRouter.RouteWithoutDialplan(Ozeki.VoIP.RouteParams,Ozeki.VoIP.Destination)">
            <summary>
            Elvegzi a routingot, de a dial plant kihagyja. Lenyegeben csak a destinationt fogja vizsgalni, hogy elerheto-e.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallRouter.RouteOnce(Ozeki.VoIP.RouteParams)">
            <summary>
            A megadott parameterek alapjan egyszer lefuttatja a route mechanizmust a megadott parameterekkel.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallRouter.RouteToDestination(Ozeki.VoIP.RouteParams,Ozeki.VoIP.Destination)">
            <summary>
            Kihagyja a dial plant, es a megadott destination-hoz iranyitja a hivast.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallRouter.SetDestinationDefaults(Ozeki.VoIP.Destination,Ozeki.VoIP.RouteParams)">
            <summary>
            Beallitja a callee DialInfo-jat a dialplan-ben megadott ertekek szerint. Ha nem megfeleloek, akkor alapertelmezettet allit be.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IDialplanProvider.GetDestination(Ozeki.VoIP.RouteInfo)">
            <summary>
            Gets the destination that will be called.
            </summary>
            <param name="routeInfo">Information about the route such as caller, route state.</param>
            <returns>The routing result</returns>
        </member>
        <member name="M:Ozeki.VoIP.IDialplanProvider.GetSessionMode(Ozeki.VoIP.IBaseCall,Ozeki.VoIP.IBaseCall,Ozeki.VoIP.SessionMode)">
            <summary>
            Retrieves the session mode used when making call between two parties.
            </summary>
            <param name="caller">The caller</param>
            <param name="callee">The callee</param>
            <param name="defaultSessionMode">The session mode that would be used by default</param>
            <returns>The session mode</returns>
        </member>
        <member name="P:Ozeki.VoIP.IDialplanProvider.Name">
            <summary>
            Gets the name of the dial plan provider.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Destination">
            <summary>
            Contains destination details for the dial plan.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IDialplanResult.Type">
            <summary>
            Gets the type of the dial plan result.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Destination.ExtensionID">
            <summary>
            Gets or sets the ID of the extensions who will be called.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Destination.DialInfo">
            <summary>
            Gets or sets the caller ID and dialed number for the destination.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Destination.RingTime">
            <summary>
            Gets or sets the ring time of the destination (in seconds).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Destination.Type">
            <summary>
            Gets the type of the dial plan destination.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Destination.AdditionalParameters">
            <summary>
            Provides a placeholder for additional parameters during routing
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RedirectDestination.Type">
            <summary>
            Gets the type of the dial plan destination.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RedirectDestination.ReasonPhrase">
            <summary>
            Gets or sets the custom reason phrase that will be present int the SIP status line.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RejectDestination.StatusCode">
            <summary>
            Gets or sets the status code for the response.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RejectDestination.ReasonPhrase">
            <summary>
            Gets or sets the reason for the response.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RejectDestination.Type">
            <summary>
            Gets the type of the dial plan destination.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteInfo.SourceExtension">
            <summary>
            Gets the source extension who dialed the number.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteInfo.SourceInitialDialInfo">
            <summary>
            Gets the dial information that the source initiated the call with (caller ID, dialed number).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteInfo.PrevDialedDestination">
            <summary>
            Gets the ID of the previously dialed extension.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteInfo.DialInfo">
            <summary>
            Gets the currently dialed number and current caller ID.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteInfo.DialedDestination">
            <summary>
            Gets the currently dialed destination.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteInfo.State">
            <summary>
            Gets the state of the route.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteInfo.SessionIds">
            <summary>
            Gets the IDs of the routed session.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteInfo.Transferee">
            <summary>
            Gets information about the transferee when the call is being transferred.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.SourceExtension">
            <summary>
            Hivo extension
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.SourceExtensionID">
            <summary>
            Hivo extension azonositoja.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.SourceInitialDialInfo">
            <summary>
            Az a callerID/szam, amit a hivo elsonek tarcsazott.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.DialInfo">
            <summary>
            A jelenlegi callerID/dialed, ami alapjan route-olunk.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.Dialed">
            <summary>
            A jelenlegi callerID/dialed, ami alapjan route-olunk.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.RouteState">
            <summary>
            A route-olas jelenlegi allapota (pl. calling, not found stb.)
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.SessionIds">
            <summary>
            Session azonositoja, amit route-olunk
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.Error">
            <summary>
            Ha volt valamilyen hiba, itt lehet megadni, hogy milyen SIP response-t kuldjuk vissza.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.PrevResult">
            <summary>
            Az elozo routing soran visszaadott ertek.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.PreExistingRouteSet">
            <summary>
            Elore definialt routing history elemek.
            Session-bol valo routinghoz kell, hogy ne tudjuk ugyanahhoz az extension-hoz visszairanyitani a hivast.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.IsIncomingCall">
            <summary>
            Bejovo hivast route-olunk, vagy sem. Arra hasznlajuk, hogy tudjuk, hogy mindenkeppen letre kell-e hozni session-t neki, vagy sem.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.Transferee">
            <summary>
            Az, akit transferalunk
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.PrevDialedDestination">
            <summary>
            Elozoleg hivott destination
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RouteParams.IsTransferredCall">
            <summary>
            Megmondjuk, hogy transferalt hivast routingolunk.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RoutingHistory.AddDestination(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.Destination)">
            <summary>
            Adds a new destination to the routing history of the call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RoutingHistory.Clear">
            <summary>
            Clears the routing history.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RoutingHistory.Save(System.String)">
            <summary>
            Saves the history of the call and removes it from the history.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RoutingResult">
            <summary>
            Provides information about the result of the routing.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RoutingResult.Status">
            <summary>
            Gets the final status of the routing.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RoutingResult.Error">
            <summary>
            Gets the error response that will be sent to the caller if no extension will be called.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RoutingResult.LastRoutingState">
            <summary>
            Gets the last routing state of the routing process (calling, busy, etc.)
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RoutingResult.DestinationExtension">
            <summary>
            Gets the extension who will be called.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RoutingResult.DialplanResult">
            <summary>
            Gets the result received from the the dial plan. (eg. connect, reject, disconnect)
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RoutingResult.ExtensionStatus">
            <summary>
            Gets the availability status of the extension.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RoutingResult.DialplanDestination">
            <summary>
            Gets the destination info received from the dial plan.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RoutingResult.CalleeDialInfo">
            <summary>
            Gets the info the callee party will be dialed with.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RoutingResultStatus">
            <summary>
            Defines states for routing.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.Connect">
            <summary>
            The incoming call will be connected to an extension.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.ExtensionNotFound">
            <summary>
            The extension is not registered to the PBX.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.ExtensionNotAvailable">
            <summary>
            The extension is registered to the PBX but cannot receive incoming calls for some reason (eg. max call limit reached, DND is turned on, etc.).
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.DialplanDestinationError">
            <summary>
            No destination was given in the dial plan provider.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.Redirection">
            <summary>
            The incoming call will be forwarded to another SIP device.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.Reject">
            <summary>
            The incoming call will be rejected.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.Error">
            <summary>
            An error occurred during routing (eg. invalid route parameters, dial plan error or loop detected etc.)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.DialEmpty">
            <summary>
            The dialed number was empty.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.LoopDetected">
            <summary>
            A loop detected in the dial plan.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.MaxDepthReached">
            <summary>
            The maximum number of re-routing attempts reached.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RoutingResultStatus.DialplanAbort">
            <summary>
            The dial plan aborted the call (returned null destination).
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ICallLimitConfigurator">
            <summary>
            Provides an interface to configure the license limitation.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallLimitConfigurator.MaxCallLimitMode">
            <summary>
            Gets or sets the type of the playback when the max concurrent calls limit reached.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallLimitConfigurator.CustomSpeechText">
            <summary>
            Gets or sets the text that will be played to the caller when the CallLimitMode is set to CustomSpeech.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallLimitConfigurator.CustomWavFilePath">
            <summary>
            Gets or sets the path of the wave file that will be played to the caller when the CallLimitMode is set to CustomWavFile
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallLimitMode">
            <summary>
            Specifies playback modes when the maximum call limit is reached.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallLimitMode.OzekiDemoSpeech">
            <summary>
            Plays the default Ozeki demo speech.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallLimitMode.CustomTextToSpeech">
            <summary>
            Plays a custom text with the default text-to-speech engine.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallLimitMode.WavFile">
            <summary>
            Plays a custom wav file.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallLimitMode.RejectCall">
            <summary>
            Rejects the incoming call or cancels an outgoing call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IConfigurator.EnableCodec(System.Int32)">
            <summary>
            Enables the codec with the specified payload type.
            </summary>
            <param name="payloadType"></param>
        </member>
        <member name="M:Ozeki.VoIP.IConfigurator.DisableCodec(System.Int32)">
            <summary>
            Disables the codec with the specified payload type.
            </summary>
            <param name="payloadType"></param>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.Server_UserAgentName">
            <summary>
            Gets or sets the value of the User-Agent header field in the SIP messages.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.Registration_DefaultExpireTime">
            <summary>
            Gets or sets the default expiration time of the SIP extensions.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.SDP_SessionName">
            <summary>
            Gets os sets the value of the Session Name attribute in the SDP messages.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.SessionTimerInterval">
            <summary>
            Gets or sets the interval between keep-alive packets in seconds.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.Authentication_NonceExpirationTime">
            <summary>
            Gets or sets the time interval when new nonce will be generated (in seconds).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.Authentication_Realm">
            <summary>
            Gets or sets the value of the realm when authenticating the endpoints.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.Authentication_UnauthWarningMessage">
            <summary>
            Gets or sets the value of the Warning header field in SIP messages when an unauthorized response sent.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.ListenedEndpoints">
            <summary>
            Gets the list of the listened endpoints.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.NatConfiguration">
            <summary>
            Gets the NAT configuration.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.NatQueryInterval">
            <summary>
            Gets or sets the query interval for checking external address.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.Certificates">
            <summary>
            Gets or sets the server certificates for TLS connection.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.Codecs">
            <summary>
            Gets the list of the available codecs.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.VideoEncoderQuality">
            <summary>
            Gets or sets the quality of the sent video.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IConfigurator.SRTPMode">
            <summary>
            Gets or sets the default SRTP mode for calls where SRTP mode is not specified manually.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionContainer.TryAddExtension(Ozeki.VoIP.IExtensionBase)">
            <summary>
            Attempts to add the specified extension to the container.
            </summary>
            <param name="extension"></param>
            <returns>True if the extension was added to the container successfully; otherwise, false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionContainer.TryRemoveExtension(Ozeki.VoIP.IExtensionBase)">
            <summary>
            Attempts to remove the specified extension from the container.
            </summary>
            <param name="extension"></param>
            <returns>True if the extension was removed from the container successfully; otherwise, false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionContainer.TryRemoveSIPExtension(Ozeki.VoIP.ISIPExtension)">
            <summary>
            Attempts to remove the SIP extension from the container.
            </summary>
            <param name="extension"></param>
            <returns>True if the extension was removed from the container successfully; otherwise, false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionContainer.GetExtension(System.String)">
            <summary>
            Retreives all the extensions with the specified username from the container.
            </summary>
            <param name="userName"></param>
            <returns>A list containing the extensions.</returns>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionContainer.GetExtensions">
            <summary>
            Retreives all extensions from the container.
            </summary>
            <returns>A list containing the extensions.</returns>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionContainer.Contains(Ozeki.VoIP.ISIPExtension)">
            <summary>
            Determines whether the container contains the specified extension.
            </summary>
            <param name="extension"></param>
            <returns>True if the container contains the extension; otherwise, false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionContainer.Clear">
            <summary>
            Removes all extensions from the container.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionFactory.CreateSIPTrunk(Ozeki.VoIP.SIPExtensionConfiguration)">
            <summary>
            Creates a SIP extension for a SIP trunk.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionFactory.RegisterSIPTrunk(Ozeki.VoIP.ISIPExtension)">
            <summary>
            Registers the SIP trunk extension to the system.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionFactory.UnregisterSIPTrunk(Ozeki.VoIP.ISIPExtension)">
            <summary>
            Unregisters the SIP trunk extension from the system.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionFactory.CreateSIPClientExtension(System.String,Ozeki.VoIP.PhoneLineConfiguration)">
            <summary>
            Creates a SIP extension that can register to a remote PBX (such as a VoIP provider or another Ozeki PBX instance).
            </summary>
            <param name="extensionID">The local identifier of the extension.</param>
            <param name="config">The configuration for the SIP client.</param>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionFactory.RegisterSIPClientExtension(Ozeki.VoIP.ISIPClientExtension)">
            <summary>
            Registers the SIP client to the PBX.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionFactory.UnregisterSIPClientExtension(Ozeki.VoIP.ISIPClientExtension)">
            <summary>
            Unregisters the SIP client from the PBX.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionFactory.GetRegistrationCount(Ozeki.VoIP.SIPAddress)">
            <summary>
            Gets the number of registrations with the specified SIP account.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtensionFactory.GetRegistrations(Ozeki.VoIP.SIPAddress)">
            <summary>
            Gets the SIP extensions who registered with the specified SIP account.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IExtension.OnCalled(Ozeki.VoIP.IPBXCall,Ozeki.VoIP.IncomingCallParams)">
            <summary>
            This will be called when the extension has been called.
            </summary>
            <param name="call">The incoming call object for the extension.</param>
            <param name="callParams">Additional parameters for the call.</param>
        </member>
        <member name="T:Ozeki.VoIP.NotFoundExtension">
            <summary>
            Call Manager NotFound hivasokhoz hasznalt extension.
            </summary>
            <remarks>
            Egy session-be mindig kell Caller es Callee. Ha egy hivott extension nincs beregisztralva, akkor nincs kinek hivast krealnia, igy nincs Callee.
            Ezert kell ez a virtualis extension, hogy akkor egy fake PBX-es callt hozunk letre a Callee szerepeben.
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.SIPExtensionIdentifier">
            <summary>
            Az extension beazonositasat vegzo osztaly. Pontosabban, hogy az adott uzenetet melyik extension kuldte.
            Autentikalt endpoint (RemoteEndPoint, From, AuthName) es beregisztralt extension (RemoteEndPoint, AuthName, UserName)
            infok alapjan hatarozzuk meg.
            </summary>
            <remarks>
            Redmine #Bug #1307
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.SIPExtensionIdentifier.GetExpires(Ozeki.VoIP.Request,System.Boolean,Ozeki.VoIP.SIPAddress)">
            <summary>
            Determines the expires value from the request.
            </summary>
            <param name="req">The request.</param>
            <param name="useDefaultValue">Determines wheter if no expires found in the request, return the default expires value.</param>
            <param name="contact">The contact looking for; if null, the first contact will be processed.</param>
            <returns>Expires value</returns>
        </member>
        <member name="T:Ozeki.VoIP.SIPExtensionKeepaliveService">
            <summary>
            A NAT keepalive. NAT expiration UDP 1 perc TCP 24 óra
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPExtensionRegisterContainer">
            <summary>
            Stores the registered SIP extensions.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPExtensionRegisterContainer.TryAddExtension(Ozeki.VoIP.SIPClientID,Ozeki.VoIP.ISIPExtension)">
            <summary>
            Attempts to add the specified extension to the container.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPExtensionRegisterContainer.TryRemoveExtension(Ozeki.VoIP.SIPClientID)">
            <summary>
            Attempts to remove the specified extension from the container.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPExtensionRegisterContainer.Contains(Ozeki.VoIP.SIPClientID)">
            <summary>
            Determines whether the container contains the specified extension.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPExtensionRegisterContainer.GetExtension(Ozeki.Network.TransportInfo)">
            <summary>
            Gets the specified extension from the container.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPExtensionRegisterContainer.GetExtension(Ozeki.VoIP.SIPClientID,System.Boolean)">
            <summary>
            Gets the specified extension from the container.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPExtensionRegisterContainer.GetAllExtensions">
            <summary>
            Gets all extensions from the container.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPExtensionRegisterContainer.GetExtensions(Ozeki.VoIP.SIPAddress)">
            <summary>
            Gets all extensions to the given address from the container (REGISTER bindings).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPExtensionRegisterContainer.GetExtensions(Ozeki.Network.TransportInfo)">
            <summary>
            Gets all extensions to the given address from the container (REGISTER bindings).
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISIPClientCommon">
            <summary>
            Defines properties and methods for a SIP client on both server and client side.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientCommon.InstanceInfo">
            <summary>
            Gets basic information about the SIP extension such as identity, contact or transport info.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientCommon.BaseConfig">
            <summary>
            Gets the base configuration for the SIP extension.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientCommon.OutboundCallHeaderMapper">
            <summary>
            Gets the SIP header mapper for outgoing SIP messages.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientCommon.InboundCallHeaderMapper">
            <summary>
            Gets the SIP header mapper for incoming SIP messages.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IUserAgentInstance.GetManager``1">
            <summary>
            Gets the specified manager of the UA instance with <see cref="!:T"/> type.
            </summary>
            <typeparam name="T">The type of the manager</typeparam>
        </member>
        <member name="M:Ozeki.VoIP.IUserAgentInstance.GetNextCSeq">
            <summary>
            Retrieves the next out-of-dialog CSeq.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IPBXSIPClient.OnCalled(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall)">
            <summary>
            Creates a call object to that extension. This method will be called when calling the extension.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IPBXSIPClient.Options">
            <summary>
            Gets an interface for sending and receiving OPTIONS requests and responses.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISIPClient">
            <summary>
            Represents a SIP client. Contains properties, methods and events for monitoring the SIP client.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISIPClientConfigurable">
            <summary>
            Defines a configurable SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfigurable.Config">
            <summary>
            Gets the configuration for the SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClient.SIPAccount">
            <summary>
            Gets the associated SIP account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClient.RegistrationInfo">
            <summary>
            Gets information about the registration process.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClient.RegState">
            <summary>
            Gets the state of the SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClient.SourceIdentifier">
            <summary>
            Gets or sets an object that can be used to identify a SIP message sent to the client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClient.Subscription">
            <summary>
            Gets the manager that can handle SIP subscriptions (SUBSCRIBE).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClient.CustomProperties">
            <summary>
            Gets a collection that can be used for storing custom values for the SIP client.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ISIPClient.RegistrationStateChanged">
            <summary>
            Occurs when the registration state of the SIP client has changed.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPExtension.AuthName">
            <summary>
            Gets the authentication name of the extension.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPConfiguration.InboundCallMapping">
            <summary>
            Gets the SIP header mapping for incoming calls.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPConfiguration.OutboundCallMapping">
            <summary>
            Gets the SIP header mapping for outbound calls.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPConfiguration.NatConfig">
            <summary>
            Gets the NAT configuration for the SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPConfiguration.UseOutboundProxyAddress">
            <summary>
            Gets a boolean value indicating whether the SIP client will send SIP messages to the outbound proxy address.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPConfiguration.ExplicitIdentity">
            <summary>
            Gets a boolean value indicating whether the SIP identity is fixed.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ListenPortConfigContainer">
            <summary>
            PBX-nel a SetListenPort()-nal megadott portokat tarolja.
            Ha a halokartyakat letiltjak, majd engedelyezik, akkor a portot
            ugyanugy listenelni kell.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PBXNetworkChangeHandler">
            <summary>
            Halozati cimek valtozasat koveti, es annak merten allitja be a transport factory-ket, illetve a listenelt portokat.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PublicAddressContainer">
            <summary>
            Helyi cimhez rendel publikus IP-t az IConfiguratorban beallitott NAT confignak megfeleloen.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PublicAddressResolver">
            <summary>
            Helyi cimhez rendel publikus IP-t az IConfiguratorban beallitott NAT confignak megfeleloen.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PublicAddressResolver.GetPublicIP(System.String,System.String,Ozeki.Network.INatConfiguration)">
            <summary>
            A lokalis cimhez lekeri a kulso IP-t.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallMediaInfo.FromMediaDescription(Ozeki.VoIP.MediaDescription)">
            <summary>
            Retrieves the media information from a media description. (SRTP mode, media types)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CodecDetector">
            <summary>
            Detects which codecs are used during a phone call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CodecDetector.#ctor(Ozeki.VoIP.IPBXSessionCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.CodecDetector"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CodecDetector.CheckStop">
            <summary>
            Megnezi, hogy le kell-e allitani az encoded media data vizsgalatat.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IPBXCallFactory.CreateServerCall(Ozeki.VoIP.IExtensionBase,System.String)">
            <summary>
            Creates an outgoing call on server side.
            </summary>
            <param name="extension"></param>
            <param name="dialedNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.IPBXCallFactory.CreateServerCall(Ozeki.VoIP.IExtensionBase,Ozeki.VoIP.DialParameters)">
            <summary>
            Creates an outgoing call on server side.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ICall">
            <summary>
            Represents a phone call. Defines properties and methods for monitoring and controlling calls.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IBaseCall">
            <summary>
            Base interface for calls.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IBaseCall.Owner">
            <summary>
            Gets the owner of the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IBaseCall.CallID">
            <summary>
            Gets the unique identifier of the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IBaseCall.CallState">
            <summary>
            Gets the state of the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IBaseCall.ReasonOfState">
            <summary>
            Gets the textual context of the call state.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IBaseCall.IsIncoming">
            <summary>
            Gets if the call is an incoming call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IBaseCall.IsAnswered">
            <summary>
            Gets a boolean value indicating whether the call has been answered.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IBaseCall.DialInfo">
            <summary>
            Gets basic information about the call such as caller ID or dialed number.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IBaseCall.CallStateChanged">
            <summary>
            Occurs when the state of the call has changed.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Start">
            <summary>
            Starts the outgoing call.
            </summary>
            <remarks>
            It has no effect on incoming calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Answer">
            <summary>
            Answers the incoming call.
            </summary>
            <remarks>
            It has no effect on outgoing calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Answer(Ozeki.VoIP.CallType)">
            <summary>
            Answers the incoming call with the specified media types.
            </summary>
            <remarks>
            It has no effect on outgoing calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.RingWithEarlyMedia">
            <summary>
            Sends a provisional response with media description to the caller. When early media response is sent, the softphone can send media data to the other party while the phone is still ringing.
            </summary>
            <remarks>
            It has no effect on outgoing calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.RingWithEarlyMedia(Ozeki.VoIP.CallType)">
            <summary>
            Sends a provisional response with media description to the caller. When early media response is sent, the softphone can send media data to the other party while the phone is still ringing.
            </summary>
            <remarks>
            It has no effect on outgoing calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Respond(Ozeki.VoIP.ResponseCodes)">
            <summary>
            Sends a response to the caller with the specified status code.
            </summary>
            <remarks>
            It has no effect on outgoing calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Respond(Ozeki.VoIP.ResponseCodes,System.String)">
            <summary>
            Sends a response to the caller with the specified status code.
            </summary>
            <remarks>
            It has no effect on outgoing calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Reject">
            <summary>
            Rejects the incoming call. 
            </summary>
            <remarks>
            It has no effect on outgoing calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Reject(System.String)">
            <summary>
            Rejects the incoming call. 
            </summary>
            <param name="reason">The reason of the rejection</param>
            <remarks>
            It has no effect on outgoing calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Forward(System.String)">
            <summary>
            Forwards the incoming call to another phone.
            </summary>
            <param name="target">The target number or full address. (eg. '855' or '855@atlanta.com')</param>
            <remarks>
            It has no effect on outgoing calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ICall.HangUp">
            <summary>
            Hangs up the call. If the outgoing call has not been answered yet, it will be cancelled.
            If the incoming call has not been answered, it will be rejected.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICall.ToggleHold">
            <summary>
            Puts the call on hold or takes the call off hold. (toggle)
            If the call is in InCall state, puts it on hold.
            If the call is in LocalHeld or InactiveHeld state, takes it off hold.
            </summary>
            <returns>True, if the call can be taken off hold; false otherwise.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Hold">
            <summary>
            Puts the call on hold. If the call is already on local hold, it has no effect.
            </summary>
            <returns>True, if the call can be placed on hold; false otherwise.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICall.Unhold">
            <summary>
            Takes the call off from hold. If the call is in progress, it has no effect.
            </summary>
            <returns>True, if the call can be taken off hold; false otherwise.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICall.BlindTransfer(System.String)">
            <summary>
            Transfers the call to another phone number.
            A blind transfer is defined as a transfer made without notifying the destination party before transferring the call.
            </summary>
            <param name="target">The call will be forwarded to this phone number</param>
        </member>
        <member name="M:Ozeki.VoIP.ICall.AttendedTransfer(Ozeki.VoIP.ICall)">
            <summary>
            Transfers the call to another phone number.
            An attended transfer is a transfer made after notifying the destination party of the transfer.
            </summary>
            <param name="target">The call will be transferred to this call</param>
        </member>
        <member name="M:Ozeki.VoIP.ICall.StartDTMFSignal(Ozeki.VoIP.DtmfNamedEvents)">
            <summary>
            Starts sending the given DTMF signal continously until the StopDTMFSignal method called. The signalling mode will be detected automatically.
            </summary>
            <param name="signal">The event signal.</param>
            <returns>False, if the remote part does not support receiving DTMF signals, or the call is not in state when DTMF signal can be sent; otherwise true.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICall.StartDTMFSignal(Ozeki.VoIP.DtmfNamedEvents,Ozeki.VoIP.DtmfSignalingMode)">
            <summary>
            Starts sending the given DTMF signal continously until the StopDTMFSignal method called. If the remote party does not support the specified method, no DTMF signal will be sent.
            </summary>
            <param name="signal">The event signal.</param>
            <param name="mode">Specifies the method used for signalling (eg. SIP INFO or RTP event)</param>
            <returns>False, if the remote part does not support the specified signalling mode, or the call is not in state when DTMF signal can be sent; otherwise true.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICall.StopDTMFSignal(Ozeki.VoIP.DtmfNamedEvents)">
            <summary>
            Stops the DTMF signalling.
            </summary>
            <param name="signal">The event signal.</param>
            <returns>The duration of the DTMF signaling</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICall.ModifyCallType(Ozeki.VoIP.CallType)">
            <summary>
            Modifies the media used during the call.
            </summary>
            <param name="callType">The type of the call. It can be audio, video or audiovideo</param>
        </member>
        <member name="M:Ozeki.VoIP.ICall.SendInfo(Ozeki.VoIP.InfoData)">
            <summary>
            Sends INFO request to the other party.
            </summary>
            <param name="data">The INFO data</param>
            <returns>True, if the INFO request sent successfully.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICall.SendInstantMessage(System.String)">
            <summary>
            Sends MESSAGE request to the other party.
            </summary>
            <param name="content">The content of the message</param>
            <returns>True, if the MESSAGE request sent successfully.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICall.SendInstantMessage(System.String,System.String)">
            <summary>
            Sends MESSAGE request to the other party.
            </summary>
            <param name="content">The content of the message</param>
            /// <param name="contentType">The content type of the message</param>
            <returns>True, if the MESSAGE request sent successfully.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICall.SendInstantMessage(System.String,Ozeki.VoIP.MimeType)">
            <summary>
            Sends MESSAGE request to the other party.
            </summary>
            <param name="content">The content of the message</param>
            /// <param name="contentType">The content type of the message</param>
            <returns>True, if the MESSAGE request sent successfully.</returns>
        </member>
        <member name="P:Ozeki.VoIP.ICall.TransferInfo">
            <summary>
             Gets information about the call transfer.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICall.Media">
            <summary>
            Gets the media manager that handles the media.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICall.OtherParty">
            <summary>
            Gets information about the remote party.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICall.CallType">
            <summary>
            Gets information about the type of the call. (i.e.: Audio, Video, AudioVideo)
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICall.CustomProperties">
            <summary>
            Gets a collection that can be used for storing custom values for the call.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICall.DtmfReceived">
            <summary>
            Occurs when the other party stopped the DTMF signalling.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICall.DtmfStarted">
            <summary>
            Occurs when the other party started the DTMF signalling.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICall.InfoDataReceived">
            <summary>
            Occurs when the other party sent data in a SIP INFO request.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICall.InfoResponseReceived">
            <summary>
            Occurs when response received to a sent SIP INFO request.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICall.InstantMessageReceived">
            <summary>
            Occurs when an the other party sent an instant message.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICall.InstantMessageResponseReceived">
            <summary>
            Occurs when a delivery response arrived to a sent message.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICall.TransferStateChanged">
            <summary>
            Occurs when the transfer state changed.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICall.CallTypeChanged">
            <summary>
            Occurs when the call type changed.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IPBXSessionCall">
            <summary>
            Osszefogja a PBX-es phone callt, es a session-ben reszt vevo hivasok interface-et
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISessionCall">
            <summary>
            Egy session-ben resztvevo call interface-e
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.BaseAbstractCall">
            <summary>
            Base class for SIP and local calls. This class is used within the sessions.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPCall">
            <summary>
            Egy SIP hivast reprezental. Ezen keresztul tortenik a SIP kommunikacio, illetve a hivas adatait itt erjuk el.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IBaseSIPCall.BasicInfo">
            <summary>
            Gets basic information about the call such as the owner, call ID etc.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPCall.#ctor(Ozeki.VoIP.IExtensionBase,Ozeki.VoIP.DialogID,Ozeki.VoIP.SIPCallBasicInfo,Ozeki.VoIP.InviteHeaders,Ozeki.Common.DependencyContainer)">
            <summary>
            Bejovo hivas
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPCall.#ctor(Ozeki.VoIP.IExtensionBase,Ozeki.VoIP.PendingDialogID,Ozeki.VoIP.SIPCallBasicInfo,Ozeki.VoIP.DialInfo,Ozeki.Common.DependencyContainer)">
            <summary>
            Kimeno hivas
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISIPBackupService.Backup">
            <summary>
            Gets the details of the registered SIP extensions.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISIPBackupService.Restore(Ozeki.VoIP.SIPBackupInfo)">
            <summary>
            Restores the SIP extensions.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Ozeki.VoIP.INotifierService">
            <summary>
            Can send NOTIFY requests and manages the notifiers.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.INotifierService.RegisterNotifier(Ozeki.VoIP.INotifier)">
            <summary>
            Adds the specified event notifier to the system.
            </summary>
            <returns>True, if the notifier added successfully; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.INotifierService.UnregisterNotifier(Ozeki.VoIP.INotifier)">
            <summary>
            Removes the specified event notifier from the system.
            </summary>
            <returns>True, if the notifier removed successfully; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.INotifierService.SendNotify(Ozeki.VoIP.SubscriptionInfo,System.String)">
            <summary>
            Sends a notification for the given subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SessionStateChangeEventArgs.IsCallAnsweredEvent">
            <summary>
            Gets a boolean value indicating whether the callee answered the call during this state change.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SessionStateChangeEventArgs.IsUnholdEvent">
            <summary>
            Gets a boolean value indicating whether the session state change was an unhold event.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.BlindTransfer(Ozeki.VoIP.CallParty,System.String)">
            <summary>
            Performs blind transfer.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.AttendedTransfer(System.String)">
            <summary>
            Performs attended transfer. The transferee and target will be determined automatically.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.AttendedTransfer(Ozeki.VoIP.CallParty,System.String,Ozeki.VoIP.CallParty)">
            <summary>
            Performs attended transfer. The transferee and target will be given by the user.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.NotifyTransferState(Ozeki.VoIP.TransferState)">
            <summary>
            Notifies the transferor about the state of the transfer.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.Hold">
            <summary>
            Puts the caller and callee on hold.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.Unhold">
            <summary>
            Takes the caller and callee off hold.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.SendDTMF(System.Int32,Ozeki.VoIP.CallParty)">
            <summary>
            Sends DTMF with the specified keycode to the specified party.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.Forward(System.String)">
            <summary>
            Forwards the caller to another extension.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.Close">
            <summary>
            Closes the session without sending BYE request to the peers.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISession.CloseWithHangUp">
            <summary>
            Closes the session and sends a BYE request to the peers. If the call has not been established yet, sends a CANCEL request to the callee.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.MasterSessionID">
            <summary>
            Gets the main identifier of the session. When transferring the session this ID will be set for <see cref="P:Ozeki.VoIP.ISession.MasterSessionID"/> in the transferred session.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.ParentSessionID">
            <summary>
            Gets the identifier of the parent session that created this session.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.SessionID">
            <summary>
            Gets the unique identifier of the session.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.TransferredSessionID">
            <summary>
            Gets the ID of the tranferring session when the session is created via attended tranfer.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.TransferredSessionID2">
            <summary>
            Gets the ID of the other tranferring session when the session is created via attended tranfer.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.SessionState">
            <summary>
            Gets the current state of the session.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.CallerInfo">
            <summary>
            Gets some information about the call of the caller.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.CalleeInfo">
            <summary>
            Gets some information about the call of the callee.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.StartTime">
            <summary>
            Gets the date and time when the session has been started.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.RingDuration">
            <summary>
            Gets the duration while the session was in Ringing state.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.TalkDuration">
            <summary>
            Gets the duration while the parties were in InCall state so far.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.StateDuration">
            <summary>
            Gets the time passed after the last session state change.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISession.IsTransferredSession">
            <summary>
            Gets a boolean value indicating whether this session is a transfer session.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ISession.AttendedTransferRequest">
            <summary>
            Occurs when an attended transfer request has been requested by one of the peers.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ISession.BlindTransferRequest">
            <summary>
            Occurs when an blind transfer request has been requested by one of the peers.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ISession.SessionStateChanged">
            <summary>
            Occurs when the state of the session has changed..
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ISession.MessageSent">
            <summary>
            Occurs when a message request has been sent by one of the peers.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISessionContainer.GetOtherCall(Ozeki.VoIP.IBaseCall)">
            <summary>
            Gets the other party the specified call talking to.
            </summary>
            <param name="call"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ISessionContainer.GetSession(Ozeki.VoIP.IBaseCall)">
            <summary>
            Retrieves the session the call is into.
            </summary>
            <param name="call"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ISessionContainer.GetSession(System.String)">
            <summary>
            Retrieves the session with the specified session ID.
            </summary>
            <param name="sessionID">The session ID.</param>
            <returns>The session.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISessionContainer.GetSessionsByExtension(System.String)">
            <summary>
            Gets the sessions for the given extension.
            </summary>
            <param name="extensionID">The ID of the extension.</param>
            <returns>The list of the sessions.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISessionContainer.GetSessionsByCallID(System.String)">
            <summary>
            Retrieves the active sessions of the specified call leg.
            </summary>
            <param name="callId">The ID of the call leg.</param>
            <returns>The list of sessions.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISessionContainer.GetSessions(System.String,Ozeki.VoIP.SIPAddress,System.String,Ozeki.VoIP.SIPAddress)">
            <summary>
            Gets all the sessions between the given call parties.
            </summary>
            <returns>The list of sessions.</returns>
        </member>
        <member name="P:Ozeki.VoIP.ISessionContainer.ActiveSessions">
            <summary>
            Gets the currently active sessions.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISubSession">
            <summary>
            MainSession alatti session reteg interface.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallSession">
            <summary>
            Represents a call between two peers.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallSession.#ctor(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.SessionMode,Ozeki.VoIP.SessionDependencies,System.Int32,Ozeki.VoIP.SessionIds)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.CallSession"/> class.
            </summary>
            <param name="caller">The call of the caller.</param>
            <param name="callee">The call of the callee.</param>
            <param name="mode">Mode for switching betweeen P2P and relay calls.</param>
            <param name="dependencies">Other services that the session depends on.</param>
            <param name="sessionIds">The session identifiers can be specified. If no session identifiers given, the session will generate them automatically.</param>
            <param name="ringTime">Ringing interval in seconds.</param>
        </member>
        <member name="M:Ozeki.VoIP.CallSession.AttendedTransfer(System.String)">
            <summary>
            Attended transfereli a transfereet a megadott session-ben levo egyik felhez.
            Ezzel a metodussal csak olyan session-oket lehet osszetransferelni, amelyeknel az egyik fel megegyezik.
            A transferee es a target automatikusan lesz meghatarozva.
            </summary>
            <remarks>
            Pelda: SessionA: 856->857, SessionB: 856->860,  AttendedSession: 857->860
            Pelda: SessionA: 856->857, SessionB: 857->858,  AttendedSession: 856->858
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.CallSession.AttendedTransfer(Ozeki.VoIP.CallParty,System.String,Ozeki.VoIP.CallParty)">
            <summary>
            Konkretan megadjuk, hogy ebbol a session-bol ki lesz osszetransferalva a megadott session target-evel.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallSession.CloseWithHangUp">
            <summary>
            Closes the session by sending a BYE or CANCEL request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallSession.Close">
            <summary>
            Closes the session without sending a BYE or CANCEL request.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallEventsBase">
            <summary>
            Handles events between two calls.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallEventsBase.ChangeState(Ozeki.VoIP.SessionState)">
            <summary>
            Changes the states of the caller and callee according to the session state.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SessionAbstract">
            <summary>
            P2P es Relay kozos felulete.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionAbstract.ThirdPartyAttendedTransfer(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.CallParty)">
            <summary>
            Kivulrol a session-on hivjak meg az attended transfert. A request queue-ba kerul.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionAbstract.ThirdPartyBlindTransfer(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.BlindTransferArgs)">
            <summary>
            Kivulrol a session-on hivjak meg a blind transfert. A request queue-ba kerul.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionAbstract.ThirdPartyRedirection(Ozeki.VoIP.RedirectionInfo)">
            <summary>
            A session-on kivulrol iranyitjak at a meg csorgesben levo hivast.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionAbstract.ForceTransfer(Ozeki.VoIP.Transfer)">
            <summary>
            Attended transfer eseten a masik session-re is beallitjuk a transfert. Ha nincs beallitva a masik sessionnek,
            es kozben feljon egy transfer request onnan, akkor a call manager siman elfogadja, ami hibas mukodeshez fog vezetni.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionAbstract.OnRedirected(Ozeki.VoIP.RedirectionInfo)">
            <summary>
            A Callee-tol jott egy 3xx redirection response csorges kozben.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionAbstract.OnAttendedTransferRequested(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.CallParty)">
            <summary>
            Egy ISIPCall kuldott attended transfer requestet. A request queue-ba kerul.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionAbstract.OnBlindTransferRequested(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.BlindTransferArgs)">
            <summary>
            Egy ISIPCall kuldott blind transfer requestet. A request queue-ba kerul.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionAbstract.AttendedTransferRequested(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.CallParty)">
            <summary>
            Ha a queue-ban egy attended transfer request kovetkezik, akkor ez fog meghivodni.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionAbstract.GetRealAttendedTransferTarget(Ozeki.VoIP.ISessionCall,Ozeki.VoIP.ISessionCall,Ozeki.VoIP.CallParty,Ozeki.VoIP.CallParty@)">
            <summary>
            Az ISIPCall-bol a masik session-ben levo masik ISIPCall jon fel. Elo kell keresni, hogy a masik session-ben ki az igazi target.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Invite_BeginCallIndication(System.Object,System.EventArgs)">
            <summary>
            Starting session from call
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_InitialInviteReceived(System.Object,Ozeki.VoIP.InviteArgs)">
            <summary>
            First INVITE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_CancelReceived(System.Object,Ozeki.VoIP.CancelRequestArgs)">
            <summary>
            CANCEL
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_AckReceived(System.Object,Ozeki.VoIP.AckArgs)">
            <summary>
            ACK
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_InviteResponseReceived(System.Object,Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            INVITE response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_ReInviteReceived(System.Object,Ozeki.VoIP.InviteArgs)">
            <summary>
            re-INVITE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_ByeReceived(System.Object,Ozeki.VoIP.ByeRequestArgs)">
            <summary>
            BYE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_InfoReceived(System.Object,Ozeki.VoIP.InfoRequestArgs)">
            <summary>
            INFO
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_InfoResponseReceived(System.Object,Ozeki.VoIP.SIPInfoResponse)">
            <summary>
            INFO response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_MessageReceived(System.Object,Ozeki.VoIP.InstantMessage)">
            <summary>
            MESSAGE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_MessageResponseReceived(System.Object,Ozeki.VoIP.SIPInstantMessageResult)">
            <summary>
            MESSAGE response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_BlindTransferRequested(System.Object,Ozeki.VoIP.BlindTransferArgs)">
            <summary>
            REFER request (blind transfer)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_AttendedTransferRequested(System.Object,Ozeki.VoIP.AttendedTransferArgs)">
            <summary>
            REFER request (attended tranfer)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_TransferResponseReceived(System.Object,Ozeki.VoIP.TransferResponseArgs)">
            <summary>
            REFER response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractCallLeg.Call_TransferStateChanged(System.Object,Ozeki.VoIP.TransferStateChangedEventArgs)">
            <summary>
            REFER NOTIFY request
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InitialCallEventState">
            <summary>
            Kezdeti allapot, nem tortenik semmi.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InitialCallEventState.GeneratePBXCSeq">
            <summary>
            General egy random szamot, mint PBX-es CSeq.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.CalleeSetupEventState">
            <summary>
            The callee is in setup state and no transfer is in progress.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallerSetupEventState">
            <summary>
            Caller Setup allapotban van, es nincs transfer.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.Initial">
            <summary>
            Call has not been started yet.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.Setup">
            <summary>
            Events when establishing the call.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.InCall">
            <summary>
            Events during the active session.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.Transferor">
            <summary>
            Events of the transferor when transferring a call.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.Transferee">
            <summary>
            Events of the transferee when transferring a call.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.TransfereeSetup">
            <summary>
            Events of the transferee when establishing the call with the target.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.TransferTargetSetup">
            <summary>
            Events of the target during the blind transfer
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.ThirdPartyHold">
            <summary>
            Events when put the call on hold by a third party.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.ThirdPartyUnhold">
            <summary>
            Events when take the call off hold by a third party.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallEventStates.PBXReInvite">
            <summary>
            The PBX sends a re-INVITE request to both caller and callee. No media description is modified.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PBXReInviteEventState">
            <summary>
            PBX re-INVITE-ot kuld a call-nak a masik fel SDP-jevel. Az SDP-ben semmilyen modositast nem vegez.
            Ez fokent arra jo, ha valtogatunk a relay-P2P kozott, akkor ebben a state-ben normalisan at tudunk allni.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransfereeCallEventState">
            <summary>
            Events of the transferee. If the transferee hangs up the call, hang up the transferor as well.
            No request must be sent to the transferor except of the BYE request.
            When the transferee sends a re-INVITE, the UA should send a valid answer.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransferorCallEventState">
            <summary>
            Transferor esemenyei. Ha leteszi a hivast, akkor kiszall a transferbol, a masik felet nem kell letenni.
            Egyik in-dialog requestet sem kell atkuldeni a masik felnek.
            Re-INVITE eseten generalunk valid valaszt.
            Ha re-INVITE-ot kuldunk neki, akkor az a transfer veget jelenti.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransfereeSetupEventState">
            <summary>
            Events of the transferee when establishing the call with the target.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransferTargetSetupEventState">
            <summary>
            Events of the transfer target. The session is in setup state and establishing the call between the transferee and transfer target.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.TransferTargetSetupEventState.OnOKResponseReceived(Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            200 OK (in-dialog, attended transfer OK)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RelayConnector">
            <summary>
            Relay session-ben levo ket P2P session media osszekotteteset vegzi.
            </summary>
            <remarks>
            Kivulrol meghivjak az ISession feluleten: session.ConnectAudioReceiver(Caller, wavRecorder), session.ConnectAudioReceiver(Callee, wavRecorder).
            Ez esetben nem fogja normalisan felvenni a beszelgetest, mert nincs összemixelve a caller es callee audioja. Ezert kell belulre egy mixer, ami a ket hivas felol bejovo hangot mixeli eggye,
            es amikor mindket felre connectaljak ugyanazt a MediaHandler-t, akkor arra kotjuk ra, es nem kulon-kulon.
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.RelayPBXCallContainer">
            <summary>
            Itt tároljuk a relay session-ben használt P2P session-öket, újrafelhasználás céljából (transfer után)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.BlindTransferRelayState">
            <summary>
            A transferee es target kozti hivas kiepites allapota blind transfer eseten, amikor uj PBX call-t hozunk letre mindenkinek.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SetupRelayState">
            <summary>
            Normal call setup state between two SIP calls through relay session.
            </summary>
            <remarks>
            Possible events:
            - Setup
            - Ringing
            - Cancelled
            - InCall
            - NotAnswered
            - Rejected
            - Errors
            
            Other events from callee:
            - Redirected
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.InCallRelayState">
            <summary>
            In Call
            </summary>
            <remarks>
            Possible events:
            - CallerOnHold
            - CalleeOnHold
            - CallerHungUp
            - CalleeHungUp
            - InCall
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.ThirdPartyHoldRelayState">
            <summary>
            Az az allapot, amikor kivulrol holdolva vannak a felek.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ThirdPartyHoldSetupRelayState">
            <summary>
            Az az allapot, amikor kivulrol holdoljak a feleket. Ha megtortent a holdolas, akkor atvalt masik allapotba!
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ThirdPartyUnholdRelayState">
            <summary>
            Az az allapot, amikor kivulrol unholdoljak a feleket.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransferRelayState">
            <summary>
            A transferalo session lep ebbe a state-be transfer kozben. (az a session, amelyikben van a transferor, transferee)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransferTargetRelayState">
            <summary>
            A transferee InCall allapot es target kozti hivas kiepites allapota blind transfer eseten.
            </summary>
            <remarks>
            Same as setup state + the InCall events from the transferee.
            </remarks>
        </member>
        <member name="F:Ozeki.VoIP.SessionMode.ForceP2P">
            <summary>
            Only P2P calls between SIP extensions.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionMode.PreferP2P">
            <summary>
            Made a relay session first. When peer-to-peer comminucation is acceptable, switches to P2P session.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionMode.ForceRelay">
            <summary>
            Only relayed calls between SIP extensions.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.Created">
            <summary>
            The session has been created but not yet started.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.Setup">
            <summary>
            The session has been started but no response received yet.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.TransferSetup">
            <summary>
            The session has been started but no response received yet.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.Ringing">
            <summary>
            The session is in ringing state and the callee has not been accepted the call yet.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.InCall">
            <summary>
            The session has been established and there is media communication between the parties.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.CalleeOnHold">
            <summary>
            The caller put the callee on hold.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.CallerOnHold">
            <summary>
            The callee put the caller on hold.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.OnHold">
            <summary>
            The callee and the caller are both put on hold.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.OnHoldInactive">
            <summary>
            The callee and the caller are both put on hold but the media channels are inactive.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.TransferRequested">
            <summary>
            The caller or callee sent a transfer request, but the request has not been accepted or rejected.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.Transferring">
            <summary>
            The transfer request has been accepted and the transferring is in progress.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.TransferCompleted">
            <summary>
            The transfer completed successfully.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.TransferFailed">
            <summary>
            There was an error during the transfer (e.g. the transfer target rejected the call)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.CallerHungUp">
            <summary>
            The caller closed the session.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.CalleeHungUp">
            <summary>
            The callee closed the session.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.Redirected">
            <summary>
            The callee forwarded the call to another party.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.NotFound">
            <summary>
            The callee system was contacted successfully but the given number was not found.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.Busy">
            <summary>
            The callee rejected the call.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.Cancelled">
            <summary>
            The caller cancelled the call.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.NotAnswered">
            <summary>
            The callee was not answered the call in time.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.Error">
            <summary>
            There was an error during the call (e.g. the callee sent a 400 Bad Request SIP message).
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SessionState.Aborted">
            <summary>
            The session was aborted from an outside source (e.g. server stopped).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionStateEx.IsSessionEnded(Ozeki.VoIP.SessionState)">
            <summary>
            Checks whether the session has ended.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionStateEx.IsSessionEndedWithError(Ozeki.VoIP.SessionState)">
            <summary>
            Checks whether the session has ended with error.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionStateEx.IsSetup(Ozeki.VoIP.SessionState)">
            <summary>
            Check whether the call is setup state.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionStateEx.IsRinging(Ozeki.VoIP.SessionState)">
            <summary>
            Check whether the call is setup state.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionStateEx.IsInCall(Ozeki.VoIP.SessionState)">
            <summary>
            Check whether the call is in active state and there is media communication between the two parties.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionStateEx.IsHeld(Ozeki.VoIP.SessionState)">
            <summary>
            Check whether the call is being held by one of the parties.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionStateEx.IsTransferEnded(Ozeki.VoIP.SessionState)">
            <summary>
            Check whether the transfer has ended (including success and failure too).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SessionStateEx.IsCompleted(Ozeki.VoIP.SessionState)">
            <summary>
            Checks whether the active call has ended by one of the parties (the caller or callee sent a BYE request).
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SessionVariables">
            <summary>
            A Main session valtozoit tartalmazza, azaz a hivasra vonatkozo adatokat.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubSessionType.P2P">
            <summary>
            Messages sent bye a client will be forwarded to the other party without modification.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubSessionType.Relay">
            <summary>
            The media will be relayed through the PBX.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubSessionType.RelayCaller">
            <summary>
            Relay session / proxy session caller (SIP -> PBX)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubSessionType.RelayCallee">
            <summary>
            Relay session / proxy session callee (PBX -> SIP)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubSessionType.Switch">
            <summary>
            Switch session that contains both P2P and Relay
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SwitchSession">
            <summary>
            P2P es Relay kozti valtogatast vegzi, illetve utemezi a feladatokat (hold, transfer stb)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SwitchSession.AutoSwitchSessions">
            <summary>
            Automatically switches to the proper subsession.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SwitchSession.TrySwitchToRelay">
            <summary>
            Tries to switch the session to relay mode.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Transfer">
            <summary>
            Transzfer megvalósítása. 
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IAuthManagerUAS">
            <summary>
            Bejovo requestek autentikaciojat vegzi.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.NotifierService">
            <summary>
            Contains the notifiers.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IRegistrar.RegisterExtension(Ozeki.VoIP.ISIPExtension,System.Boolean)">
            <summary>
            Registers the SIP extension to the system.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IRegistrar.UnregisterExtension(Ozeki.VoIP.ISIPExtension,System.Boolean)">
            <summary>
            Removes the SIP extension from the system.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IRegistrar.RegistrationTimedOut(Ozeki.VoIP.ISIPExtension)">
            <summary>
            Removes the SIP extension from the system.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallState">
            <summary>
            States of an arbitrary call object.
            </summary>
            <remarks>
            This is a partially ordered set. During the call process a call object
            can hold states of the CallState enum. When a call is created
            by the softphone it has the Setup state, if some negative answer
            comes from the callee, the states changes into SetupError.
            When everything goes fine, the state changes into Ringing.
            From Ringing it can enter InCall, Rejected or Cancelled states.
            If someone picks up the phone the call enters InCall state.
            InCall state just can changes into Completed state. From Ringing
            it also can change into Rejected or Cancelled state.
            The state is Rejected when the callee reject the call.
            The state is Cancelled if the caller changes his mind 
            and hangs up the phone.
            </remarks>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Created">
            <summary>
            The call object has been created.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Setup">
            <summary>
            The call has been started. (The INVITE message has been sent.)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Error">
            <summary>
            An error occured during the call. (eg. the remote party was not found, or no supported codecs found)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Ringing">
            <summary>
            Ringing.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Queued">
            <summary>
            The called party is temporarily unavailable, but the server has decided to queue the call rather than reject it.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.RingingWithEarlyMedia">
            <summary>
            Ringing with early media.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Forwarding">
            <summary>
            Local call is forwarding.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Answered">
            <summary>
            The call has been answered. This state occurs only once per call.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.LocalHeld">
            <summary>
            The local call party put the call on hold.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.RemoteHeld">
            <summary>
            The remote call party put the call on hold.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.InactiveHeld">
            <summary>
            Both parties put the call on hold.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Transferring">
            <summary>
            Transferring the call to another client
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.InCall">
            <summary>
            There is active communication between the two parties. The call can step into the <see cref="F:Ozeki.VoIP.CallState.InCall"/> state multiple times (eg. <see cref="F:Ozeki.VoIP.CallState.InCall"/> -&gt; <see cref="F:Ozeki.VoIP.CallState.LocalHeld"/> -&gt; <see cref="F:Ozeki.VoIP.CallState.InCall"/>)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Completed">
            <summary>
            The call has been hung up by the caller or callee.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Rejected">
            <summary>
            The call has been rejected by the callee.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Cancelled">
            <summary>
            The call has been cancelled by the caller.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Busy">
            <summary>
            The call has been rejected by the callee.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallState.Forwarded">
            <summary>
            The incoming call hase been forwarded.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallStateEx">
            <summary>
            Tool to determine that the call state is in which period.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallStateEx.IsInSetupCall(Ozeki.VoIP.CallState)">
            <summary>
            Returns a boolean value that indicates whether the call has been started, but the callee sent no response yet.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallStateEx.IsRinging(Ozeki.VoIP.CallState)">
            <summary>
            Returns a boolean value that indicates whether the callee was contacted successfully but the call has not been answered yet.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallStateEx.IsInCall(Ozeki.VoIP.CallState)">
            <summary>
            Returns a boolean value that indicates whether the communication is active between the call party members.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallStateEx.IsHeld(Ozeki.VoIP.CallState)">
            <summary>
            The call has been held by one of the party members.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallStateEx.IsCallEnded(Ozeki.VoIP.CallState)">
            <summary>
            The call has been ended.
            </summary>
            <remarks>
            The call can end by one of the following reasons:
            - Cancelled by the caller
            - Rejected by the callee
            - Hhung up by one of the call members
            - An error occurred during the call (eg. remote party was not found or no supported codecs found)
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.CallStateEx.IsMediaCommunication(Ozeki.VoIP.CallState)">
            <summary>
            Returns a boolean value indicating whether media can be sent to the remote party.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallStateEx.IsRemoteMediaCommunication(Ozeki.VoIP.CallState)">
            <summary>
            Returns a boolean value indicating whether the remote party could send media data.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallStateChangedArgs">
            <summary>
            Provides data for call state changed event.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallStateChangedArgs.#ctor(Ozeki.VoIP.CallState,Ozeki.VoIP.CallState,System.Int32,System.String,Ozeki.VoIP.CallError)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.CallStateChangedArgs"/> clas..
            </summary>
            <param name="prevState">The previous call state.</param>
            <param name="state">The new call state.</param>
            <param name="statusCode">The status code sent/received in the SIP message.</param>
            <param name="reason">The reason phrase sent/received in the SIP message.</param>
            <param name="error">The call error.</param>
        </member>
        <member name="P:Ozeki.VoIP.CallStateChangedArgs.StatusCode">
            <summary>
            Gets the status code sent to the initial INVITE request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallStateChangedArgs.State">
            <summary>
            Gets the current state of the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallStateChangedArgs.PrevState">
            <summary>
            Gets the previous state of the call..
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallStateChangedArgs.Reason">
            <summary>
            Gets the reason phrase for the state.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallStateChangedArgs.Error">
            <summary>
            Gets the specific error, if the call state is Error.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallType">
            <summary>
            Defines media types for phone calls.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallType.Audio">
            <summary>
            Call using only audio channel.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallType.Video">
            <summary>
            Call using only video channel.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallType.AudioVideo">
            <summary>
            Call using both audio and video channels.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallTypeEx">
            <summary>
            Contains extension methods for <see cref="T:Ozeki.VoIP.CallType"/> enum.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallTypeEx.ToCallType(System.Collections.Generic.IEnumerable{Ozeki.Media.MediaType})">
            <summary>
            Determines the call type value from the given media type collection.
            </summary>
            <param name="mediaType">The media type collection.</param>
            <returns>The call type enum value.</returns>
        </member>
        <member name="M:Ozeki.VoIP.CallTypeEx.ToMediaTypeList(Ozeki.VoIP.CallType)">
            <summary>
            Determines the media types from the given call type value.
            </summary>
            <param name="callType">The call type enum value.</param>
            <returns>The media type collection.</returns>
        </member>
        <member name="T:Ozeki.VoIP.DialParameters">
            <summary>
            Contains parameters for outgoing calls.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DialParameters"/> class.
            </summary>
            <param name="dial">The dialed number or dialed user ID (eg. '4001' or '4001@example.com')</param>
        </member>
        <member name="M:Ozeki.VoIP.DialParameters.#ctor(Ozeki.VoIP.DialInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DialParameters"/> class.
            </summary>
            <param name="dialInfo">The dialing information such as caller ID or dialed number</param>
        </member>
        <member name="M:Ozeki.VoIP.DialParameters.Clone">
            <summary>
            Creates a deep copy of the instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Ozeki.VoIP.DialParameters.UpdateCallType">
            <summary>
            Updates the <see cref="P:Ozeki.VoIP.DialParameters.CallType"/> according to the <see cref="P:Ozeki.VoIP.DialParameters.MediaTypes"/> property.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialParameters.UpdateMediaTypes">
            <summary>
            Updates the <see cref="P:Ozeki.VoIP.DialParameters.MediaTypes"/> according to the <see cref="P:Ozeki.VoIP.DialParameters.CallType"/> property.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialParameters.DialInfo">
            <summary>
            Gets the dialing information about the call such as caller ID or dialed number.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialParameters.SRTPMode">
            <summary>
            Gets or sets whether secure media channels will be used during the call or not. If not set, the default values will be used.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialParameters.MediaTypes">
            <summary>
            Gets the media types used during the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialParameters.CallType">
            <summary>
            Gets or sets the type the call. Note, when the <see cref="P:Ozeki.VoIP.DialParameters.CallType"/> property is set, the <see cref="P:Ozeki.VoIP.DialParameters.MediaTypes"/> property will be updated.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.EncodedMediaData">
            <summary>
            Represents encoded media data with codec properties.
            </summary>
            <remarks>
            The VoIP calls are made through packet swiched communication channel. The IPhonecall
            object gets the sent data packed through the PlainMediaDataReceived event. This packed needs further
            processing. The main goal of VoIP is audio communication, but with other supported
            codecs in this system it is possible to perform data and video communication too.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.EncodedMediaData.CodecDescription">
            <summary>
            Gets the description of the codec.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.EncodedMediaData.MediaData">
            <summary>
            Gets the encoded media data.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallInfoDtmfHandler">
            <summary>
            Beerkezo INFO requestekben levo DTMF package-eket jatssza le.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallInfoDtmfHandler.AddSignal(Ozeki.VoIP.DtmfSignal)">
            <summary>
            Hozzaadja a DTMF signalt, es ha ures a sor, akkor elkezdi "lejatszani".
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallInfoDtmfHandler.TryNextDTMF">
            <summary>
            Ha eppen nincs lejatszas, akkor elkezdi a kovekezo DTMF signalt.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallRtpEventDtmfHandler">
            <summary>
            RTP Event DTMF signalling mode-ot kezeli.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallStateHelper.SuccesfulResponse(Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            Handles 200 OK response.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallStateHelper.Redirection(Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            Handles 3xx responses.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallStateManager">
            <summary>
            Call state changed esemenyeket felugyeli, illetve a state-eket tarolja.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IInternalLocalCall">
            <summary>
            A local call eszkozeit tartalmazza, amiket elernek a local call-ban levo managerek
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LocalCall">
            <summary>
            A helyi gepen letrehozott hivas objektum, melyet az API-rol iranyithatunk.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ICallMediaManager">
            <summary>
            Provides a layer for the call to monitor its media properties.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICallMediaManager.GetAudioFormat(System.Int32)">
            <summary>
            Gets the audio format for the given codec.
            </summary>
            <param name="payloadType">The payload type of the codec.</param>
            <returns>The audio format for the given codec.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICallMediaManager.GetSupportedCodecs">
            <summary>
            Gets the codecs supported by the other party.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ICallMediaManager.SetChannelConfig(Ozeki.Media.CodecMediaType,Ozeki.VoIP.MediaChannelConfig)">
            <summary>
            Sets the specified configuration to a media channel.
            </summary>
            <param name="channelMediaType">The media type of the channel.</param>
            <param name="config">The config of the media channel.</param>
            <returns>True, if successfully set; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ICallMediaManager.GetCurrentEncoder(Ozeki.Media.MediaType)">
            <summary>
            Gets the current encoder used during the call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICallMediaManager.SendMediaData(Ozeki.Media.MediaData)">
            <summary>
            Sends media data to the remote party.
            </summary>
            <param name="mediaData">The media data</param>
        </member>
        <member name="M:Ozeki.VoIP.ICallMediaManager.SetInboundVideoTypes(System.String,System.Collections.Generic.IEnumerable{Ozeki.Media.VideoType})">
            <summary>
            Sets the video types that will handle the media manager.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICallMediaManager.SetInboundAudioTypes(System.String,System.Collections.Generic.IEnumerable{Ozeki.Media.AudioType})">
            <summary>
            Sets the audio types that will handle the media manager.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICallMediaManager.GetChannelConfig(Ozeki.Media.CodecMediaType)">
            <summary>
            
            </summary>
            <param name="codecMediaType"></param>
            <returns></returns>
        </member>
        <member name="P:Ozeki.VoIP.ICallMediaManager.SupportedMediaTypes">
            <summary>
            Gets the list of supported media types of the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallMediaManager.SentVideoQuality">
            <summary>
            Gets or sets the sent video quality in the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallMediaManager.ReceivedVideoQuality">
            <summary>
            Gets or sets the received video quality in the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ICallMediaManager.ActiveMediaTypes">
            <summary>
            Gets the actual media types of the phoneline.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICallMediaManager.MediaDescriptionChanged">
            <summary>
            Occurs when the media description of the call has changed (eg. new media channel has been added or simply put the other party the call on hold).
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICallMediaManager.MediaDataReceived">
            <summary>
            Occurs when the received media data has been decoded.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICallMediaManager.ChannelConfigChanged">
            <summary>
            Occurs when the codec has changed.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICallMediaManager.SentVideoQualityChanged">
            <summary>
            Occurs when the sent video quality has changed.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICallMediaManager.ReceivedVideoQualityChanged">
            <summary>
            Occurs when the received video quality has changed.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallMediaManager.SendMediaData(Ozeki.Media.MediaData)">
            <summary>
            Sends raw media data to the RTP layer if possible.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallMediaManager.ReceiveMediaData(Ozeki.Media.MediaData,System.Int32)">
            <summary>
            Ezzel lehet szimulalni, mintha a masik fel kuldott volna adatot.
            Kivaltja az OnMediaDataReceived esemenyt, tehat a PhoneCallAudioReceiver-ben megkapjuk ezt az adatot.
            </summary>
            <param name="mediaData"></param>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannelInfo.#ctor(System.String,System.Int32,Ozeki.Media.IMediaChannel)">
            <summary>
            Letrehoz egy media channel infot.
            </summary>
            <param name="address">IP cim, ahova az adatot kell kuldeni a masik felnek</param>
            <param name="port">Port, ahova a media adatot kell kuldeni a masik felnek</param>
            <param name="mediaChannel">A media csatorna</param>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelInfo.Address">
            <summary>
            IP cím, ahová kell küldeni az adatot a másik félnek.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelInfo.Port">
            <summary>
            Port, ahová kell küldeni az adatot a másik félnek.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelInfo.MediaChannel">
            <summary>
            Maga a csatorna.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelInfo.MediaChannelDescription">
            <summary>
            Csatorna leírása.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannelInfoFactory.CreateMediaChannel(System.String,Ozeki.Media.MediaType,Ozeki.VoIP.MediaProtocol,Ozeki.Network.INatConfiguration,System.Int32)">
            <summary>
            Létrehoz egy IMediaChannel-t a megadott paraméterek alapján.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannelInfoFactory.CreateNewChannelAnswer(System.String,Ozeki.VoIP.MediaChannelDescription,Ozeki.Network.INatConfiguration,Ozeki.Media.CommunicationMode,Ozeki.VoIP.SRTPMode)">
            <summary>
            Legenerálja a választ az offerre. Kiválasztja a közös kodekeket, és ha talált, akkor létrehoz egy IMediaChannel-t.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.MediaSession.CreateNewAnswerChannel(Ozeki.VoIP.MediaChannelDescription,Ozeki.Network.INatConfiguration,System.String)">
            <summary>
            Keszit egy media channelt a megadott media offer-hez, es konnektal a tavoli cimhez.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaSession.RemoteOfferReceived(Ozeki.VoIP.MediaDescription,System.String,Ozeki.Network.INatConfiguration)">
            <summary>
            A tavoli fel kuldott egy media felajanlast (bejovo INVITE, vagy SDP nelkuli INVITE-ra OK).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaSession.CreateOrUpdateLocalChannel(Ozeki.VoIP.MediaDescription,Ozeki.VoIP.MediaChannelDescription,System.Int32,Ozeki.Network.INatConfiguration,Ozeki.VoIP.SRTPMode)">
            <summary>
            Beérkezett offer alapján frissít egy lokális channelt.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaSession.LocalOfferHold">
            <summary>
            Frissiti a local media description communication mode-jat, ha holdra tesszuk a masik felet.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaSession.LocalOfferUnhold">
            <summary>
            Frissiti a local media description communication mode-jat, ha unholdoljuk a masik felet.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaSession.UpdateLocalChannelHoldCM(System.Boolean)">
            <summary>
            Frissiti a local media description communication mode-jat ha lokalisan holdolunk vagy unholdolunk.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LocalByeManager">
            <summary>
            Server call bejovo/kimeno BYE requestjeit kezeli.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IByeManager">
            <summary>
            API interface
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IByeManager.SendBye">
            <summary>
            Sends a BYE request to the remote end.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IByeManager.SendBye(Ozeki.VoIP.ByeRequestArgs)">
            <summary>
            Sends a BYE request to the remote end.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IByeManager.ByeReceived">
            <summary>
            Occurs when a BYE request received from the remote end.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IByeReceiver">
            <summary>
            Handles incoming BYE requests and incoming responses to sent BYE requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISIPReceiver`2.OnRequestReceived(`0)">
            <summary>
            Request received from the remote party.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISIPReceiver`2.OnResponseReceived(`1)">
            <summary>
            Occurs when response received to a sent request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalByeManager.SendBye">
            <summary>
            Outgoing BYE 
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalByeManager.SendBye(Ozeki.VoIP.ByeRequestArgs)">
            <summary>
            Outgoing BYE 
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalByeManager.OnRequestReceived(Ozeki.VoIP.ByeRequestArgs)">
            <summary>
            Incoming BYE 
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SessionByeManager">
            <summary>
            Session es server call kozti atjatszo.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LocalCancelManager">
            <summary>
            Server call bejovo/kimeno CANCEL requestjeit kezeli.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ICancelManager">
            <summary>
            API interface
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICancelManager.SendCancel">
            <summary>
            Sends a CANCEL request to the remote end.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICancelManager.SendCancel(Ozeki.VoIP.CancelRequestArgs)">
            <summary>
            Sends a CANCEL request to the remote end.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ICancelManager.CancelReceived">
            <summary>
            Occurs when a CANCEL request received from the remote end.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ICancelReceiver">
            <summary>
            Handles incoming CANCEL requests and incoming responses to sent CANCEL requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalCancelManager.SendCancel">
            <summary>
            Outgoing CANCEL
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalCancelManager.SendCancel(Ozeki.VoIP.CancelRequestArgs)">
            <summary>
            Outgoing CANCEL
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalCancelManager.OnRequestReceived(Ozeki.VoIP.CancelRequestArgs)">
            <summary>
            Incoming CANCEL
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SessionCancelManager">
            <summary>
            Session es server call kozti atjatszo.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LocalInfoManager">
            <summary>
            Server call bejovo/kimeno INFO requestjeit kezeli.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IInfoReceiver">
            <summary>
            Can receive incoming INFO requests and responses to sent INFO requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalInfoManager.SendInfo(Ozeki.VoIP.InfoRequestArgs)">
            <summary>
            Outgoing INFO
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalInfoManager.OnRequestReceived(Ozeki.VoIP.InfoRequestArgs)">
            <summary>
            Incoming INFO
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalInfoManager.OnResponseReceived(Ozeki.VoIP.SIPInfoResponse)">
            <summary>
            Incoming INFO response
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SessionInfoManager">
            <summary>
            Session es server call kozti atjatszo.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IInfoManager">
            <summary>
            API interface
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInfoManager.SendInfo(Ozeki.VoIP.InfoRequestArgs)">
            <summary>
            Sends an INFO request to the remote end.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.IInfoManager.SendResponse(Ozeki.VoIP.SIPInfoResponse)">
            <summary>
            Sends a response to a sent INFO request.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInfoManager.ResponseReceived">
            <summary>
            Occurs when a response received to a sent INFO request.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInfoManager.InfoReceived">
            <summary>
            Occurs when an INFO request received from the remote end.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractLocalInviteManager.ReceiveRemoteOffer(Ozeki.VoIP.MediaDescription,Ozeki.VoIP.UserSIPInfo)">
            <summary>
            A tulso fel kuldott egy offert (INVITE-ban vagy OK-ban).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractLocalInviteManager.ReceiveRemoteAnswer(Ozeki.VoIP.MediaDescription,Ozeki.VoIP.CallOptionalHeaders)">
            <summary>
            Kuldtunk egy offert, a tulso fel valaszolt ra (OK-ban vagy ACK-ban).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractLocalInviteManager.UpdateCallState(Ozeki.VoIP.InviteResponseArgs,System.Boolean)">
            <summary>
            Frissiti a CallState-et a megkapott StatusCode alapjan
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IncomingInviteOfferAnswerState">
            <summary>
            SIP felol nezve bejovo INVITE offer/answer call state kiertelese.
            Ha a SIP a bejovo INVITE-ban kuldott SDP-t, akkor az local offernek szamit.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.OutgoingInviteOfferAnswerState">
            <summary>
            SIP felol nezve bejovo INVITE offer/answer call state kiertelese.
            Ha a SIP a bejovo INVITE-ban kuldott SDP-t, akkor az local offernek szamit.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IInviteManager">
            <summary>
            API interface
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInviteManager.BeginIncomingCall(Ozeki.VoIP.UserSIPInfo)">
            <summary>
            Starts the call establishment process.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInviteManager.SendInitialInvite(Ozeki.VoIP.InviteArgs)">
            <summary>
            Starts a call session by sending an INVITE request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInviteManager.SendReInvite(Ozeki.VoIP.InviteArgs)">
            <summary>
            Sends a re-INVITE request within the dialog.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInviteManager.SendResponse(Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            Sends a response to the initial INVITE request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInviteManager.SendACK(Ozeki.VoIP.AckArgs)">
            <summary>
            Sends an ACK request to the remote end.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInviteManager.BeginCallIndication">
            <summary>
            Sends a notification that the user wants to start the call.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInviteManager.InitialInviteReceived">
            <summary>
            Occurs when the first INVITE request received.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInviteManager.InviteResponseReceived">
            <summary>
            Occurs when a response received to a sent INVITE or re-INVITE request.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInviteManager.ReInviteReceived">
            <summary>
            Occurs when a re-INVITE request received from the remote end.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInviteManager.AckReceived">
            <summary>
            Occurs when an ACK request received from the remote end.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInviteManager.InviteFinished">
            <summary>
            Occurs when an INVITE request finished completely (ACK sent/received, media negotiated etc.).
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LocalInitialInviteReceiverTask">
            <summary>
            Bejovo hivas, a tavoli fel elkuldte az elso INVITE-ot
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalInviteReceiverTask.SendResponse(Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            Response to an incoming re-INVITE
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LocalReInviteReceiverTask">
            <summary>
            Incoming re-INVITE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalInviteSenderTask.CreateInitialInviteArgs(System.String,Ozeki.VoIP.SIPAddress)">
            <summary>
            Letrehozza a kimeno hivas INVITE parameteret a DialInfo-ban megadott parameterekkel.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalInviteSenderTask.OnResponseReceived(Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            Incoming response to a INVITE request
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalInviteSenderTask.SendACK(Ozeki.VoIP.AckArgs)">
            <summary>
            ACK to an outgoing INVITE or re-INVITE
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.LocalMessageManager">
            <summary>
            Server call bejovo/kimeno MESSAGE requestjeit kezeli.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IInDialogInstantMessageManager">
            <summary>
            API interface
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInDialogInstantMessageManager.SendMessage(Ozeki.VoIP.InstantMessage)">
            <summary>
            Sends a MESSAGE request to the remote end.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInDialogInstantMessageManager.ResponseReceived">
            <summary>
            Occurs when a response received to a sent MESSAGE request.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IInDialogInstantMessageManager.MessageReceived">
            <summary>
            Occurs when a MESSAGE request received from the remote end.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IInstantMessageReceiver">
            <summary>
            Handles incoming MESSAGE requests and incoming responses to sent MESSAGE requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalMessageManager.SendMessage(Ozeki.VoIP.InstantMessage)">
            <summary>
            Outgoing MESSAGE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalMessageManager.OnRequestReceived(Ozeki.VoIP.SIPInstantMessageRequestArgs)">
            <summary>
            Incoming MESSAGE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.LocalMessageManager.OnResponseReceived(Ozeki.VoIP.SIPInstantMessageResult)">
            <summary>
            Outgoing MESSAGE response
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SessionMessageManager">
            <summary>
            Session es server call kozti atjatszo.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.AttendedTransferPreparer">
            <summary>
            Elokesziti az attended transferhez szukseges lepeseket. Ha megvan, akkor az AttendedTransferPrepared esemenyt hivja meg.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IReferReceiver">
            <summary>
            Can receive incoming REFER requests and responses to sent REFER requests.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IReferManager">
            <summary>
            API interface
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IReferManager.SendBlindTransfer(Ozeki.VoIP.BlindTransferArgs)">
            <summary>
            Sends a REFER request (blind transfer) to the remote end.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IReferManager.SendAttendedTransfer(Ozeki.VoIP.AttendedTransferArgs)">
            <summary>
            Sends a REFER request (attended transfer) to the remote end.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IReferManager.SendTransferResponse(Ozeki.VoIP.TransferResponseArgs)">
            <summary>
            Sends a response to a received REFER request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IReferManager.NotifyTransferStateChanged(Ozeki.VoIP.TransferStateChangedEventArgs)">
            <summary>
            Sends a NOTIFY request that contains the state of the target call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IReferManager.RejectTransfer(System.Int32)">
            <summary>
            Sends a response to a REFER request with a 403 Forbidden response code.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IReferManager.AcceptTransfer(System.String,System.Int32)">
            <summary>
            Sends a response to a REFER request with a 202 Accepted response code.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IReferManager.BlindTransferRequested">
            <summary>
            Occurs when a blind transfer request received from the remote end.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IReferManager.AttendedTransferRequested">
            <summary>
            Occurs when an attended transfer request received from the remote end.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IReferManager.TransferResponseReceived">
            <summary>
            Occurs when a response received to a sent REFER request.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IReferManager.TransferStateChanged">
            <summary>
            Occurs when a NOTIFY request received containing the state of the target call.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.AbstractPhoneLine">
            <summary>
            Erre az abstract osztályra azért van szüksége, mert az interface ben nem lehet definiálni internal metodusokat
            Így belül az egész rendszerben a rendes phoneLine implementációval kell dolgozni, de hogy lehet így hozzá mockot csinálni
            Sehogy
            Mivel kifelé látszik az IPhoneLine, ezért én ehhez már nem nyúlok, nem olyan nagy probléma, ha ez itt marad
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IPhoneLine">
            <summary>
            Represents the usage of a SIP account.
            </summary>
            <remarks>
            In SIP communication the call is made through a session. The phone line in a VoIP
            communication is an end-point that can be seen and reached by others. Technically the phone line
            is a SIP account that is used in the SIP Registrar server.
            After the login the SIP Registrat Server stores the communication address you have set
            and the other registered clients can call you.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.IPhoneLine.Dispose">
            <summary>
            Releases any resources used by the line.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IPhoneLine.DoNotDisturb">
            <summary>
            Gets or sets the boolean value indicating whether the PhoneLine is in "Do Not Disturb" mode.
            </summary>
            <remarks>
            If the value is true, the softphone will reject all incoming calls on this line.
            If the value is false the calls will be in Ringing state until the user accepts or rejects them.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.IPhoneLine.AutoAnswer">
            <summary>
            Gets or sets a boolean value indicating whether the incoming calls on this line will be answered automatically.
            </summary>
            <remarks>
            If this property is true the softphone will automatically accept all incoming calls in this line.
            If the value is false the calls will be in Ringing state until the user accepts or rejects them.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.IPhoneLine.PhoneCalls">
            <summary>
            Gets the active phone calls on the line.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IPhoneLine.LocalEndPointChanged">
            <summary>
            Occurs when the local address or port has changed.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IPhoneLine.InstantMessaging">
            <summary>
            Gets an interface for sending and receiving MESSAGE requests and responses.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.DirectIPPhoneLineConfig">
            <summary>
            Contains configuration for creating phone lines that can be accessed by local IP address.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PhoneLineConfiguration">
            <summary>
            Defines configration options for a SIP phone line.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISIPClientConfiguration">
            <summary>
            Defines configration options for a SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfiguration.SIPAccount">
            <summary>
            Gets the user and domain data for the SIP account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfiguration.LocalAddress">
            <summary>
            Gets the local address used for SIP communication (registration, making and receiving calls).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfiguration.LocalPort">
            <summary>
            Gets the local port used for SIP communication (registration, making and receiving calls).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfiguration.TransportType">
            <summary>
            Gets the type of the transport used for SIP communication (registration, making and receiving calls).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfiguration.SRTPMode">
            <summary>
            Gets the default security mode for incoming and outgoing calls.
            </summary>
            <remarks>
            If the value is None, the line cannot receive calls with secure channels.
            If the value is Prefer, the line can receive calls with both secure and insecure channels.
            If the value is Forces, the line can receive calls only with secure channels.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfiguration.ExpirationTime">
            <summary>
            Gets the desired time after the SIP account registration expires (in seconds).
            </summary>
            <remarks>
            The SIP account is registered to the PBX for a limited amount of time. When this time expires the PBX can no longer contact the registered SIP account.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfiguration.RegisterBeforeExpires">
            <summary>
            Gets az interval between the SIP account expiration time and the time when the system sends the re-REGISTER request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfiguration.KeepAliveMode">
            <summary>
            Gets or sets the keep-alive mode of the client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPClientConfiguration.KeepAliveInterval">
            <summary>
            Gets or sets the interval between keep-alive packets (in seconds).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneLineConfiguration.#ctor(Ozeki.VoIP.SIPAccount)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.PhoneLineConfiguration"/> clas.
            </summary>
            <param name="sipAccount">The SIP account</param>
        </member>
        <member name="M:Ozeki.VoIP.PhoneLineConfiguration.Clone">
            <summary>
            Creates a deep copy instance of the object.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.SIPAccount">
            <summary>
            Gets the user and domain data for the SIP account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.LocalAddress">
            <summary>
            Gets the local address used for SIP communication (registration, making and receiving calls).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.LocalPort">
            <summary>
            Gets the local port used for SIP communication (registration, making and receiving calls).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.TransportType">
            <summary>
            Gets the type of the transport used for SIP communication (registration, making and receiving calls).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.SRTPMode">
            <summary>
            Gets the default security mode for incoming and outgoing calls.
            </summary>
            <remarks>
            If the value is None, the line cannot receive calls with secure channels.
            If the value is Prefer, the line can receive calls with both secure and insecure channels.
            If the value is Forces, the line can receive calls only with secure channels.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.ExpirationTime">
            <summary>
            Gets the desired time after the SIP account registration expires (in seconds).
            </summary>
            <remarks>
            The SIP account is registered to the PBX for a limited amount of time. When this time expires the PBX can no longer contact the registered SIP account.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.RegisterBeforeExpires">
            <summary>
            Gets az interval between the SIP account expiration time and the time when the system sends the re-REGISTER request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.NatConfig">
            <summary>
            Gets the NAT configuration used when registering the SIP account, and when making or receiving calls.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.KeepAliveMode">
            <summary>
            Gets or sets the keep-alive mode of the client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.KeepAliveInterval">
            <summary>
            Gets or sets the interval between keep-alive packets (in seconds).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.InboundCallMapping">
            <summary>
            Gets the SIP header mapping for incoming calls.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLineConfiguration.OutboundCallMapping">
            <summary>
            Gets the SIP header mapping for outbound calls.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PhoneLineContainer.GetPhoneLine(Ozeki.VoIP.SIPClientID)">
            <summary>
            Ha nem talalja, akkor null ertekkel ter vissza
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.PhoneLine.PhoneCalls">
            <summary>
            Gets the collection of phone calls which belong to the phone line.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IPBXLicenseFilter.FilterIncomingCall(Ozeki.VoIP.ISessionCall)">
            <summary>
            
            </summary>
            <param name="call"></param>
            <returns>Ha null értékkel tér vissza, akkor nem kell feldobni a hívást</returns>
        </member>
        <member name="T:Ozeki.VoIP.LicenseExtension">
            <summary>
            A CallHandler nél van használva.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ProtectedTransport.Send(Ozeki.Network.IPacket,System.Net.IPEndPoint)">
            <summary>
              Üzenet küldése a hálózati rétegen keresztül
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Ozeki.VoIP.ProtectedTransport.Connect(System.String,System.Int32)">
            <summary>
              Hozzákapcsolódik egy távoli címhez, hogyha már kapcsolódott, akkor átirányítja a kapcsolatot, ha nem tudja végrehajtani false értékkel tér vissza
            </summary>
            <param name = "remoteEndPoint"></param>
            <param name = "remotePort"></param>
        </member>
        <member name="P:Ozeki.VoIP.ProtectedTransport.Protocol">
            <summary>
            Gets the protocol type.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ProtectedTransportFactory">
            <summary>
            Ha belenyultak az assembly be, akkor direkt nem fog menni a hálózati forgalom
            TODO: Egy proxy-zás még lehet, hogy jól jönne 
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ProtectedTransportFactory.CreateTransport(System.Boolean)">
            <summary>
              Létrehoz egy transport réteget, ha a porttartományban nincs szabad port, akkor null értékkel tér vissza
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ProtectedTransportFactory.CreateTransport(System.Int32)">
            <summary>
              Létrehoz egy transport réteget a lokális port alapján, ha a portot nem lehet használni vagy foglalt, akkor null értékkel tér vissza
            </summary>
            <param name = "localPort"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ProtectedTransportFactory.ListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
            <summary>
              Az adott portot figyeli és ha érkezik rá egy kapcsolódási kérés, akkor a callback meghívódik, amelyben megkapjuk az uj transport rétegunket, melyen keresztul kommunikálhatunk az ujonnan kapcsolodoval, ha az adott portot már figyeli valaki, akkor false értékkel tér vissza
            </summary>
            <param name = "port"></param>
            <param name = "callback"></param>
        </member>
        <member name="M:Ozeki.VoIP.ProtectedTransportFactory.UnsubscribeListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
            <summary>
              Leiratkorunk az adott port figyeléséről
            </summary>
            <param name = "port"></param>
            <param name = "callback"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ProtectedTransportFactory.Remove(Ozeki.Network.ITransport)">
            <summary>
              Ezzel jelezzük, hogy a paraméterként átadott transport rétegre már nincs szükségünk
            </summary>
            <param name = "transport"></param>
        </member>
        <member name="P:Ozeki.VoIP.ProtectedTransportFactory.MinPort">
            <summary>
              A legikisebb kiosztható port
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ProtectedTransportFactory.MaxPort">
            <summary>
              A legnagyobb kiosztható port
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ProtectedTransportFactory.ReservedPorts">
            <summary>
              Visszaadja a jelenleg használt portokat
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ProtectedTransportFactory.LocalAddress">
            <summary>
              A lokális cím
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ProtectedTransportFactory.TransportType">
            <summary>
              Protokoll tipusa
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.Q850CauseCodeToSIPError.ToCallError(System.Int32)">
            <summary>
            Converts an ISDN cause code to SIP error.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MediaChannel">
            <summary>
            Egy media kommunikacios csatornat reprezental.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannel.EnqueueMediaData(Ozeki.Media.MediaData)">
            <summary>
            Bufferbe teszi az adatot, ami a megfelelo idoben kikuldi.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannel.MediaDataSender_SendIndication(System.Object,Ozeki.VoIP.MediaDataSendIndicationEventArgs)">
            <summary>
            A bufferbol jott egy media data, amit ki kell kuldeni.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannel.SendUncompressedMediaData(System.Int32,Ozeki.Media.MediaData)">
            <summary>
            Sends the uncompressed media data with the selected payload type. (Encode + send)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannel.SendEncodedMediaData(System.Int32,System.Byte[],Ozeki.Media.MediaData)">
            <summary>
            Sends the encoded media data.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannel.TryReconnect(System.Net.IPEndPoint)">
            <summary>
            Atkonnektal arra a cimre, ahonnan a csomag erkezett
            </summary>
            <param name="remoteEndPoint"></param>
        </member>
        <member name="T:Ozeki.VoIP.VoIPMediaDataBuffer">
            <summary>
            RTP szintjen vegzi az audio data utemezeset kikuldes eseten.
            Codec packetization time alapjan kuldi ki a csomagokat.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.VoIPMediaDataBuffer.Put(Ozeki.Media.MediaData)">
            <summary>
            Bufferbe teszi az adatot. Majd a SendIndication esemeny feldobja, hogy mikor lehet kuldeni.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.H263PlusPacket">
            <summary>
              0                   1
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |   RR    |P|V|   PLEN    |PEBIT|
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263PlusPacket.RR">
            <summary>
            Reserved bits.  It SHALL be zero and MUST be ignored by receivers.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263PlusPacket.P">
            <summary>
            Picture start
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263PlusPacket.V">
            <summary>
            Indicates the presence of an 8-bit field containing information
            for Video Redundancy Coding (VRC), which follows immediately after
            the initial 16 bits of the payload header, if present.  For syntax
            and semantics of that 8-bit VRC field
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263PlusPacket.PLEN">
            <summary>
            Length, in bytes, of the extra picture header.  If no extra
            picture header is attached, PLEN is 0.  If PLEN>0, the extra
            picture header is attached immediately following the rest of the
            payload header.  Note that the length reflects the omission of the
            first two bytes of the picture start code (PSC).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263PlusPacket.PEBIT">
            <summary>
            Indicates the number of bits that shall be ignored in the last
            byte of the picture header.  If PLEN is not zero, the ignored bits
            shall be the least significant bits of the byte.  If PLEN is zero,
            then PEBIT shall also be zero.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.H263Packetizer.Split(System.Byte[])">
            <summary>
            Splitteli a pattern szerint az eredményben a minta is szerepelni fog
            </summary>
            <param name="array"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.H263Packetizer.SearchPattern(System.Byte[])">
            <summary>
            Megkeresi az adott tömbben az összes GOB v Slice v EOS v OSBS elejének az index-ét, mindegyik 00 val kezdődik és a 3. byte-ban a 128 as helyiértéken 1 áll
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.IRTPPacketProvider">
            <summary>
            Provides methods for creating <see cref="T:Ozeki.VoIP.RTPPacket"/> objects.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IRTPPacketProvider.CreateRTPPackets(Ozeki.Media.MediaPacket,System.UInt32,System.UInt32,System.UInt16)">
            <summary>
            Creates <see cref="T:Ozeki.VoIP.RTPPacket"/> objects from a <see cref="T:Ozeki.Media.MediaPacket"/>.
            </summary>
            <returns>Created <see cref="T:Ozeki.VoIP.RTPPacket"/> objects. If no RTP packets created returns an empty list.</returns>
            <remarks>
            A visszateresi ertek azert lista, mert elofordulhat, hogy darabolni kell a kikuldendo csomagot tobb RTP packetre (pl. H.264)
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.IRTPPacketProvider.CreateMediaPacket(Ozeki.VoIP.RTPPacket)">
            <summary>
            Creates a <see cref="T:Ozeki.Media.MediaPacket"/> object from a <see cref="T:Ozeki.VoIP.RTPPacket"/> object.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.H263PlusPacketProvider.CreateRTPPackets(Ozeki.Media.MediaPacket,System.UInt32,System.UInt32,System.UInt16)">
            <summary>
            Creates <see cref="T:Ozeki.VoIP.RTPPacket"/> objects from a <see cref="T:Ozeki.Media.MediaPacket"/>.
            </summary>
            <returns>Created <see cref="T:Ozeki.VoIP.RTPPacket"/> objects. If no RTP packets created returns an empty list.</returns>
            <remarks>
            A visszateresi ertek azert lista, mert elofordulhat, hogy darabolni kell a kikuldendo csomagot tobb RTP packetre (pl. H.264)
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.H263PlusPacketProvider.CreateMediaPacket(Ozeki.VoIP.RTPPacket)">
            <summary>
            Creates a <see cref="T:Ozeki.Media.MediaPacket"/> object from a <see cref="T:Ozeki.VoIP.RTPPacket"/> object.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.VRCHeader">
            <summary>
                0 1 2 3 4 5 6 7
               +-+-+-+-+-+-+-+-+
               | TID | Trun  |S|
               +-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.VRCHeader.TID">
            <summary>
            Thread ID
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.H263Packet">
            <summary>
              0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |F|P|SBIT |EBIT | SRC |I|U|S|A|R      |DBQ| TRB |    TR         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.F">
            <summary>
            F: 1 bit
            The flag bit indicates the mode of the payload header. F=0, mode A;
            F=1, mode B or mode C depending on P bit defined below.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.P">
            <summary>
             P: 1 bit
             Optional PB-frames mode as defined by the H.263 [4]. "0" implies
             normal I or P frame, "1" PB-frames. When F=1, P also indicates modes:
             mode B if P=0, mode C if P=1.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.EBit">
            <summary>
            EBIT: 3 bits
            End bit position specifies number of least significant bits that
             shall be ignored in the last data byte.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.SRC">
            <summary>
            SRC : 3 bits
            Source format, bit 6,7 and 8 in PTYPE defined by H.263 [4], specifies
            the resolution of the current picture.
            001 SUB-CIF 128x96
            010 QCIF    176x144
            011 CIF     352x288
            100 4CIF    704x576
            101 16CIF   1408x1152
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.I">
            <summary>
            I:  1 bit.
            Picture coding type, bit 9 in PTYPE defined by H.263[4], "0" is
            intra-coded, "1" is inter-coded.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.U">
            <summary>
            U: 1 bit
            Set to 1 if the Unrestricted Motion Vector option, bit 10 in PTYPE
            defined by H.263 [4] was set to 1 in the current picture header,
            otherwise 0. 
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.S">
            <summary>
            S: 1 bit
            Set to 1 if the Syntax-based Arithmetic Coding option, bit 11 in
            PTYPE defined by the H.263 [4] was set to 1 for current picture
            header, otherwise 0.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.A">
            <summary>
               A: 1 bit
            Set to 1 if the Advanced Prediction option, bit 12 in PTYPE defined
            by H.263 [4] was set to 1 for current picutre header, otherwise 0.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.R">
             <summary>
                R: 4 bits
            Reserved, must be set to zero.
             </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.DBQ">
            <summary>
               DBQ: 2 bits
            Differential quantization parameter used to calculate quantizer for
            the B frame based on quantizer for the P frame, when PB-frames option
            is used. The value should be the same as DBQUANT defined by H.263
            [4].  Set to zero if PB-frames option is not used.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.TRB">
            <summary>
            TRB: 3 bits
            Temporal Reference for the B frame as defined by H.263 [4]. Set to
            zero if PB-frames option is not used.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H263Packet.TR">
            <summary>
            TR: 8 bits
            Temporal Reference for the P frame as defined by H.263 [4]. Set to
            zero if the PB-frames option is not used.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.H263PacketProvider.CreateRTPPackets(Ozeki.Media.MediaPacket,System.UInt32,System.UInt32,System.UInt16)">
            <summary>
            Creates <see cref="T:Ozeki.VoIP.RTPPacket"/> objects from a <see cref="T:Ozeki.Media.MediaPacket"/>.
            </summary>
            <returns>Created <see cref="T:Ozeki.VoIP.RTPPacket"/> objects. If no RTP packets created returns an empty list.</returns>
            <remarks>
            A visszateresi ertek azert lista, mert elofordulhat, hogy darabolni kell a kikuldendo csomagot tobb RTP packetre (pl. H.264)
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.H263PacketProvider.CreateMediaPacket(Ozeki.VoIP.RTPPacket)">
            <summary>
            Creates a <see cref="T:Ozeki.Media.MediaPacket"/> object from a <see cref="T:Ozeki.VoIP.RTPPacket"/> object.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.H264Packet.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Leparzolja az adatot
            </summary>
            <param name="timestamp"></param>
            <param name="data"></param>
        </member>
        <member name="M:Ozeki.VoIP.H264Packet.#ctor(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Létrehoz egy fragmentált packet-et
            </summary>
            <param name="timestamp"></param>
            <param name="nri"></param>
            <param name="nalType"></param>
            <param name="startBit"></param>
            <param name="endBit"></param>
            <param name="payload"></param>
        </member>
        <member name="M:Ozeki.VoIP.H264Packet.Add(Ozeki.VoIP.H264Packet)">
            <summary>
            Egyes packet ek fragmentálva lehetnek, ezért össze kell őket rakni
            </summary>
            <param name="nalPacket"></param>
        </member>
        <member name="P:Ozeki.VoIP.H264Packet.StartBit">
            <summary>
             Csak fragmentált packet összerakásánál és fragmentált packetre történő darabolásnál van jelentősége
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.H264Packet.EndBit">
            <summary>
            Csak fragmentált packet összerakásánál és fragmentált packetre történő darabolásnál van jelentősége
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IPacketProviderFactory.CreateRTPPacketProvider(Ozeki.Media.MediaPacketType)">
            <summary>
            Megadott parameterek alapjan keszit egy <see cref="T:Ozeki.VoIP.IRTPPacketProvider"/> objektumot.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IPacketProviderFactory.CreateRTPPacketProvider(System.Int32,System.Int32)">
            <summary>
            Megadott parameterek alapjan keszit egy <see cref="T:Ozeki.VoIP.IRTPPacketProvider"/> objektumot.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RTCPManager">
            <summary>
            Vezérli hívás közben az rtcp üzeneteket és elvégzi az RTCP alapján az optimalizálást
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RTCPManager.SendersPacketCount">
            <summary>
            RTP adatcsomagok teljes száma az átvitel kezdete óta, 0-ázni ha az ssrcváltozik
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RTCPManager.SendersOctetCount">
            <summary>
            Az átvitt adatok teljes száma bájtokban, 0-ázni ha az ssrc-változik
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RTCPManager.remoteSSRC">
            <summary>
            Ugyanaz az azonosító mint az RTP-nél      
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RTCPManager.ExtendedHighestSequenceNumberReceived">
            <summary>
            A SSRC_n forrástól érkezett legnagyobb sorozatszámú RTPcsomag sorszáma
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RTCPManager.LastSRTimestamp">
            <summary>
            A középső 32 bitje a 64 bites NTP timestamp-nek, mely a legutoljára érkezett RTCP csomagban érkezett a SSRC_n forrástól
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RTCPManager.DelaySinceLastSRDLSR">
            <summary>
            Időkésleltés az utolsó SR csomag és az adott reportblock között 1/65536 mp-es egységekben (SSRC_n forrás felé)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RTCPManager.r">
            <summary>
            Küldési intervallum kiszámítása
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RTCPManager.RTCPPacketSenderElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Az RTCP csomagok küldése időközönként
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ozeki.VoIP.RTCPManager.RemoteHostEndPoint(System.String,System.Int32)">
            <summary>
             távoli cím és port beállítása ekkor connectel a transport réteg
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RTCPManager.RTCPInterval(System.Double,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <param name="rtcpBandwidth">sávszélesség byte/sec</param>
            <param name="weSent">Mi küldünk</param>
            <param name="packetSize">csomag méret</param>
            <param name="initial">Első csomag</param>
            /// <param name="members">tagok</param>
            <param name="senders">küldők</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RTCPManager.JitterNumber">
            <summary>
            A jitter értéke
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RTCPManager.FractionLostNumber">
            <summary>
            Fraction Lost értéke
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTCPManager.SelfSSRC">
            <summary>
            Ugyan az az azonosító mint az RTP-nél, ha változik akkor bizonyos értékeket 0-ra kell álítani
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RTCPPacket.GetDataByte">
            <summary>
              A nyers adat visszaadása
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ozeki.VoIP.RTCPPacket.GetPachetType">
            <summary>
              A csomag tipus visszadása
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RTCPPacketBye">
            <summary>
              Bye pack (RTCP)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RTCPPacketBye.#ctor(System.UInt32)">
            <summary>
              Bye packet (RTCP)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RTCPPacketRR">
            <summary>
              Received report pack (RTCP)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RTCPPacketRR.GetDataByte">
            <summary>
              A nyers byte-ok vissza adása, ezt kell a transport-nak tovább küldeni
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RTCPPacketRR.Parse(System.Byte[])">
            <summary>
              A nyers byte-bol Receiver Report (RR) elöállítása
            </summary>
            <param name = "data"></param>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.RTCPPacketSDES">
            <summary>
              SDES Packet (RTCP)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RTCPPacketSDES.GetDataByte">
            <summary>
              A nyers byte-ok visszaadása, ezt kell a transport-nak tovább küldeni
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.RTCPPacketSR">
            <summary>
              Sender report pack (RTCP)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RTCPPacketSR.GetDataByte">
            <summary>
              RTCP Sender Packet
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RTPPacketInfo">
            <summary>
            Contains data about an RTP packet.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.Version">
            <summary>
            Gets or sets the version of RTP.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.Padding">
            <summary>
            Gets or sets the value of the padding bit. If the padding bit is set, the packet contains one or more additional padding octets at the end which are not part of the payload
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.Extension">
            <summary>
            Gets or sets the value of the extension bit.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.CSRCCount">
            <summary>
            Gets or sets the number of CSRC identifiers.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.Marker">
            <summary>
            Gets ir sets the value of the marker bit.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.PayloadType">
            <summary>
            Gets or sets the format of the RTP payload.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.SequenceNumber">
            <summary>
            Gets or sets the sequence number of the RTP data.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.Timestamp">
            <summary>
            Gets or sets the timestamp value.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.SSRCIdentifier">
            <summary>
            Gets or sets the identifier of the synchronization source.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.PayloadLength">
            <summary>
            Gets or sets the length of the payload.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RTPPacketInfo.Bytes">
            <summary>
            Gets or sets the byte representation of the RTP packet.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RTPTransportLayer">
            <summary>
            RTP Transport Layer
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISoftPhone">
            <summary>
            Defines methods, events for softphone functionality.
            </summary>
            <exception cref="T:Ozeki.Common.LicenseException">Throws a license exception, when call limit or phone line registration limit reached.</exception>
            <remarks>
            This interface contains all the functionality of a traditional telephone device
            with the ability of multiple call handling. The codecs it uses can be set and changed
            dinamically.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.Close">
            <summary>
            Closes the softphone and frees the resources.
            </summary>
            <remarks>
            After calling the <see cref="M:Ozeki.VoIP.ISoftPhone.Close"/> method, the ISoftPhone object cannot be used and generates errors.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.CreateCallObject(Ozeki.VoIP.IPhoneLine,System.String)">
            <summary>
            Creates a phone call with the specified dialed number.
            </summary>
            <param name="line">The phone line the call will be created on.</param>
            <param name="dial">The dialed number or the dialed SIP address (eg. '4001' or '4001@example.com' or 'sip:4001@example.com').</param>
            <returns>The created phone call object.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.CreateCallObject(Ozeki.VoIP.IPhoneLine,Ozeki.VoIP.DialParameters)">
            <summary>
            Creates a phone call with the specified parameters.
            </summary>
            <param name="line">The phone line the call will be created on.</param>
            <param name="dialParams">The parameters for the outgoing call (such as dialed number or media types).</param>
            <returns>The created phone call object.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.CreateDirectIPCallObject(Ozeki.VoIP.IPhoneLine,Ozeki.VoIP.DirectIPDialParameters,System.String)">
            <summary>
            Makes a call to a remote address.
            </summary>
            <param name="iline">The phone line the call will be created on.</param>
            <param name="dialParams">The parameters for the outgoing call (such as dialed number or media types).</param>
            <param name="remoteAddress">The remote endpoint where the SIP messages will be sent.</param>
            <returns>The created phone call object.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.CreatePhoneLine(Ozeki.VoIP.SIPAccount)">
            <summary>
            Creates a line for the specified SIP account which uses default settings
            (UDP protocol for SIP, automatic NAT configuration, no SRTP support).
            </summary>
            <param name="sipAccount">The SIP account.</param>
            <returns>The created phone line.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.CreatePhoneLine(Ozeki.VoIP.PhoneLineConfiguration)">
            <summary>
            Creates a line with the specified configuration.
            </summary>
            <param name="config">An object containing configuration options for the phone line.</param>
            <returns>The created line.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.CreateDirectIPPhoneLine(Ozeki.VoIP.DirectIPPhoneLineConfig)">
            <summary>
            Creates a line with the specified configuration which can receive calls via direct IP dialing.
            </summary>
            <param name="config">An object containing configuration options for the phone line.</param>
            <returns>The created line.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.RegisterPhoneLine(Ozeki.VoIP.IPhoneLine)">
            <summary>
            Registers the SIP account to the softphone. If SIP account registration required,
            the softphone will send a register request asynchronously to the SIP registrar/proxy.
            </summary>
            <param name="phoneLine">The line object which will be registered.</param>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.UnregisterPhoneLine(Ozeki.VoIP.IPhoneLine)">
            <summary>
            Unregisters the SIP account from the softphone. If the SIP account is registered with a SIP server,
            the softphone will send an unregister request asynchronously to the SIP registrar/proxy.
            </summary>
            <param name="phoneLine">The line object which will be unregistered.</param>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.EnableServerNameValidation(System.Boolean)">
            <summary>
            Enables or disables server name validation.
            </summary>
            <param name="validate"></param>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.BeginNatDiscovery(System.String,Ozeki.Network.NatDiscoveryCallback)">
            <summary>
            Begins the NAT discovery process using the default STUN server (stun.ozekiphone.com).
            </summary>
            <param name="localAddress">Address of the local interface.</param>
            <param name="callback"></param>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.BeginNatDiscovery(System.String,System.String,Ozeki.Network.NatDiscoveryCallback)">
            <summary>
            Begins the NAT discovery process.
            </summary>
            <param name="localAddress">Address of the local interface.</param>
            <param name="stunServerAddress">Address of the STUN server.</param>
            <param name="callback"></param>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.EnableCodec(System.Int32)">
            <summary>
            Enables the specified codec in the softphone globally.
            </summary>
            <param name="payloadType">The payload identifier of the codec.</param>
            <remarks>
            Only the enabled codecs will be negotiated during the calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.EnableCodec(Ozeki.Media.CodecPayloadType)">
            <summary>
            Enables a codec globally in the softphone.
            </summary>
            <param name="payloadType">The payload type of the codec.</param>
            <remarks>
            Only the enabled codecs will be negotiated during the calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.DisableCodec(System.Int32)">
            <summary>
            Disables a codec globally in the softphone.
            </summary>
            <param name="payloadType">The payload identifier of the codec.</param>
            <remarks>
            Disabled codecs will not be negotiated during the calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.DisableCodec(Ozeki.Media.CodecPayloadType)">
            <summary>
            Disables a codec globally in the softphone.
            </summary>
            <param name="payloadType">The payload identifier of the codec.</param>
            <remarks>
            Disabled codecs will not be negotiated during the calls.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.SetSIPMessageManipulator(Ozeki.VoIP.ISIPMessageManipulator)">
            <summary>
            Sets an SDP message manipulator to the softphone which can modify incoming and outgoing SIP messages.
            </summary>
            <param name="manipulator">The manipulator itself.</param>
            <remarks>
            Only one SIP message manipulator can be set at a time. If a new SIP message manipulator has been set,
            the previous SIP message manipulator will be replaced.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.SetSDPMessageManipulator(Ozeki.VoIP.ISDPMessageManipulator)">
            <summary>
            Sets an SDP message manipulator to the softphone which can modify incoming and outgoing SDP messages.
            </summary>
            <param name="manipulator">The SDP message manipulator.</param>
            <remarks>
            Only one SDP message manipulator can be set at a time. If a new SDP message manipulator has been set,
            the previous SDP message manipulator will be replaced.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISoftPhone.SetPortRange(System.Int32,System.Int32)">
            <summary>
            Sets the RTP port range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="E:Ozeki.VoIP.ISoftPhone.IncomingCall">
            <summary>
            Occurs when an incoming call received from a remote host.
            </summary>
            <remarks>
            The event args contains an <see cref="T:Ozeki.VoIP.IPhoneCall"/> object which represents the incoming call.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ISoftPhone.VideoEncoderQuality">
            <summary>
            Gets or sets the quality of the sent video.
            </summary>
            <remarks>
            The network traffic can be reduced with lower video quality during video calls.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.ISoftPhone.Codecs">
            <summary>
            Gets the list of available codecs in the softphone.
            </summary>
            <returns>The list of the codecs.</returns>
        </member>
        <member name="T:Ozeki.VoIP.NewSoftphone">
            <summary>
            Azert nem implementalja az ISoftPhone interface-t, hogy az obfuscalt kódban csak a ProtectedSoftphone nál látszódjon
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.PBXBase.OnAuthenticationRequired(Ozeki.VoIP.ISIPExtension,Ozeki.VoIP.RequestAuthenticationInfo)">
            <summary>
            An extension denoted in the parameter need to be authenticated.
            </summary>
            <param name="extension">Extension that is being authenticated</param>
            <param name="requestAuthInfo">Information about the request that is being authenticated</param>
        </member>
        <member name="M:Ozeki.VoIP.PBXBase.OnAuthenticationRequest(Ozeki.VoIP.ISIPExtension,Ozeki.VoIP.RequestAuthenticationInfo)">
            <summary>
            An extension denoted in the parameter need to be authenticated.
            </summary>
            <param name="extension">Extension that is being authenticated</param>
            <param name="requestAuthInfo">Information about the request that is being authenticated</param>
        </member>
        <member name="M:Ozeki.VoIP.PBXBase.SetListenPort(System.String,System.Int32,Ozeki.Network.TransportType)">
            <summary>
            Sets the local address and port on which the PBX will listen for SIP connections.
            </summary>
            <returns>True, if success; otherwise false</returns>
            <exception cref="T:Ozeki.Common.VoIPException">Throws a VoIPException when the local address is invalid.</exception>
        </member>
        <member name="T:Ozeki.VoIP.ProtectedPhoneCall">
            <summary>
            Az összes hívás ugyanazzal a típussal megy vissza, így nem lehet megállapítani, hogy melyik volt a demo phoneCall
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IPhoneCall">
            <summary>
            Interface for softphone calls.
            </summary>
            <remarks>
            The interface that represents the phone call. The phone call stores the phone line,
            the number of the remote party, the information about that it is an incoming call or not.
            The events that are defined in this interface inform the system about the
            errors that result the end of the call, the state change of the call, the DTMF signals
            arriving from the remote end and the media packages sent from the remote end.
            The call control is also defined in this interface. If the call is an incoming call, you
            can accept or reject it. The outgoing call can be started, ended, cancelled, held with the methods
            that are also defined here. The sending capability of DTMF signals and media packets are 
            also defined in the IPhoneCall interface.
            The call supports more media dtat format according to the codecs that are used during the call.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.IPhoneCall.PhoneLine">
            <summary>
            Gets the correspondent phone line.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SoftPhoneFactory">
            <summary>
            Defines methods for creating the softphone engine.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SoftPhoneFactory.CreateSoftPhone(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Creates a new softphone engine.
            </summary>
            <param name="localAddress">The local address that will be used for SIP and RTP communication.</param>
            <param name="minPort">Minimum port used for RTP communication.</param>
            <param name="maxPort">Maximum port used for RTP communication.</param>
            <exception cref="!:Common.Exceptions.LicenseException">Throws a license exception, when the trial period has expired.</exception>
            <exception cref="!:Common.Exceptions.VoIPException">Throws a VoIP exception, when the min port is higher than the max port.</exception>
        </member>
        <member name="M:Ozeki.VoIP.SoftPhoneFactory.CreateSoftPhone(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new softphone engine.
            </summary>
            <param name="localAddress">The local address that will be used for SIP and RTP communication.</param>
            <param name="minPort">Minimum port used for RTP communication.</param>
            <param name="maxPort">Maximum port used for RTP communication.</param>
            <exception cref="!:Common.Exceptions.LicenseException">Throws a license exception, when the trial period has expired.</exception>
            <exception cref="!:Common.Exceptions.VoIPException">Throws a VoIP exception, when the min port is higher than the max port.</exception>
        </member>
        <member name="M:Ozeki.VoIP.SoftPhoneFactory.CreateSoftPhone(System.Int32,System.Int32)">
            <summary>
            Creates a new softphone engine.
            </summary>
            <param name="minPort">Minimum port used for RTP communication.</param>
            <param name="maxPort">Maximum port used for RTP communication.</param>
            <exception cref="!:Common.Exceptions.LicenseException">Throws a license exception, when the trial period has expired.</exception>
            <exception cref="!:Common.Exceptions.VoIPException">Throws a VoIP exception, when the min port is higher than the max port.</exception>
        </member>
        <member name="M:Ozeki.VoIP.SoftPhoneFactory.GetLocalIP">
            <summary>
            Detects the local IP address.
            </summary>
            <returns>Detected IP address.</returns>
        </member>
        <member name="M:Ozeki.VoIP.SoftPhoneFactory.GetAddressList">
            <summary>
            Gets the list of local IP addresses.
            </summary>
            <returns>List of local IP addresses.</returns>
        </member>
        <member name="M:Ozeki.Media.CommunicationModeHelper.LocalHold(Ozeki.Media.CommunicationMode,Ozeki.Media.CommunicationMode)">
            <summary>
            Visszaadja a lokalis csatorna communication mode-jat, ha holdolni szeretnek a hivast.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CommunicationModeHelper.LocalUnhold(Ozeki.Media.CommunicationMode,Ozeki.Media.CommunicationMode)">
            <summary>
            Visszaadja a lokalis csatorna communication mode-jat, ha unholdolni szeretnek a hivast.
            </summary>
        </member>
        <member name="M:Ozeki.Media.CommunicationModeHelper.AnswerRemoteCommunicationMode(Ozeki.Media.CommunicationMode,Ozeki.Media.CommunicationMode)">
            <summary>
            Visszaadja a lokalis csatorna communication mode-jat, ha tavolrol modositottak a communication mode-ot (pl. remote hold, unhold)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CryptoDescription.#ctor(System.UInt32,System.String,Ozeki.VoIP.SRTPCryptoSuite)">
            <summary>
            unicast channel answer offer esetén 
            </summary>
            <param name="tag"></param>
            <param name="cryptoSuite"></param>
        </member>
        <member name="T:Ozeki.VoIP.SRTPEncryptAlogirthm">
            <summary>
            Az srtp implementáció által jelenleg támogatott titkosítási algoritmusok
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPFactory.GetCodecs(Ozeki.VoIP.SDPMediaDescription,Ozeki.Media.MediaType)">
            <summary>
            Az SDP adott media channelebol kiszedi a codeceket.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannelDescription.#ctor(System.String,System.Int32,System.String,Ozeki.Media.CommunicationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.MediaChannelDescription"/> class.
            </summary>
            <param name="mediaType">Media type. (e.g. Audio)</param>
            <param name="mediaProtocol">Media protocol. (e.g. RTP)</param>
            <param name="port">Port used during the communication.</param>
            <param name="communicationMode">Communication mode. (e.g sendrecv)</param>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelDescription.MediaTypeString">
            <summary>
            Gets the string representation of the media type.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelDescription.MediaProtocolString">
            <summary>
            Gets the string representation of the media protocol.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelDescription.RealPort">
            <summary>
            Az IMediaChannel portja. Ha letiltjak a channelt, akkor a Port 0 lesz, viszont ebben benn van az eredeti port, amire majd visszaalhatunk Enable-kor.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelDescription.MediaType">
            <summary>
            Gets the type of the media channel.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelDescription.Port">
            <summary>
            Gets the transport port to which the media stream is sent.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelDescription.MediaProtocol">
            <summary>
            Gets the transport protocol used.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelDescription.SupportedCodecs">
            <summary>
            Gets the list of the supported codecs of the media channel.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelDescription.CommunicationMode">
            <summary>
            Gets the communication mode of the media channel.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannelDescriptionEx.Enable(Ozeki.VoIP.MediaChannelDescription)">
            <summary>
            Updates the description, media can be received through this channel.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannelDescriptionEx.Disable(Ozeki.VoIP.MediaChannelDescription)">
            <summary>
            Updates the description, media can not be received through this channel.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaDescription.GetConnection">
            <summary>
            Gets the IP address where the media data will be sent to.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaDescription.GetChannelRemoteAddress(System.Int32)">
            <summary>
            Gets the IP address for the channel where the media data will be sent to.
            If no connection is present int the channel description, the session level connection will be used.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaDescription.GetChannelRemoteAddress(Ozeki.VoIP.MediaChannelDescription)">
            <summary>
            Gets the IP address for the channel where the media data will be sent to.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaDescription.GetCodecDescription(Ozeki.Media.MediaType,System.Int32)">
            <summary>
            Gets the description of the codec with the specified payload type.
            </summary>
            <param name="mediaType">Audio/video</param>
            <param name="payloadType">The payload type of the codec</param>
            <returns>The codec description</returns>
        </member>
        <member name="P:Ozeki.VoIP.MediaDescription.ActiveMediaTypes">
            <summary>
            Gets the media types of the accepted channels.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaDescriptionEx.GetFmtpString(Ozeki.VoIP.MediaDescription,Ozeki.Media.MediaType,System.Int32)">
            <summary>
            Gets the parameters of the codec with the specified payload type.
            </summary>
            <returns>If present then the fmtp string; otherwise null.</returns>
        </member>
        <member name="M:Ozeki.VoIP.MediaDescriptionEx.GetChannelDescription(Ozeki.VoIP.MediaDescription,Ozeki.Media.MediaType)">
            <summary>
            Retrieves the first media channel description for the given media type.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MediaProtocol">
            <summary>
            Defines protocol types for sending and receiving media data.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MediaProtocol.UDP">
            <summary>
            UDP
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MediaProtocol.TCP_RTP">
            <summary>
            TCP
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MediaProtocol.RTP_AVP">
            <summary>
            RTP/AVP
            </summary>
            <remarks>RFC4566</remarks>
        </member>
        <member name="F:Ozeki.VoIP.MediaProtocol.RTP_SAVP">
            <summary>
            RTP/SAVP
            </summary>
            <remarks>RFC4566</remarks>
        </member>
        <member name="F:Ozeki.VoIP.MediaProtocol.Extension">
            <summary>
            Other
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.BandwidthTypeParserExtension.PBwType">
            <summary>
            bwtype =  token
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.InvalidOriginUsernameParserExtension">
            <summary>
            
            </summary>
            <remarks>
            o=jingxun VOIP 1061189079 1124067085 IN IP4 192.168.172.146
            szokoz a username-ben
            </remarks>
        </member>
        <member name="F:Ozeki.VoIP.SDP4566Parser._parserExtensions">
            session-description = proto-version
                                  origin-field
                                  session-name-field
                                  information-field
                                  uri-field
                                  email-fields
                                  phone-fields
                                  connection-field
                                  bandwidth-fields
                                  time-fields
                                  key-field
                                  attribute-fields
                                  media-descriptions
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.ProtoVersion">
            <summary>
            proto-version = %x76 "=" 1*DIGIT crlf 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.POriginField">
            <summary>
            origin-field = %x6f "=" username SP sess-id SP sess-version SP
                         nettype SP addrtype SP unicast-address crlf
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PSessionNameField">
            <summary>
            session-name-field =  "s=" text CRLF
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PInformationField">
            <summary>
            information-field =   ["i=" text CRLF]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PUriField">
            <summary>
             uri-field = ["u=" uri CRLF]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PEmailFields">
            <summary>
            email-fields = *("e=" email-address CRLF) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PPhoneFields">
            <summary>
            phone-fields = *("p=" phone-number CRLF) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PConnectionField">
            <summary>
            connection-field = ["c=" nettype space addrtype space connection-address CRLF] 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PBandwidthFields">
            <summary>
            bandwidth-fields = *("b=" bwtype ":" bandwidth CRLF) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PTimeFields">
            <summary>
            time-fields = 1*( %x74 "=" start-time SP stop-time crlf *(repeat-fields crlf)) [zone-adjustments crlf]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PRepeatFields">
            <summary>
            repeat-fields = "r=" repeat-interval space typed-time 1*(space typed-time)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PZoneAdjustments">
            <summary>
            zone-adjustments = "z=" time SP ["-"] typed-time *(SP time SP ["-"] typed-time)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PZoneAdjustmentPair">
            <summary>
            time SP ["-"] typed-time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PKeyField">
            <summary>
            key-field = ["k=" key-type CRLF] 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PAttribute">
            <summary>
            attribute = att-field [":" att-value]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PMediaDescriptions">
            <summary>
            media-descriptions =  *( media-field
                                     information-field
                                     *(connection-field)
                                     bandwidth-fields
                                     key-field
                                     attribute-fields ) */
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PKeyType">
            <summary>
            key-type = "prompt" | "clear:" text | "base64:" [base64] | "uri:" uri 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PBase64">
            <summary>
            base64 = 1*base64-unit [base64-pad] / base64-pad
            base64-unit = 4base64-char
            base64-pad  = 2base64-char "==" / 3base64-char "="
            base64-char = ALPHA / DIGIT / "+" / "/"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PAttributeFields">
            <summary>
            attribute-fields = *("a=" attribute CRLF) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PMediaField">
            <summary>
            media-field = "m=" media space port ["/" integer] space proto 1*(space fmt) CRLF
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PUsername">
            <summary>
            username = non-ws-string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PSessId">
            <summary>
            sess-id = 1*(DIGIT)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PSessVersion">
            <summary>
            sess-version = 1*(DIGIT)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PMedia">
            <summary>
            media = token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PFmt">
            <summary>
            fmt = token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PProto">
            <summary>
            proto  = token *("/" token)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PPort">
            <summary>
            port = 1*(DIGIT)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PAttField">
            <summary>
            att-field = token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PAttValue">
            <summary>
            att-value = byte-string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PConnectionAddress">
            <summary>
            connection-address =  multicast-address / unicast-address
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PMulticastAddress">
            <summary>
            multicast-address =   IP4-multicast / IP6-multicast / fqdn / extn-addr
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PIP4Multicast">
            <summary>
            IP4-multicast = m1 3( "." decimal-uchar ) "/" ttl [ "/" integer ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PM1">
            <summary>
            m1 = ("22" ("4"/"5"/"6"/"7"/"8"/"9")) / ("23" DIGIT )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PIP6Multicast">
            <summary>
            IP6-multicast = hexpart [ "/" integer ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PTtl">
            <summary>
            ttl = (POSDIGIT *2DIGIT) / "0"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PStartTime">
            <summary>
            start-time = time | "0"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PStopTime">
            <summary>
            stop-time = time | "0"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PTime">
            <summary>
            time = POS-DIGIT 9*(DIGIT)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PRepeatInterval">
            <summary>
            repeat-interval = POSDIGIT *DIGIT [fixed-len-time-unit]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PTypedTime(System.Int64)">
            <summary>
            typed-time = 1*(DIGIT) [fixed-len-time-unit]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PFixedLenTimeUnit">
            <summary>
            fixed-len-time-unit = "d" | "h" | "m" | "s"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PBwType">
            <summary>
            bwtype =  token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PBandwidth">
            <summary>
            bandwidth = 1*(DIGIT)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PEmailAddress">
            <summary>
            email-address = address-and-comment / dispname-and-address
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PAddressAndComment">
            <summary>
            address-and-comment  = addr-spec [1*SP "(" 1*email-safe ")"]
            </summary>
            <returns></returns>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.VoIP.SDP4566Parser.PDisplayNameAndAddress” -->
        <member name="M:Ozeki.VoIP.SDP4566Parser.PAddrSpec">
            <summary>
            addr-spec = 1*(alpha-numeric / ".") "@" 1*(alpha-numeric / ".") 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PUri">
            <summary>
            uri = ;defined in RFC1630 regexp => ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
            </summary>
            <returns></returns>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.VoIP.SDP4566Parser.PPhoneNumber” -->
        <member name="M:Ozeki.VoIP.SDP4566Parser.PPhone">
            <summary>
            phone = ["+"] DIGIT 1*(SP / "-" / DIGIT)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PNetType">
            <summary>
            nettype = token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PAddrType">
            <summary>
            addrtype = token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PAddr">
            <summary>
            addr = FQDN | unicast-address
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PFqdn">
            <summary>
            FQDN = 4*(alpha-numeric|"-"|".")
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PUnicastAddress">
            <summary>
            unicast-address = IP4-address / IP6-address / fqdn / extn-addr
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PIP4Address">
            <summary>
            IP4-address =  b1 3("." decimal-uchar)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PB1">
            <summary>
            b1 = decimal-uchar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PIP6Address">
            <summary>
            IP6-address = hexpart [ ":" IP4-address ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PHexPart">
            <summary>
            hexpart = hexseq / hexseq "::" [ hexseq ] / "::" [ hexseq ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PHexSeq">
            <summary>
            hexseq  = hex4 *( ":" hex4)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PExtnAddr">
            <summary>
            extn-addr = non-ws-string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PText">
            <summary>
            text = byte-string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PByteString">
            <summary>
            byte-string = 1*(0x01..0x09|0x0b|0x0c|0x0e..0xff)
            byte-string =         1*(%x01-09/%x0B-0C/%x0E-FF)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PNonWsString">
            <summary>
            non-ws-string = 1*(VCHAR/%x80-FF)
            VCHAR =  %x21-7E
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PToken">
            <summary>
            token = 1*(token-char)
               token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PDecimalUchar">
            <summary>
            decimal-uchar = DIGIT
                            | POS-DIGIT DIGIT
                            | ("1" 2*(DIGIT))
                            | ("2" ("0"|"1"|"2"|"3"|"4") DIGIT)
                            | ("2" "5" ("0"|"1"|"2"|"3"|"4"|"5"))
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDP4566Parser.PEmailSafePlus">
            <summary>
            email-safe = %x01-09/%x0B-0C/%x0E-27/%x2A-3B/%x3D/%x3F-FF
            </summary>
            <returns></returns>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.VoIP.SDP4566Parser.PSafe” -->
        <member name="T:Ozeki.VoIP.SDPParserEx">
            <summary>
            Szálbiztos változat
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.BandwidthType.CT">
            <summary>
            It is supplied for the session giving the proposed upper limit to the bandwidth.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.BandwidthType.AS">
            <summary>
            The bandwidth is interpreted to be application specific.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.BandwidthType.TIAS">
            <summary>
            Transport Independent Application Specific maximum, a bandwidth modifier.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.BandwidthType.RR">
            <summary>
            RTCP bandwidth allocated to other participants in the RTP session.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MediaConferenceType.Broadcast">
            <summary>
            Broadcast
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MediaConferenceType.Meeting">
            <summary>
            Meeting
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MediaConferenceType.Moderated">
            <summary>
            Indicate the use of a floor control tool and that the media tools are started so as to mute new sites joining the conference.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MediaConferenceType.Test">
            <summary>
            Suggested as a hint that, unless explicitly requested otherwise, receivers can safely avoid displaying this session description to users.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MediaConferenceType.H332">
            <summary>
            Indicates that the loosely coupled session is part of an H.332 session.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPMediaDescription.PrintSDPData">
            <summary>
            media-description =    ( media-field
                                     information-field
                                     *(connection-field)
                                     bandwidth-fields
                                     key-field
                                     attribute-fields ) */
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Ozeki.VoIP.SDPTimeData.PrintSDPData">
            <summary>
            time-fields = 1*( %x74 "=" start-time SP stop-time crlf *(repeat-fields crlf)) [zone-adjustments crlf]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ZoneAdjustments.PrintSDPData">
            <summary>
            zone-adjustments = "z=" time SP ["-"] typed-time *(SP time SP ["-"] typed-time)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ConferenceTypeAttribute">
            <summary>
            This specifies the type of the conference.
            a=type:conference type
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SDPAttribute">
            <summary>
            Attributes are the primary means for extending SDP.  Attributes may be defined to be used as "session-level" attributes, "media-level" attributes, or both.
            a=attribute
            a=attribute:value
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CryptoAttribute">
            <summary>
            Describes the cryptographic suite, key parameters, and session parameters for the preceding unicast media line.
            
            a=crypto:tag crypto-suite key-params [session-params]
            </summary>
            <remarks>RFC 4568</remarks>
            <example>
            a=crypto:1 AES_CM_128_HMAC_SHA1_80
            inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
            </example>
        </member>
        <member name="T:Ozeki.VoIP.FmtpAttribute">
            <summary>
            This attribute allows parameters that are specific to a particular format to be conveyed in a way that SDP does not have to understand them.
            a=fmtp:format format_specific_parameters
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.FrameRateAttribute">
            <summary>
            This gives the maximum video frame rate in frames/sec.
            a=framerate:frame_rate
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CandidateAttribute">
            <summary>
            The candidate attribute is a media-level attribute only. 
            It contains a transport address for a candidate that can be used for connectivity checks.
            a=candidate:...
            </summary>
            <exexample>a=candidate:1 1 UDP 2130706431 $L-PRIV-1.IP $L-PRIV-1.PORT typ host</exexample>
        </member>
        <member name="T:Ozeki.VoIP.IceOptionsAttribute">
            <summary>
            The "ice-options" attribute is a session-level attribute. It contains a series of tokens that identify the options supported by the agent.
            a=ice-options:ice-option-tag 0*(ice-option-tag)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RemoteCandidatesAttribute">
            <summary>
            Provides the identity of the remote candidates that the offerer wishes the answerer to use in its answer.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPICEAttributeFactory.CreateCandidate(System.String)">
            <summary>
            a=candidate:...
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPICEAttributeFactory.CreateRemoteCandidates(System.String)">
            <summary>
            a=remote-candidates:...
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPICEAttributeFactory.CreateIceLite">
            <summary>
            a=ice-lite
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPICEAttributeFactory.CreateIceMismatch">
            <summary>
            a=ice-mismatch
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPICEAttributeFactory.CreateIcePwd(System.String)">
            <summary>
            a:ice-pwd:password
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPICEAttributeFactory.CreateIceUfrag(System.String)">
            <summary>
            a:ice-ufrag:ufrag
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPICEAttributeFactory.CreateIceOptions(System.String)">
            <summary>
            a=ice-options:ice-option-tag 0*(ice-option-tag)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MaxPacketTimeAttribute">
            <summary>
            This gives the maximum amount of media that can be encapsulated in each packet, expressed as time in milliseconds.
            
            a=maxptime:maximum_packet_time
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.OrientAttribute">
            <summary>
            Normally this is only used for a whiteboard or presentation tool. It specifies the orientation of a the workspace on the screen.
            a=orient:orientation
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PacketTimeAttribute">
            <summary>
            This gives the length of time in milliseconds represented by the media in a packet.
            
            a=ptime:packet_time
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.QualityAttribute">
            <summary>
            This gives a suggestion for the quality of the encoding as an integer value.
            
            a=quality:quality
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.QualityAttribute.Quality">
            <summary>
            10 - the best still-image quality the compression scheme can give.
            5  - the default behaviour given no quality suggestion.
            0  - the worst still-image quality the codec designer thinks is still usable.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RtpmapAttribute">
            <summary>
            This attribute maps from an RTP payload type number (as used in an "m=" line) to an encoding name denoting the payload format to be used.  It also provides information on the clock rate and encoding parameters.
            
            a=rtpmap:payload_type encoding_name/clock_rate [/encoding_parameters]
            </summary>
            <example>
            m=audio 49230 RTP/AVP 96 97 98
            a=rtpmap:96 L8/8000
            a=rtpmap:97 L16/8000
            a=rtpmap:98 L16/11025/2
            </example>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateCategory(System.String)">
            <summary>
            a=cat:category
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateKeywords(System.String)">
            <summary>
            a=keywds:keywords
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateTool(System.String)">
            <summary>
            a=tool:name_and_version_of_tool
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreatePTime(System.String)">
            <summary>
            a=ptime:packet_time
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateMaxPTime(System.String)">
            <summary>
            a=maxptime:maximum_packet_time
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateRtpmap(System.String)">
            <summary>
            a=rtpmap:payload_type encoding_name/clock_rate [/encoding_parameters]
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateRecvOnly">
            <summary>
            a=recvonly
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateSendRecv">
            <summary>
            This specifies that the tools should be started in send and receive mode. 
            a=sendrecv
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateSendOnly">
            <summary>
            a=sendonly
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateInactive">
            <summary>
            a=inactive
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateOrient(System.String)">
            <summary>
            a=orient:orientation
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateType(System.String)">
            <summary>
            a=type:conference_type
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateCharset(System.String)">
            <summary>
            a=charset:character_set
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateSDPLang(System.String)">
            <summary>
            a=sdplang:language_tag
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateLang(System.String)">
            <summary>
            a=lang:language_tag
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateFrameRate(System.String)">
            <summary>
            a=framerate:frame_rate
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateQuality(System.String)">
            <summary>
            a=quality:quality
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateFmtp(System.String)">
            <summary>
            a=fmtp:format format_specifig_parameters
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPAttributeFactory.CreateCrypto(System.String)">
            <summary>
            a=crypto:tag crypto-suite key-params [session-params]
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Extension">
            <summary>
            Extension attribute type.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Category">
            <summary>
            This attribute gives the dot-separated hierarchical category of the session.  This is to enable a receiver to filter unwanted sessions by category. (SDP a=cat)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Keywords">
            <summary>
            Like the cat attribute, this is to assist identifying wanted sessions at the receiver. (SDP a=keywds)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Tool">
            <summary>
            This gives the name and version number of the tool used to create the session description. (SDP a=tool)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.PacketizationTime">
            <summary>
            This gives the length of time in milliseconds represented by the media in a packet. (SDP a=ptime)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.MaxPacketizationTime">
            <summary>
            This gives the maximum amount of media that can be encapsulated in each packet, expressed as time in milliseconds. (SDP a=maxptime)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.RtpMap">
            <summary>
            This attribute maps from an RTP payload type number (as used in an "m=" line) to an encoding name denoting the payload format to be used.
            It also provides information on the clock rate and encoding parameters. (SDP a=rtpmap)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.ReceiveOnly">
            <summary>
            This specifies that the tools should be started in send and receive mode. (SDP a=recvonly)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.SendRecv">
            <summary>
            This specifies that the tools should be started in send and receive mode. (SDP a=sendrecv)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.SendOnly">
            <summary>
            This specifies that the tools should be started in send-only mode. (SDP a=sendonly)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Inactive">
            <summary>
            This specifies that the tools should be started in inactive mode. No media is sent over an inactive media stream. (SDP a=inactive)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Orientation">
            <summary>
            Normally this is only used for a whiteboard or presentation tool. It specifies the orientation of a the workspace on the screen. (SDP a=orient)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.ConferenceType">
            <summary>
            This specifies the type of the conference. (SDP a=type)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Charset">
            <summary>
            This specifies the character set to be used to display the session name and information data. (SDP a=charset)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.SdpLang">
            <summary>
            This can be a session-level attribute or a media-level attribute.
            As a session-level attribute, it specifies the language for the session description.
            As a media-level attribute, it specifies the language for any media-level SDP information field associated with that media.
            (SDP a=sdplang)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Lang">
            <summary>
            This can be a session-level attribute or a media-level attribute.
            As a session-level attribute, it specifies the default language for the session being described.
            As a media-level attribute, it specifies the language for that media, overriding any session-level language specified.
            (SDP a=lang)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.FrameRate">
            <summary>
            This gives the maximum video frame rate in frames/sec. (SDP a=framerate)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Quality">
            <summary>
            This gives a suggestion for the quality of the encoding as an integer value. (SDP a=quality)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Fmtp">
            <summary>
            This attribute allows parameters that are specific to a particular format to be conveyed in a way that SDP does not have to understand them. (SDP a=fmtp)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Crypto">
            <summary>
            Describes the cryptographic suite, key parameters, and session parameters for the preceding unicast media line. (SDP a=crypto)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.Candidate">
            <summary>
            Provides one of many possible candidate addresses for communication.
            These addresses are validated with an end-to-end connectivity check using Session Traversal Utilities for NAT (STUN)). (SDP a=candidate)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.RemoteCandidates">
            <summary>
            Provides the identity of the remote candidates that the offerer wishes the answerer to use in its answer. (SDP a=remote-candidates)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.IceLite">
            <summary>
            Indicates that an agent has the minimum functionality required to support ICE inter-operation with a peer that has a full implementation. (SDP a=ice-lite)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.IceMismatch">
            <summary>
            Indicates that an agent is ICE capable, but did not proceed with ICE due to a mismatch of candidates with the default destination for media signaled in the SDP. (SDP a=ice-mismatch)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.IcePwd">
            <summary>
            Provides the password used to protect STUN connectivity checks. (SDP a=ice-pwd)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.IceUfrag">
            <summary>
            Provides the fragments used to construct the username in STUN connectivity checks. (SDP a=ice-ufrag)
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SDPAttributeType.IceOptions">
            <summary>
            Indicates the ICE options or extensions used by the agent. (SDP a=ice-options)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPBandwidth.PrintSDPData">
            <summary>
            "b=" bwtype ":" bandwidth CRLF
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.SDPConnection">
            <summary>
            Contains connection data.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SDPConnection.NetType">
            <summary>
            Gets the network type.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SDPConnection.AddressType">
            <summary>
            Gets the address type (IP4 or IP6).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SDPConnection.ConnectionAddress">
            <summary>
            Gets the connnection address.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SDPEmail">
            <summary>
            Specify contact information for the person responsible for the conference
            </summary>
            <remarks>RFC 4566 - 5.6</remarks>
        </member>
        <member name="M:Ozeki.VoIP.SDPEmail.PrintSDPData">
            <summary>
            "e=" email-address CRLF
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDPInformation.PrintSDPData">
            <summary>
            i=text CRLF
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDPMedia.PrintSDPData">
            <summary>
            media-field = "m=" media space port ["/" integer] space proto 1*(space fmt) CRLF
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ozeki.VoIP.SDPMedia.Fmt">
            <summary>
            List of codec parameters. Usually the numbers of rtp codec payload types, represented as strings.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SDPOrigin">
            <summary>
            Gives the originator of the session (her username and the address of the user's host) plus a session identifier and version number.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SDPOrigin.PrintSDPData">
            <summary>
            origin-field = %x6f "=" username SP sess-id SP sess-version SP
                         nettype SP addrtype SP unicast-address crlf
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ozeki.VoIP.SDPOrigin.Username">
            <summary>
            Gets the user's login on the originating host, or it is "-" if the originating host does not support the concept of user IDs.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SDPOrigin.SessionId">
            <summary>
            Gets a numeric string that identifies the session.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SDPOrigin.SessionVersion">
            <summary>
            Gets the version number for this session description.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SDPOrigin.Nettype">
            <summary>
            Gets a text string giving the type of network.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SDPOrigin.AddrType">
            <summary>
            Gets a text string giving the type of the address that follows.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SDPOrigin.UnicastAddress">
            <summary>
            Gets the address of the machine from which the session was created.
            </summary>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.VoIP.SDPPhoneNumber.PrintSDPData” -->
        <member name="M:Ozeki.VoIP.SDPRepeated.PrintSDPData">
            <summary>
            repeat-fields = "r=" repeat-interval space typed-time 1*(space typed-time)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDPSessionName.PrintSDPData">
            <summary>
            session-name-field =  "s=" text CRLF
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.SDPTime">
            <summary>
            Specify the start and stop times for a session
            </summary>
            <remarks>RFC 4566 - 5.9</remarks>
        </member>
        <member name="M:Ozeki.VoIP.SDPTime.PrintSDPData">
            <summary>
            time-field = "t=" start-time SP stop-time crlf *(repeat-fields crlf))
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SDPUri.PrintSDPData">
            <summary>
             uri-field = ["u=" uri CRLF]
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.Origin">
            <summary>
            The Origin gives the originator of the session (her username and the address of the user's host)
            plus a session identifier and version number.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.Origin.#ctor(System.String,System.String,System.UInt64,Ozeki.VoIP.NetType,Ozeki.VoIP.AddressType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Origin"/> class.
            </summary>
            <param name="username">The user name part of the originator.</param>
            <param name="sessionId">The unique identifier of the session.</param>
            <param name="sessionVersion">The version number for the session description.</param>
            <param name="netType">Type of network</param>
            <param name="addressType">Type of the uri address</param>
            <param name="uri">The address of the machine from which the session was created.</param>
        </member>
        <member name="M:Ozeki.VoIP.Origin.#ctor(System.String,System.String,System.UInt64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Origin"/> class.
            </summary>
            <param name="username">The user name part of the originator.</param>
            <param name="sessionId">The unique identifier of the session.</param>
            <param name="sessionVersion">The version number for the session description.</param>
            <param name="uri">The address of the machine from which the session was created.</param>
        </member>
        <member name="P:Ozeki.VoIP.Origin.Username">
            <summary>
            Gets the user name part of the originator. Must not contain spaces.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Origin.SessionId">
            <summary>
            Gets the unique identifier of the session.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Origin.SessionVersion">
            <summary>
            Gets the version number for the session description.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Origin.NetType">
            <summary>
            Gets the type of network.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ozeki.VoIP.Origin.AddressType">
            <summary>
            Gets the type of the uri address. Initially IPv4 or IPv6.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.Origin.Uri">
            <summary>
            Gets the address of the machine from which the session was created.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SRTPMode">
            <summary>
            An enum that represents the SRTP encryption mode for the calls
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPMode.None">
            <summary>
            No SRTP encryption is set
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPMode.Prefer">
            <summary>
            The SRTP encryption is preferably set
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPMode.Force">
            <summary>
            The SRTP encryption is forced to be set
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ChannelState">
            <summary>
            Specifies the current state of a media channel.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemoteAccepted">
            <summary>
            The other party accepted the offered channel.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemoteRejected">
            <summary>
            The other party rejected the offered channel.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemotePendingSendOnly">
            <summary>
            The other party accepted the offered channel, but only wants to send media.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemotePendingReceiveOnly">
            <summary>
            The other party accepted the offered channel, but only wants to receive media.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemoteOffer">
            <summary>
            The other party wants to communicate via that channel.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemoteOfferReceiveOnly">
            <summary>
            The other party wants to communicate, but wants to receive media only.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemoteHold">
            <summary>
            The other party put the call on hold.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemoteUnhold">
            <summary>
            The other party released the hold.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemoteCancelled">
            <summary>
            The other party cancelled an existing channel.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.RemoteModifiedReceiveOnly">
            <summary>
            The other party modified the communication mode of the channel. From now on he only wants to receive data via that channel.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.LocalAccepted">
            <summary>
            Channel accepted locally.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.LocalRejected">
            <summary>
            Channel rejected locally.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.LocalCancel">
            <summary>
            An existing channel has been cancelled locally.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.LocalHold">
            <summary>
            Put the call on hold locally.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.LocalUnhold">
            <summary>
            The call has been resumed locally.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ChannelState.Unknown">
            <summary>
            Unknown operation.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ChannelStateChange">
            <summary>
            Provides information about changes made on a media channel of a phone call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ChannelStateChange.#ctor(Ozeki.Media.MediaType,Ozeki.VoIP.ChannelState)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.ChannelStateChange"/> class.
            </summary>
            <param name="mediaType"></param>
            <param name="remoteOperation"></param>
        </member>
        <member name="P:Ozeki.VoIP.ChannelStateChange.MediaType">
            <summary>
            Gets the media type of the channel.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ChannelStateChange.State">
            <summary>
            Gets the new state of a media channel.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelConfig.PreferredPayloadTypes">
            <summary>
            Gets the preferred payload types defined by the user.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelConfig.DefaultPayloadTypes">
            <summary>
            Gets the payload types supported by the remote party.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelConfig.SelectedCodec">
            <summary>
            Gets or sets the currently selected codec.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelConfig.UseJitterBuffer">
            <summary>
            Gets or sets a boolean value indicating whether jitter buffer is used when sending audio data.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelConfig.SentVideoResolutionMode">
            <summary>
            Gets or sets a mode for determining the resolution for the sent video stream.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MediaChannelConfig.SentVideoResolution">
            <summary>
            Gets or sets a fixed resolution that will be used when sending video to the remote end if the <see cref="P:Ozeki.VoIP.MediaChannelConfig.SentVideoResolutionMode"/> is set to Fixed.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ChannelConfigEx">
            <summary>
            A channelconfig publikus, viszont kintrol jo lenne, ha ezeket nem hivhatnak meg.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ChannelConfigEx.Update(Ozeki.VoIP.MediaChannelConfig,Ozeki.VoIP.MediaChannelConfig)">
            <summary>
            User update
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MediaChannelPair">
            <summary>
            Hívás során előforduló média csatorna pár.
            </summary>
            <remarks>
            A hívás során a média csatornákat párosítva kezeljük. Ami jött a felajánlásban,
            ugyanazokat a csatornákat kell visszaküldeni. Tehát egy távoli csatornához
            egy lokális csatornát párosítunk.
            
            Eltároljuk az előző communication mode-ot a távoli és lokális csatornához is,
            mivel ha meg akarjuk nézni, mi változott az előző állapothoz képest, akkor
            azt is figyelembe kell venni.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannelPair.CheckForChannelUpdatesRemote">
            <summary>
            Másik fél küldte a media felajánlást, és megnézzük, változott-e valami
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MediaChannelPair.CheckForChannelUpdatesLocal">
            <summary>
            Mi küldtük a felajánlást, és megnézzük, változott-e valami
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Challenge">
            <summary>
            
            </summary>
            <grammar>
            challenge           =  ("Digest" lws digest-cln *(comma digest-cln))
                                   / other-challenge
            other-challenge     =  auth-scheme lws auth-param
                                  *(comma auth-param)
            auth-scheme       =  token                       
            auth-param        =  auth-param-name equal
                                 ( token / quoted-string )
            auth-param-name   =  token                      
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Credentials">
            <summary>
            
            </summary>
            <grammar>
            credentials       =  ("Digest" lws digest-response)
                                 / other-response
            digest-response   =  dig-resp *(comma dig-resp)
            auth-param        =  auth-param-name equal
                                 ( token / quoted-string )
            auth-param-name   =  token
            other-response    =  auth-scheme lws auth-param
                                 *(comma auth-param)
            auth-scheme       =  token
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.DigestElement">
             <summary>
             
             </summary>
             <grammar>
             dig-resp =  username / realm / nonce / digest-uri
                         / dresponse / algorithm / cnonce
                         / opaque / message-qop
                         / nonce-count / auth-param
             algorithm           =  "algorithm" equal ( "MD5" / "MD5-sess"
                                    / token )            
             username          =  "username" equal username-value
             username-value    =  quoted-string
             
             digest-uri        =  "uri" equal ldquot digest-uri-value rdquot
             digest-uri-value  =  rquest-uri 
             rquest-uri = "*" / absoluteuri 
             
             message-qop       =  "qop" equal qop-value
             qop-value           =  "auth" / "auth-int" / token
            
             cnonce            =  "cnonce" equal cnonce-value
             cnonce-value      =  nonce-value
             nonce-value       =  quoted-string
             
             nonce-count       =  "nc" equal nc-value
             nc-value          =  8lhex
             
             dresponse         =  "response" equal request-digest
             request-digest    =  ldquot 32lhex rdquot
             
             auth-param        =  auth-param-name equal
                                  ( token / quoted-string )
             auth-param-name   =  token
            
             auth-scheme       =  token
             realm               =  "realm" EQUAL realm-value
             realm-value         =  quoted-string
             </grammar>
        </member>
        <member name="T:Ozeki.VoIP.DigestMD5QopAuthIntScheme">
            <summary>
            Digest, qop=auth-int
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.DigestMD5QopAuthScheme">
            <summary>
            Digest, qop=auth
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.DigestMD5WithoutQopScheme">
            <summary>
            Digest, MD5
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallHelper.GetDialog(Ozeki.VoIP.IBaseSIPCall)">
            <summary>
            Gets the dialog that belongs to the specified call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallHelper.GetInitialInvite(Ozeki.VoIP.IBaseSIPCall)">
            <summary>
            Adott hivast kezdemenyezo INVITE request lekerese
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallHelper.GetFirstInvite(Ozeki.VoIP.TransactionID)">
            <summary>
            Adott hivast kezdemenyezo INVITE request lekerese
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallError">
            <summary>
            Defines errors for calls.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.NoError">
            <summary>
            No error occurred.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.NoResponse">
            <summary>
            No response received to a request (e.g. BYE) from the other party.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.SRTPError">
            <summary>
            Incorrect media protocol in SDP.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.ConnectionError">
            <summary>
            Connection lost with the remote address.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.ParseError">
            <summary>
            The user-agent could not parse the message.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.RequestFailure">
            <summary>
            Generic failure for a SIP request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.UnknownError">
            <summary>
            Unexpected error occurred.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.BadRequest">
            <summary>
            400 - The request could not be understood due to malformed syntax.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.Forbidden">
            <summary>
            403 - The server understood the request, but is refusing to fulfill it.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.NotFound">
            <summary>
            404 - The server has definitive information that the user does not exist at the domain specified in the Request-URI.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.RequestTimedOut">
            <summary>
            408 - The server could not produce a response within a suitable amount of time.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.Gone">
            <summary>
            410 - The requested resource is no longer available at the server and no forwarding address is known.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.UnsupportedMediaType">
            <summary>
            415 - The server is refusing to service the request because the message body of the request is in a format not supported by the server for the requested method.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.TemporarilyUnavailable">
            <summary>
            480 - The callee's end system was contacted successfully but the callee is currently unavailable.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.CallDoesNotExist">
            <summary>
            481 - This status indicates that the UAS received a request that does not match any existing dialog.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.AddressIncomplete">
            <summary>
            484 - The server received a request with a Request-URI that was incomplete.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.BusyHere">
            <summary>
            486 - The callee's end system was contacted successfully, but the callee is currently not willing or able to take additional calls at this end system.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.NotAcceptableHere">
            <summary>
            488 - The session description such as the bandwidth, addressing type or codecs were not acceptable.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.RequestPending">
            <summary>
            491 - There is a pending request within the same call.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.ServerInternalError">
            <summary>
            500 - The server encountered an unexpected condition that prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.NotImplemented">
            <summary>
            501 - The server does not support the functionality required to fulfill the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.BadGateway">
            <summary>
            502 - The server, while acting as a gateway or proxy, received an invalid response from the downstream server it accessed in attempting to fulfill the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.ServiceUnavailable">
            <summary>
            503 - The server is temporarily unable to process the request due to a temporary overloading or maintenance of the server.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.ServerTimeout">
            <summary>
            504 - The server did not receive a timely response from an external server it accessed in attempting to process the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.MessageTooLarge">
            <summary>
            513 - The server was unable to process the request since the message length exceeded its capabilities.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.BusyEverywhere">
            <summary>
            600 - The callee's end system was contacted successfully but the callee is busy and does not wish to take the call at this time.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.GlobalFailureDecline">
            <summary>
            603 - The callee's machine was successfully contacted but the user explicitly does not wish to or cannot participate.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.DoesNotExistAnywhere">
            <summary>
            604 - The server has authoritative information that the user does not exist anywhere.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.GlobalFailureNotAcceptable">
            <summary>
            606 - The session description such as the bandwidth, addressing type or codecs were not acceptable.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallError.GlobalFailure">
            <summary>
            699 - The server has definitive information about a particular user, not just the particular instance.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallExtensionHeaders">
            <summary>
            Contains information of the extension headers an of an INVITE request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallExtensionHeaders.PAssertedIdentity">
            <summary>
            Gets the value of the P-Asserted-Identity header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallExtensionHeaders.PPreferredIdentity">
            <summary>
            Gets the value of the P-Preferred-Identity header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallExtensionHeaders.CallingRemotePartyID">
            <summary>
            Gets the value of the Remote-Party-ID header that contains the "calling" party parameter.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallExtensionHeaders.CalledRemotePartyID">
            <summary>
            Gets the value of the Remote-Party-ID header that contains the "called" party parameter.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallExtensionHeaders.Replaces">
            <summary>
            Gets the value of the Replaces header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallExtensionHeaders.ReferredBy">
            <summary>
            Gets the value of the Referred-By header.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallOptionalHeaders">
            <summary>
            Contains the values of the optional SIP headers of an INVITE request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallOptionalHeaders.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Ozeki.VoIP.CallOptionalHeaders"/> class.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallOptionalHeaders.AllowedMethods">
            <summary>
            Gets the methods allowed by the call party.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallOptionalHeaders.UserAgent">
            <summary>
            Gets the user-agent of the call party.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallOptionalHeaders.Warning">
            <summary>
            Gets the value of the Warning header. (usually present when the other party was busy)
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallOptionalHeaders.RedirectionInfo">
            <summary>
            Gets information about the redirection.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallOptionalHeaders.OptionalHeaderValues">
            <summary>
            Gets additional headers defined by the user.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallOptionalHeaders.CustomHeaders">
            <summary>
            Gets additional headers defined by the user.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallProperty">
            <summary>
            Defines call properties for SIP header modification.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallProperty.CustomValue">
            <summary>
            Value defined by user.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallProperty.CallerID">
            <summary>
            The ID of the caller.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallProperty.CallerDisplayName">
            <summary>
            The display name of the caller.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallProperty.CallerHostPort">
            <summary>
            The hostport part of the caller.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallProperty.CalledNumber">
            <summary>
            The dialed number.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallProperty.CalledDisplayName">
            <summary>
            The display name for the dialed number.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.CallProperty.CalledHostPort">
            <summary>
            The hostport part of the dialed number.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.DialInfo">
            <summary>
            Contains dial information of a call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.#ctor">
            <summary>
            Constructor for cloning.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DialInfo"/> class.
            </summary>
            <param name="dialed">The dialed number or dialed user ID.</param>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.#ctor(Ozeki.VoIP.SIPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DialInfo"/> class.
            </summary>
            <param name="dialed">The dialed number or dialed user ID.</param>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DialInfo"/> class.
            </summary>
            <param name="dialed">The dialed number or dialed user ID.</param>
            <param name="callerID">The ID of the caller.</param>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.#ctor(System.String,Ozeki.VoIP.SIPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DialInfo"/> class.
            </summary>
            <param name="dialed">The dialed number or dialed user ID.</param>
            <param name="callerID">The SIP address of the caller.</param>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.#ctor(Ozeki.VoIP.SIPAddress,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DialInfo"/> class.
            </summary>
            <param name="dialed">The SIP address of the dialed number or user.</param>
            <param name="callerID">The ID of the caller.</param>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.#ctor(Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DialInfo"/> class.
            </summary>
            <param name="dialed">The SIP address of the dialed number or user.</param>
            <param name="callerID">The SIP address of the caller.</param>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.#ctor(System.String,System.String,System.String,Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress)">
            <summary>
            For internal use only!
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.SetDefaults(Ozeki.VoIP.SIPAddress)">
            <summary>
            Updates the null values using the given SIP identity address.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialInfo.Clone">
            <summary>
            Creates a deep copy of the instance.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialInfo.DialedString">
            <summary>
            Gets the string the user dialed.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialInfo.CallerDisplay">
            <summary>
            Gets or sets the display name of the caller.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialInfo.CallerID">
            <summary>
            Gets the ID of the caller.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialInfo.Dialed">
            <summary>
            Gets the dialed number or dialed user ID.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialInfo.SIPCallerID">
            <summary>
            Gets the full SIP address of the caller.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.DialInfo.SIPDialed">
            <summary>
            Gets the full SIP address of the dialed number.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ExDialInfo">
            <summary>
            Contains extension methods for the <see cref="T:Ozeki.VoIP.DialInfo"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ExDialInfo.Create(System.String,Ozeki.VoIP.SIPAddress)">
            <summary>
            Creates a new <see cref="T:Ozeki.VoIP.DialInfo"/>. If the SIP address is not null, use that; Otherwise use the string parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.InviteHeaders">
            <summary>
            Contains the values of the SIP INVITE headers.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteHeaders.RequestURI">
            <summary>
            Gets the value of the Request-URI header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteHeaders.From">
            <summary>
            Gets the value of the From header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteHeaders.To">
            <summary>
            Gets the value of the To header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteHeaders.Contact">
            <summary>
            Gets the value of the Contact header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteHeaders.CSeq">
            <summary>
            Gets the numeric value of the CSeq header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteHeaders.CallID">
            <summary>
            Gets the value of the Call-ID header.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteHeaders.MediaDescription">
            <summary>
            Gets the SDP body of the INVITE.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteHeaders.OptionalHeaders">
            <summary>
            Gets the optional headers of the request (eg. User-Agent, Allow).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteHeaders.ExtensionHeaders">
            <summary>
            Gets extension headers defined in other SIP RFCs (eg. P-Asserted-Identity).
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RedirectionInfo">
            <summary>
            Provides data for SIP call redirection.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RedirectionInfo.#ctor(Ozeki.VoIP.RedirectionType,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.RedirectionInfo"/> class.
            </summary>
            <param name="type">The type of the redirection.</param>
            <param name="target">The target the call will be redirected.</param>
        </member>
        <member name="M:Ozeki.VoIP.RedirectionInfo.#ctor(Ozeki.VoIP.RedirectionType,Ozeki.VoIP.SIPAddress)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.RedirectionInfo"/> class.
            </summary>
            <param name="type">The type of the redirection.</param>
            <param name="target">The target the call will be redirected.</param>
        </member>
        <member name="P:Ozeki.VoIP.RedirectionInfo.Type">
            <summary>
            Gets the type of the redirection.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RedirectionInfo.TargetSIPAddress">
            <summary>
            Gets the SIP address of the target.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RedirectionInfo.Target">
            <summary>
            Gets the number of the target.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RedirectionType.MovedPermanently">
            <summary>
            301 Moved Permanently
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RedirectionType.MovedTemporarily">
            <summary>
            302 Moved Temporarily
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RedirectionType.UseProxy">
            <summary>
            305 Use Proxy
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPCallBasicInfo">
            <summary>
            Altalanos informaciok a call-rol.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPCallBasicInfo.CallID">
            <summary>
            Gets the unique identifier of the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPCallBasicInfo.IsIncoming">
            <summary>
            Gets a boolean value indicating whether the call is an incoming call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPCallBasicInfo.TransportInfo">
            <summary>
            Gets the information about the transport used when sending and receiving SIP messages.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPCallBasicInfo.Owner">
            <summary>
            Gets the owner user-agent instance of SIP call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPCallBasicInfo.SIPNatConfig">
            <summary>
            Gets or sets the NAT configuration for the call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPCallBasicInfo.Replaces">
            <summary>
            Gets or sets the dialog ID that the call will replace.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPCallBasicInfo.Dialog">
            <summary>
            Gets or sets the dialog.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallHeaderMappingResult">
            <summary>
            Provides data for the result of the SIP header mapper.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallHeaderMappingResult.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.CallHeaderMappingResult"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.CallHeaderMappingResult.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.CallHeaderMappingResult"/> class.
            </summary>
            <param name="value">The modified value.</param>
        </member>
        <member name="P:Ozeki.VoIP.CallHeaderMappingResult.Value">
            <summary>
            Gets or sets the modified value.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.CallHeaderMappingResult.Modified">
            <summary>
            Gets or sets a boolean value indicating whether the header was modified.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InboundCallHeaderMapper">
            <summary>
            A SIP header-oket hivas parametereihez koti bejovo request eseten.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InboundCallHeaderMapper.GetCallerID(Ozeki.VoIP.InviteHeaders)">
            <summary>
            Caller ID
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InboundCallHeaderMapper.GetDialedNumber(Ozeki.VoIP.InviteHeaders)">
            <summary>
            Dialed number
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InboundCallHeaderMapper.GetInboundSIPMappingFieldValue(Ozeki.VoIP.InviteHeaders,Ozeki.VoIP.CallProperty,System.Boolean@)">
            <summary>
            Lekeri a megadott CallProperty-hez megadott SIP header fieldet (pl. CallerID -> From_User)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InboundCallHeaderMapping">
            <summary>
            Contains SIP header mappings for inbound SIP messages.
            </summary>
            <remarks>
            The property of the call will be determined by a SIP header mapping. When a SIP message received
            the <see cref="T:Ozeki.VoIP.InboundCallHeaderMapping"/> will takes place and bind the property of the call (such as Caller ID)
            to one of the SIP header fields.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.InboundCallHeaderMapping.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.InboundCallHeaderMapping"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InboundCallHeaderMapping.AddMapping(Ozeki.VoIP.SIPHeaderMapping)">
            <summary>
            Adds a SIP header mapping to the collection.
            </summary>
            <param name="mapping">The header mapping.</param>
            <returns>True, if successfully added; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.InboundCallHeaderMapping.AddOrUpdateMapping(Ozeki.VoIP.SIPHeaderMapping)">
            <summary>
            Adds a SIP header mapping to the collection or updates the existing mapping according to the call property.
            </summary>
            <param name="mapping">The header mapping.</param>
            <returns>True, if successfully added; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.InboundCallHeaderMapping.RemoveMapping(Ozeki.VoIP.SIPHeaderMapping)">
            <summary>
            Removes a SIP header mapping from the collection.
            </summary>
            <param name="mapping">The mapping that will be removed.</param>
            <returns>True, if successfully removed; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.InboundCallHeaderMapping.GetMapping(Ozeki.VoIP.CallProperty)">
            <summary>
            Retrieves a SIP header mapping for the given call property from the collection.
            </summary>
            <param name="callProperty">The call property.</param>
            <returns>The SIP header mapping.</returns>
        </member>
        <member name="M:Ozeki.VoIP.InboundCallHeaderMapping.Clone">
            <summary>
            Creates a deep copy from the mapping collection.
            </summary>
            <returns>The cloned mapping collection.</returns>
        </member>
        <member name="T:Ozeki.VoIP.IOutboundCallHeaderMapping">
            <summary>
            Interface for outbound call header mapping.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.OutboundCallHeaderMapper">
            <summary>
            A hivas parametereit SIP header-hoz koti kikuldott request eseten.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapper.GetRequestURIMappingValue(Ozeki.VoIP.InviteArgs,Ozeki.VoIP.SIPAddress)">
            <summary>
            Request-URI
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapper.GetFromMappingValue(Ozeki.VoIP.InviteArgs)">
            <summary>
            From
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapper.GetToMappingValue(Ozeki.VoIP.InviteArgs)">
            <summary>
            To
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapper.GetPAIMappingValue(Ozeki.VoIP.InviteArgs)">
            <summary>
            P-Asserted-Identity
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapper.GetRemotePartyIDCallingValue(Ozeki.VoIP.InviteArgs)">
            <summary>
            Remote-Party-ID, party=calling
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapper.GetRemotePartyIDCalledValue(Ozeki.VoIP.InviteArgs)">
            <summary>
            Remote-Party-ID, party=called
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapper.GetModifiedSIPAddress(Ozeki.VoIP.InviteArgs,Ozeki.VoIP.OutboundMappingParams)">
            <summary>
            Egy SIPAddress strukturan belul csereli le az ertekeket, a mappingben beallitott ertekekre, valamit a default erteket figyelembe veve.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapper.GetOutboundSIPMappingFieldValue(Ozeki.VoIP.InviteArgs,Ozeki.VoIP.SIPMappingField,System.Boolean@)">
            <summary>
            Lekeri a megadott SIP field-hez a hozzarendelt erteket (pl. From_User -> CallerID)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapper.GetSIPMappingFieldDefaultValue(Ozeki.VoIP.InviteArgs,Ozeki.VoIP.SIPMappingField,Ozeki.VoIP.OutboundMappingParams)">
            <summary>
            Lekeri egy SIP field-hez a default call property erteket.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.OutboundCallHeaderMapping">
            <summary>
            Contains SIP header mappings for outbound SIP messages.
            </summary>
            <remarks>
            When sending a SIP message, the property of the call (such as caller ID) can be bound to a SIP message header.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapping.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.OutboundCallHeaderMapping"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapping.AddMapping(Ozeki.VoIP.SIPHeaderMapping)">
            <summary>
            Adds a SIP header mapping to the collection.
            </summary>
            <param name="mapping">The header mapping.</param>
            <returns>True, if successfully added; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapping.AddOrUpdateMapping(Ozeki.VoIP.SIPHeaderMapping)">
            <summary>
            Adds a SIP header mapping to the collection or updates the existing mapping according to the call property.
            </summary>
            <param name="mapping">The header mapping.</param>
            <returns>True, if successfully added; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapping.RemoveMapping(Ozeki.VoIP.SIPHeaderMapping)">
            <summary>
            Removes a SIP header mapping from the collection.
            </summary>
            <param name="mapping">The mapping that will be removed.</param>
            <returns>True, if successfully removed; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapping.GetMapping(Ozeki.VoIP.SIPMappingField)">
            <summary>
            Retrieves a SIP header mapping for the given SIP field from the collection.
            </summary>
            <param name="sipField">The call property.</param>
            <returns>The SIP header mapping.</returns>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapping.Clone">
            <summary>
            Creates a deep copy from the mapping collection.
            </summary>
            <returns>The cloned mapping collection.</returns>
        </member>
        <member name="M:Ozeki.VoIP.OutboundCallHeaderMapping.GetValue(Ozeki.VoIP.SIPMappingField,Ozeki.VoIP.InviteArgs)">
            <summary>
            Retrieves the value of the SIP mapping field from the given INVITE parameters.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPHeaderMapping">
            <summary>
            Provides data for pairing a SIP header field (eg. From.UserName) with a call property (eg. CallerID).
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPHeaderMapping.#ctor(Ozeki.VoIP.SIPMappingField,Ozeki.VoIP.CallProperty)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.SIPHeaderMapping"/> class.
            </summary>
            <param name="sipField">The SIP field (eg. From..</param>
            <param name="callVariable">The call property.</param>
        </member>
        <member name="M:Ozeki.VoIP.SIPHeaderMapping.#ctor(Ozeki.VoIP.SIPMappingField,Ozeki.VoIP.CallProperty,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.SIPHeaderMapping"/> class.
            </summary>
            <param name="sipField">The SIP field.</param>
            <param name="callVariable">The call property.</param>
            <param name="customValue">The custom value.</param>
        </member>
        <member name="P:Ozeki.VoIP.SIPHeaderMapping.SIPField">
            <summary>
            Gets the SIP header field.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPHeaderMapping.CallProperty">
            <summary>
            Gets the call property.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPHeaderMapping.CustomValue">
            <summary>
            Gets or sets the custom value for the SIP header or call property (depends on incoming or outgoing mapping).
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPMappingField">
            <summary>
            Defines SIP header fields for mapping SIP header with a call property.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.RequestUri_User">
            <summary>
            The user part of the Request-URI header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.RequestUri_Host">
            <summary>
            The host part of the Request-URI header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.Contact_User">
            <summary>
            The user part of the Contact header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.Contact_Host">
            <summary>
            The host part of the Contact header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.To_DisplayName">
            <summary>
            The display name part of the To header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.To_User">
            <summary>
            The user part of the To header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.To_Host">
            <summary>
            The host part of the To header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.From_DisplayName">
            <summary>
            The display name part of the From header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.From_User">
            <summary>
            The user part of the From header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.From_Host">
            <summary>
            The host part of the From header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.RemotePartyID_CalledParty_DisplayName">
            <summary>
            The display name part of the Remote-Party-ID header with 'party=called' parameter.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.RemotePartyID_CalledParty_User">
            <summary>
            The user part of the Remote-Party-ID header with 'party=called' parameter.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.RemotePartyID_CalledParty_Host">
            <summary>
            The host part of the Remote-Party-ID header with 'party=called' parameter.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.RemotePartyID_CallingParty_DisplayName">
            <summary>
            The display name part of the Remote-Party-ID header with 'party=calling' parameter.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.RemotePartyID_CallingParty_User">
            <summary>
            The user part of the Remote-Party-ID header with 'party=calling' parameter.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.RemotePartyID_CallingParty_Host">
            <summary>
            The host part of the Remote-Party-ID header with 'party=calling' parameter.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.PAssertedIdentity_DisplayName">
            <summary>
            The display name part of the P-Asserted-Identity header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.PAssertedIdentity_User">
            <summary>
            The user part of the P-Asserted-Identity header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.PAssertedIdentity_Host">
            <summary>
            The host part of the P-Asserted-Identity header.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPMappingField.UserAgent">
            <summary>
            The value of the User-Agent header.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISIPClientFactory.Create(Ozeki.VoIP.PhoneLineConfiguration)">
            <summary>
            Creates a SIP client that can register to a PBX.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.KeepAliveMode">
            <summary>
            Specifies methods for keep-alive SIP ports.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.KeepAliveMode.NONE">
            <summary>
            Keep-alive turned off.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.KeepAliveMode.REGISTER">
            <summary>
            Using REGISTER requests for keep-alive.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.KeepAliveMode.OPTIONS">
            <summary>
            Using OPTIONS request for keep-alive.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RegError">
            <summary>
            Contains error definition for a SIP registration process.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegError.NoError">
            <summary>
            No error occurred.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegError.ConnectionError">
            <summary>
            Could not connect to remote host or the local transport could not be created.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegError.InvalidExpires">
            <summary>
            Invalid Expires value received in REGISTER response.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegError.InvalidMinExpires">
            <summary>
            Invalid Min-Expires value received in REGISTER response.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegError.RequestTimedOut">
            <summary>
            REGISTER request timed out.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegError.TransportError">
            <summary>
            The transport object has been closed.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegError.MaxRegAttemptsReached">
            <summary>
            Maximum number of REGISTER requests reached.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegError.RequestFailure">
            <summary>
            Failure response received to the REGISTER request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegError.IntervalTooBrief">
            <summary>
            The expiration time of SIP client the is too small.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RegInfo">
            <summary>
            Contains information about the registration of a SIP account.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RegInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.RegInfo"/> class.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.DefaultExpirationTime">
            <summary>
            Gets the desired expiration time of the SIP account on the PBX (in seconds).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.Expires">
            <summary>
            Gets the actual expiration time of the SIP account on the PBX (in seconds).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.ServerMinExpires">
            <summary>
            Gets the minimum time of the SIP account can be registered on the PBX (in seconds).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.RegisterInstanceID">
            <summary>
            Gets the register instance ID of the SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.LastRegisterDate">
            <summary>
            Gets the last date when the client sent REGISTER request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.State">
            <summary>
            Gets the registration state of the SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.Error">
            <summary>
            Gets the specific error when the registration of a SIP client failed.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.StatusCode">
            <summary>
            Gets the status code sent by the PBX for the REGISTER request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.ReasonPhrase">
            <summary>
            Gets the reason phrase sent bye the PBX for the REGISTER request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.UserAgentName">
            <summary>
            Gets the User-Agent of the PBX.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.UserAgentVersion">
            <summary>
            Gets the User-Agent version of the PBX.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.Contacts">
            <summary>
            Gets the addresses registered with this SIP account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.RegistrationRequired">
            <summary>
            Gets or sets a boolean value indicating whether the extension need to register to the PBX.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.IsRegistered">
            <summary>
            Gets a boolean value indicating whether the extension is registered to the PBX.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegInfo.RemainingExpires">
            <summary>
            Gets the remaining time (in seconds) after the registration of the SIP extension will be expired.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegisterContext.PublicInfo">
            <summary>
            Ezeket az infokat vezetjuk ki az API-ra.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegisterStatus.OK">
            <summary>
            200 User OK
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegisterStatus.Forbidden">
            <summary>
            403 Forbidden
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegisterStatus.NotFound">
            <summary>
            404 User Not Found 
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegisterStatus.IntervalTooBrief">
            <summary>
            423 Interval Too Brief, Expires too short
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegisterStatus.ServerInternalError">
            <summary>
            500 Server Internal Error
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegisterStatus.ServiceUnavailable">
            <summary>
            503 Service Unavailable
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RegistrationStateChangedArgs">
            <summary>
            Provides data for call state changed event.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RegistrationStateChangedArgs.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.RegistrationStateChangedArgs"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RegistrationStateChangedArgs.#ctor(Ozeki.VoIP.RegState,Ozeki.VoIP.RegState,System.Int32,System.String,Ozeki.VoIP.RegError)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.RegistrationStateChangedArgs"/> class.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegistrationStateChangedArgs.StatusCode">
            <summary>
            Gets the status code of the SIP response received for the last REGISTER request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegistrationStateChangedArgs.ReasonPhrase">
            <summary>
            Gets the reason phrase of the SIP response received for the last REGISTER request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegistrationStateChangedArgs.PrevState">
            <summary>
            Gets the previous state of the registration.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegistrationStateChangedArgs.State">
            <summary>
            Gets the current state of the registration.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.RegistrationStateChangedArgs.Error">
            <summary>
            Gets the error of the registration.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RegState">
            <summary>
            Defines states for a SIP registration process.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegState.NotRegistered">
            <summary>
            The SIP client is not registered
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegState.RegistrationRequested">
            <summary>
            The SIP client sent REGISTER request and no answer received yet.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegState.RegistrationSucceeded">
            <summary>
            The SIP client is registered.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegState.UnregRequested">
            <summary>
            The SIP client sent a REGISTER request with 0 Expires and no answer received yet.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.RegState.Error">
            <summary>
            An error occurred during the registration process
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPAccount">
            <summary>
            Represents a SIP user account.
            </summary>
            <remarks>
            This class stores the necessary user data for the registration to a SIP Registrar Proxy server.
            These data are: user name, registration name, registration password (see RFC 5322),
            SIP server IP address and port.
            This class also handles the case when you want to communicate with directly with a sIP
            tool. In this case the RequestrationRequired property needs to be set to false. In this case the class specifies a communication channel.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.SIPAccount.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates SIP Account information.
            </summary>
            <param name="registrationRequired">Registration required for this account.</param>
            <param name="displayName">Display name for the account.</param>
            <param name="userName">The username for the SIP account.</param>
            <param name="registerName">The authorization name for the SIP account.</param>
            <param name="registerPassword">The password for the SIP account.</param>
            <param name="domain">The domain host for SIP registration.</param>
            <param name="outboundProxy">The outbound domain proxy for SIP registration.</param>
        </member>
        <member name="M:Ozeki.VoIP.SIPAccount.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates SIP Account information.
            </summary>
            <param name="registrationRequired">Registration required for this account.</param>
            <param name="displayName">Display name for the account.</param>
            <param name="userName">The username for the SIP account.</param>
            <param name="registerName">The authorization name for the SIP account.</param>
            <param name="registerPassword">The password for the SIP account.</param>
            <param name="domainHost">The domain host for SIP registration.</param>
            <param name="domainPort">The domain host for SIP registration.</param>
        </member>
        <member name="M:Ozeki.VoIP.SIPAccount.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates SIP Account information.
            </summary>
            <param name="registrationRequired">Registration required for this account.</param>
            <param name="displayName">Display name for the account.</param>
            <param name="userName">The username for the SIP account.</param>
            <param name="registerName">The authorization name for the SIP account.</param>
            <param name="registerPassword">The password for the SIP account.</param>
            <param name="domain">The domain host for SIP registration.</param>
        </member>
        <member name="M:Ozeki.VoIP.SIPAccount.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates SIP Account information.
            </summary>
            <param name="registrationRequired">Registration required for this account.</param>
            <param name="displayName">Display name for the account.</param>
            <param name="userName">The username for the SIP account.</param>
            <param name="registerName">The authorization name for the SIP account.</param>
            <param name="registerPassword">The password for the SIP account.</param>
            <param name="domainServerHost">The domain host for SIP registration.</param>
            <param name="domainServerPort">The domain port for SIP registration.</param>
            <param name="proxy">The outbound domain proxy for SIP registration.</param>
        </member>
        <member name="M:Ozeki.VoIP.SIPAccount.Equals(System.Object)">
            <summary>
            Compares two SIP accounts
            </summary>
            <param name="obj">The other SIP account</param>
            <returns>Returns true if the two SIP accounts are the same, otherwise returns false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.SIPAccount.GetHashCode">
            <summary>
            Returns the hash code of the SIP account
            </summary>
            <returns>The hash code of the SIP account</returns>
        </member>
        <member name="P:Ozeki.VoIP.SIPAccount.RegistrationRequired">
            <summary>
            Gets a boolean value indicating whether the SIP account needs to be registered on the remote host.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAccount.DisplayName">
            <summary>
            Gets the display name of the SIP account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAccount.UserName">
            <summary>
            Gets the user ID of the SIP account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAccount.RegisterName">
            <summary>
            Gets the authorization name for SIP account authentication.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAccount.RegisterPassword">
            <summary>
            Gets the password for SIP account authentication.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAccount.DomainServerHost">
            <summary>
            Gets the host part of the domain for the SIP account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAccount.DomainServerPort">
            <summary>
            Gets the port part of the domain for the SIP account.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAccount.OutboundProxy">
            <summary>
            Gets the outbound address where the SIP messages will be sent.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPAccountRequestLineEx">
            <summary>
            Contains extension methods for <see cref="T:Ozeki.VoIP.SIPAccount"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPAccountRequestLineEx.GetSIPHostPort(Ozeki.VoIP.SIPAccount,Ozeki.Network.TransportType)">
            <summary>
            Example: 192.168.115.100, 192.168.115.100:5062
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPClientID.TransportInfo">
            <summary>
            Az a transport, amin kommunikalunk a klienssel. Nem eleg csak ez alapjan azonositani, mert lehet, hogy ugyanarrol a tavoli cimrol
            tobb kliens kapcsolodik (pl. egy masik PBX tobb extension-nel regisztralt be az 5060 porton)
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPClientID.Identity">
            <summary>
            Kliens eseten a Contact address, szerver eseten a From.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPClientID.AuthName">
            <summary>
            PBX eseten van csak jelentosege.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPClientNetworkInfo">
            <summary>
            Contains network information for a SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPClientNetworkInfo.LocalAddress">
            <summary>
            Gets the local address of the SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPClientNetworkInfo.TransportType">
            <summary>
            Gets the protocol used for SIP communication.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPClientNetworkInfo.PublicEndPoint">
            <summary>
            Gets the public endpoint for the local address.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPUAInstanceInfo">
            <summary>
            Contains basic information about a SIP client instance such as identity, contact or transport.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPUserAgentDetails">
            <summary>
            Contains basic information about a SIP user-agent endpoint such as contact, allowed methods or the name of the user-agent.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPUserAgentDetails.Update(Ozeki.VoIP.OptionsResult)">
            <summary>
            Updates the properties with the values from an OPTIONS message.
            </summary>
            <param name="optionsResult">The SIP headers from the OPTIONS message.</param>
        </member>
        <member name="P:Ozeki.VoIP.SIPUserAgentDetails.Contact">
            <summary>
            Gets the contact address of the SIP client.
            </summary>
            <remarks>
            Optional property. Always have value on the client side, but not always present at server side.
            For example, a SIP user-agent did not register to the Ozeki PBX, but sends a MESSAGE request without Contact header.
            </remarks>
        </member>
        <member name="P:Ozeki.VoIP.SIPUserAgentDetails.AllowedMethods">
            <summary>
            Gets the methods supported by the user-agent of the registered extension. If the list is empty, no Allow header sent by the UA and all methods are allowed.
            </summary>
            <remarks>Optional property. It has value when Allow header is present in one of the SIP messages sent by the user-agent.</remarks>
        </member>
        <member name="P:Ozeki.VoIP.SIPUserAgentDetails.UserAgent">
            <summary>
            Gets the user agent name sent by the client. It may be null if the client did not send it.
            </summary>
            <remarks>Optional property. It has value when User-Agent header is present in one of the SIP messages sent by the user-agent.</remarks>
        </member>
        <member name="P:Ozeki.VoIP.SIPUAInstanceInfo.Identity">
            <summary>
            Gets the identity of the SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPUAInstanceInfo.Transport">
            <summary>
            Gets the transport info of the SIP client.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPUAInstanceInfo.ClientID">
            <summary>
            Gets the ID of the SIP client consists of TransportInfo and Contact address.
            </summary>
            <remarks>Optional property. It has value only when transport is created and the SIP user-agent has contact address.</remarks>
        </member>
        <member name="P:Ozeki.VoIP.SIPUAInstanceInfo.IsActive">
            <summary>
            Gets a boolean value indicating whether the transport is ready for sending and receiving SIP messages.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPUAInstanceInfo.RegInfo">
            <summary>
            Gets information about the registration of the SIP account.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISIPSubscription">
            <summary>
            Defines properties, methods and events for SIP event package subscriptions (such as message-summary).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPSubscription.ID">
            <summary>
            Gets the ID of the subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPSubscription.Account">
            <summary>
            Gets the SIP address for the subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPSubscription.EventType">
            <summary>
            Gets the event type of the subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPSubscription.Expires">
            <summary>
            Gets the time (in seconds) after the subscription will be terminated.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPSubscription.Owner">
            <summary>
            Gets the owner of the subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPSubscription.State">
            <summary>
            Gets the current state of the subscription.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ISIPSubscription.StateChanged">
            <summary>
            Occurs when the state of the subscription has changed.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ISIPSubscription.NotificationReceived">
            <summary>
            Occurs when a notification received from the remote end.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ExpiresManager">
            <summary>
            Handles the expiration of a SIP account.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.NoRegisterManager">
            <summary>
            Does not register to remote host.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RegisterManager">
            <summary>
            Manages the registration of a SIP account. Sends REGISTER requests to the remote party.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RegisterManager.SendRegisterRequest">
            <summary>
            Registers the SIP account.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RegisterManager.SendUnregisterRequest">
            <summary>
            Unregisters the SIP account.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISIPSubscriptionManager">
            <summary>
            Manages SIP event subscriptions.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISIPSubscriptionManager.Create(System.String)">
            <summary>
            Creates a SIP subscription with the given event type.
            </summary>
            <param name="eventType">The event-type (eg. message-summary or dialog).</param>
        </member>
        <member name="M:Ozeki.VoIP.ISIPSubscriptionManager.Create(Ozeki.VoIP.SIPEventType)">
            <summary>
            Creates a SIP subscription with the given event-type.
            </summary>
            <param name="eventType">The event-type</param>
        </member>
        <member name="M:Ozeki.VoIP.ISIPSubscriptionManager.Subscribe(Ozeki.VoIP.ISIPSubscription)">
            <summary>
            Sends a SUBSCRIBE request for the given subscription.
            </summary>
            <param name="subscription">The created subscription.</param>
        </member>
        <member name="M:Ozeki.VoIP.ISIPSubscriptionManager.Unsubscribe(Ozeki.VoIP.ISIPSubscription)">
            <summary>
            Terminates the given subscription.
            </summary>
            <param name="subscription">The created subscription.</param>
        </member>
        <member name="M:Ozeki.VoIP.ISIPSubscriptionManager.Get(Ozeki.VoIP.SIPEventType)">
            <summary>
            Retrieves a previously created subscription.
            </summary>
            <param name="eventType">The event-type of the subscription.</param>
            <returns>The subscription object.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISIPSubscriptionManager.Get(System.String)">
            <summary>
            Retrieves a previously created subscription.
            </summary>
            <param name="eventType">The event-type of the subscription.</param>
            <returns>The subscription object.</returns>
        </member>
        <member name="T:Ozeki.VoIP.TransportManager">
            <summary>
            Egy SIP clientnek manageli a transportjait.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ApplicationDtmfParser">
            <summary>
            Parses the SIP body as Content-Type: application/dtmf
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ApplicationDtmfRelayParser">
            <summary>
            Parses the SIP body as Content-Type: application/dtmf-relay
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MessageSipFragParser">
            <summary>
            Parses the SIP body as Content-Type: message/sipfrag
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.INotifier.IsAcceptableNewSubscription(Ozeki.VoIP.SubscriptionInfo)">
            <summary>
            Returns a boolean value indicating whether the user can subscribe to the specified subscription.
            </summary>
            <param name="subscriptionInfo">The received subscription.</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.INotifier.GetCurrentResourceState(Ozeki.VoIP.SubscriptionInfo)">
            <summary>
            Retreives the formatted body of the current state of the subscription.
            </summary>
            <param name="subscriptionInfo">The specified subscription.</param>
            <returns>The message body.</returns>
        </member>
        <member name="M:Ozeki.VoIP.INotifier.OnSubscriptionTerminated(Ozeki.VoIP.SubscriptionInfo)">
            <summary>
            Occurs when a subscription has been terminated.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.INotifier.EventType">
            <summary>
            Gets the event-type of the notifier.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.INotifier.ContentType">
            <summary>
            Gets the content-type of the body of the sent NOTIFY messages.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPEventNotificationArgs">
            <summary>
            Provides data for SIP event-package notification.
            </summary>
            <remarks>
            Provides data for NOTIFY requests sent to an event-package subscription.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.SIPEventNotificationArgs.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.SIPEventNotificationArgs"/> class.
            </summary>
            <param name="contentType"></param>
            <param name="body"></param>
        </member>
        <member name="P:Ozeki.VoIP.SIPEventNotificationArgs.Body">
            <summary>
            Gets the body of the notification.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPEventNotificationArgs.EventType">
            <summary>
            Gets the event-type of the notification (eg. message-summary).
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPEventNotificationArgs.Parameters">
            <summary>
            Gets the additional parameters received in the notification.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPEventNotificationArgs.ContentType">
            <summary>
            Gets the content-type of the body.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPEventNotificationArgs.MessageSummary">
            <summary>
            Gets the body of the notification parsed as message-summary. If the event-type is not "message-summary", the value is null.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPEventNotificationArgs.DialogEventInfo">
            <summary>
            Gets the body of the notification parsed as dialog-info. If the event-type is not "dialog", the value is null.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Subscription">
            <summary>
            Egy event-type-ra valo feliratkozast reprezentalja.
            Tartalmazza a subscriptiont azonosito adatokat (DialogID, EventID),
            kiertesit, ha NOTIFY erkezett.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SubscriptionInfo">
            <summary>
            Provides information about a subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionInfo.SubscriptionID">
            <summary>
            Gets the ID of the subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionInfo.Account">
            <summary>
            Gets the user for the subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionInfo.ContactAddress">
            <summary>
            Gets the contact address of the user.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionInfo.EventID">
            <summary>
            Gets the event ID of the subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionInfo.EventType">
            <summary>
            Gets the event-type of the subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionInfo.State">
            <summary>
            Gets the current state of the subscription.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionInfo.TerminationReason">
            <summary>
            Gets the reason parameter of the subscription termination.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionInfo.Expires">
            <summary>
            Gets the expires interval of the subscription.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SubscriptionState">
            <summary>
            Defines states for a SIP event package subscription.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubscriptionState.Initialized">
            <summary>
            The subscription object has been initialized, but no SUBSCRIBE request has been sent yet.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubscriptionState.Neutral">
            <summary>
            Until the first NOTIFY message arrives, the subscriber should consider the state of the subscribed resource to be in a neutral state.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubscriptionState.Active">
            <summary>
            The subscription has been accepted and authorized.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubscriptionState.BadEvent">
            <summary>
            The event-type is not supported.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubscriptionState.Expired">
            <summary>
            The subscription has not been refreshed and it has been expired.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubscriptionState.Terminated">
            <summary>
            The subscription is no longer active.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SubscriptionState.Pending">
            <summary>
            The subscription has been received, but that policy information is insufficient to accept or deny the subscription at this time.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SubscriptionStateEx">
            <summary>
            Defines extension methods for the <see cref="T:Ozeki.VoIP.SubscriptionState"/> enum.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SubscriptionStateEx.IsActive(Ozeki.VoIP.SubscriptionState)">
            <summary>
            Returns a boolean value indicating whether the subscription is in active state (neutral, active, etc.) and notifications can be received.
            </summary>
            <param name="state">The subscription state.</param>
            <returns>True, if the subscription is active; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.SubscriptionStateEx.IsTerminated(Ozeki.VoIP.SubscriptionState)">
            <summary>
            Returns a boolean value indicating whether the subscription is no longer active for some reason (terminated, expired, bad event, etc.)
            </summary>
            <param name="state">The subscription state.</param>
            <returns>True, if the subscription is terminated; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.SubscriptionStateEx.AsString(Ozeki.VoIP.SubscriptionState)">
            <summary>
            Returns the textual representation of the given subscription state.
            </summary>
            <param name="state">The subscription state.</param>
            <returns>The string form of the state.</returns>
        </member>
        <member name="T:Ozeki.VoIP.SubscriptionStateChangeEventArgs">
            <summary>
            Provides data for subscription state changed event.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SubscriptionStateChangeEventArgs.#ctor(Ozeki.VoIP.SubscriptionState,System.Nullable{Ozeki.VoIP.TerminationReason})">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.SubscriptionStateChangeEventArgs"/> class.
            </summary>
            <param name="eventState">The new state.</param>
            <param name="terminationReason">If the new state is terminated, the reason of the termination.</param>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionStateChangeEventArgs.EventState">
            <summary>
            Gets the new state.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SubscriptionStateChangeEventArgs.TerminationReason">
            <summary>
            Gets the reason of the termination when the state is Terminated.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TerminationReason.Deactivated">
            <summary>
            The subscription has been terminated, but the subscriber
            SHOULD retry immediately with a new subscription.  One primary use
            of such a status code is to allow migration of subscriptions
            between nodes.  The "retry-after" parameter has no semantics for
            "deactivated".
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TerminationReason.Probation">
            <summary>
            The subscription has been terminated, but the client
            SHOULD retry at some later time.  If a "retry-after" parameter is
            also present, the client SHOULD wait at least the number of
            seconds specified by that parameter before attempting to re-
            subscribe
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TerminationReason.Rejected">
            <summary>
            The subscription has been terminated due to change in
            authorization policy.  Clients SHOULD NOT attempt to re-subscribe.
            The "retry-after" parameter has no semantics for "rejected".
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TerminationReason.Timeout">
            <summary>
            The subscription has been terminated because it was not
            refreshed before it expired.  Clients MAY re-subscribe
            immediately.  The "retry-after" parameter has no semantics for "timeout".
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TerminationReason.GiveUp">
            <summary>
            The subscription has been terminated because the notifier
            could not obtain authorization in a timely fashion.  If a "retry-after" 
            parameter is also present, the client SHOULD wait at least
            the number of seconds specified by that parameter before
            attempting to re-subscribe; otherwise, the client MAY retry
            immediately, but will likely get put back into pending state.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TerminationReason.NoResource">
            <summary>
            The subscription has been terminated because the resource
            state which was being monitored no longer exists.  Clients SHOULD
            NOT attempt to re-subscribe.  The "retry-after" parameter has no
            semantics for "noresource".
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.GenericParam">
            <summary>
            
            </summary>
            <grammar>
            generic-param  =  token [ equal gen-value ]
            gen-value      =  token / host / quoted-string
            </grammar>
        </member>
        <member name="P:Ozeki.VoIP.GenericParam.Name">
            <summary>
            A paraméter álltalános neve.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.GenericParam.Value">
            <summary>
            A paraméter értéke.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Header">
            <summary>
            SIP Header absztrakció.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AllowEvents.SIPStringPart">
            <summary>
            Allow-Events =  ( "Allow-Events" / "u" ) HCOLON event-type *(COMMA event-type)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SubscriptionStateHeader.SIPStringPart">
            <summary>
            Subscription-State = "Subscription-State" HCOLON substate-value *( SEMI subexp-params )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.CommonSIPParserExtension.ParseExtensionMethod">
            <summary>
            Esetleges Extension Method-ok parse-olását végzi.
            </summary>
            <returns>Method objektummal tér vissza ha megtalált egy extension method-ot, egyébként null.</returns>
        </member>
        <member name="M:Ozeki.VoIP.CommonSIPParserExtension.ParseHeader(System.String)">
            <summary>
            Az RFC által megadott extension header-ök parseolása.
            </summary>
            <param name="headerName">Extension Header neve amit megtalált az alap parser.</param>
            <returns>A parse-olt extension header, vagy null ha valamilyen hiba lép fel a parse-olás folyamán.</returns>
        </member>
        <member name="P:Ozeki.VoIP.SIPParserExtension.RFCNumber">
            <summary>
            Gets the RFC number of the extension.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPParserExtension.GetRFCDependencies">
            <summary>
            Get RFC references 
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3265ParserExtension.PSubscriptionState">
            <summary>
            Subscription-State   = "Subscription-State" HCOLON substate-value *( SEMI subexp-params )
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3265ParserExtension.PAllowEvents">
            <summary>
            Allow-Events = ( "Allow-Events" / "u" ) HCOLON event-type *(COMMA event-type)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3265ParserExtension.PEvent">
            <summary>
            Event  =  ( "Event" / "o" ) HCOLON event-type *( SEMI event-param )
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3265ParserExtension.PEventType">
            <summary>
            event-type =  event-package *( "." event-template )
            event-package     =  token-nodot
            event-template    =  token-nodot
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3265ParserExtension.PEventParam">
            <summary>
            event-param =  generic-param / ( "id" EQUAL token )
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3265ParserExtension.PTokenNoDot">
            <summary>
            token-nodot = 1*( alphanum / "-"  / "!" / "%" / "*" / "_" / "+" / "`" / "'" / "~" )
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SubscribeNotifyExtensionFactory">
            <summary>
            RFC3265
            Session Initiation Protocol (SIP)-Specific Event Notification
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.INotifySenderUA.CreateSubscription(Ozeki.VoIP.IUserAgentInstance,Ozeki.VoIP.DialogID,Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress,Ozeki.Network.TransportInfo,System.String,System.Int32)">
            <summary>
            Creates an active subscription.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.INotifySenderUA.SendNotifyRequest(Ozeki.VoIP.SubscriptionInfo,System.String,System.String)">
            <summary>
            Sends a NOTIFY request to inform the subscriber.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.INotifySenderUA.SendNotifyRequest(Ozeki.VoIP.Subscription,System.String,System.String)">
            <summary>
            Sends a NOTIFY request to inform the subscriber.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:Ozeki.VoIP.ISubscribeSenderUA">
            <summary>
            Subscriber interface. Manages subscriptions, sends SUBSCRIBE requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISubscribeSenderUA.CreateNewSubscription(Ozeki.VoIP.IUserAgentInstance,Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress,Ozeki.Network.TransportInfo,System.String)">
            <summary>
            Creates a new subscription.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISubscribeSenderUA.SendInitialSubscribeRequest(Ozeki.VoIP.Subscription)">
            <summary>
            Sends a SUBSCRIBE request to the remote host.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISubscribeSenderUA.RefreshSubscription(Ozeki.VoIP.Subscription)">
            <summary>
            Refreshes an accepted subscription.
            </summary>
            <param name="subscription">The specified subscription.</param>
        </member>
        <member name="M:Ozeki.VoIP.ISubscribeSenderUA.Unsubscribe(Ozeki.VoIP.Subscription)">
            <summary>
            Unsubscribes from the specified subscription.
            </summary>
            <param name="subscriber">The specified subscription.</param>
        </member>
        <member name="T:Ozeki.VoIP.ISubscriptionManager">
            <summary>
            Subscription kezeleset vegzi.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISubscriptionManager.CreateNewSubscription(Ozeki.VoIP.IUserAgentInstance,Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress,Ozeki.Network.TransportInfo,System.String,Ozeki.VoIP.SIPDialogSide,Ozeki.VoIP.DialogID,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new initial subscription.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISubscriptionManager.CreateActiveSubscription(Ozeki.VoIP.IUserAgentInstance,Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress,Ozeki.Network.TransportInfo,System.String,Ozeki.VoIP.SIPDialogSide,Ozeki.VoIP.DialogID,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new active subscription and adds to the subscriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.ISubscriptionManager.RemoveSubscription(Ozeki.VoIP.Subscription)">
            <summary>
            Removes the specified subscription.
            </summary>
            <param name="subscription"></param>
        </member>
        <member name="E:Ozeki.VoIP.ISubscriptionManager.RefreshTimerElapsed">
            <summary>
            Occurs when the expiration time of the specified subscription elapsed.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.ISubscriptionManager.SubscriptionStateChanged">
            <summary>
            Occurs when the state of the specified subscription has changed.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.NotifyUAC">
            <summary>
            Sends NOTIFY requests and handles the responses for outgoing NOTIFY requests.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.NotifyUAS">
            <summary>
            Handles incoming NOTIFY requests.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SubscribeUAC">
            <summary>
            Sends SUBSCRIBE requests and handles the responses for outgoing SUBSCRIBE requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SubscribeUAC.HandleInitialSubscriptionResponse(Ozeki.VoIP.Response,Ozeki.VoIP.Subscription)">
            <summary>
            Handles the responses that received to an intial subscription request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SubscribeUAC.HandleSubscriptionRefreshResponse(Ozeki.VoIP.Response)">
            <summary>
            Handles the responses that received to a subscription refresh request.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SubscribeUAS">
            <summary>
            Handles incoming SUBSCRIBE requests.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PIdentityHeader">
            <summary>
            The P-Asserted-Identity header field is used among trusted SIP
            entities (typically intermediaries) to carry the identity of the user
            sending a SIP message as it was verified by authentication.
            </summary>
            <remarks>Requests: BYE, INVITE, OPTIONS, SUBSCRIBE, NOTIFY, REFER</remarks>
        </member>
        <member name="M:Ozeki.VoIP.PIdentityHeader.SIPStringPart">
            <summary>
            PAssertedID = "P-Asserted-Identity" HCOLON PAssertedID-value *(COMMA PAssertedID-value)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.RemotePartyIDHeader">
            <summary>
            The Remote-Party-ID header field provides the identity of the remote party.
            </summary>
            <remarks>http://www.ietf.org/proceedings/50/I-D/sip-privacy-01.txt</remarks>
        </member>
        <member name="M:Ozeki.VoIP.RFC3325ParserExtension.ParsePAssertedID(Ozeki.VoIP.PIdentityType)">
            <summary>
            PAssertedID         = "P-Asserted-Identity" HCOLON PAssertedID-value *(COMMA PAssertedID-value)
            PAssertedID-value   = name-addr / addr-spec
            </summary>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.VoIP.RFC3325ParserExtension.ParseRemotePartyID” -->
        <member name="T:Ozeki.VoIP.ProtocolCause">
            <summary>
            protocol-cause    =  "cause" EQUAL cause
            cause             =  1*DIGIT
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ReasonText">
            <summary>
            reason-text       =  "text" EQUAL quoted-string
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ReasonValue">
            <summary>
            reason-value      =  protocol *(SEMI reason-params)
            
            protocol          =  "SIP" / "Q.850" / token
            
            reason-params     =  protocol-cause / reason-text / reason-extension
            protocol-cause    =  "cause" EQUAL 1*(DIGIT)
            reason-text       =  "text" EQUAL quoted-string
            reason-extension  =  generic-param
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ReasonValue.SIPStringPart">
            <summary>
            reason-value      =  protocol *(SEMI reason-params)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.ReasonHeader">
            <summary>
             Reason            =  "Reason" HCOLON reason-value *(COMMA reason-value)
             reason-value      =  protocol *(SEMI reason-params)
             protocol          =  "SIP" / "Q.850" / token
             reason-params     =  protocol-cause / reason-text  / reason-extension
             protocol-cause    =  "cause" EQUAL cause
             cause             =  1*DIGIT
             reason-text       =  "text" EQUAL quoted-string
             reason-extension  =  generic-param
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ReasonHeader.SIPStringPart">
            <summary>
            Reason            =  "Reason" HCOLON reason-value *(COMMA reason-value)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3326ParserExtension.ParseExtensionHeader(System.String)">
            <summary>
            Reason            =  "Reason" HCOLON reason-value *(COMMA reason-value)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3326ParserExtension.PReasonValue">
            <summary>
            reason-value      =  protocol *(SEMI reason-params)
            protocol          =  "SIP" / "Q.850" / token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RFC3326ParserExtension.PReasonParam">
            <summary>
             reason-params     =  protocol-cause / reason-text / reason-extension
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RFC3326ParserExtension.PReasonText">
            <summary>
             reason-text       =  "text" EQUAL quoted-string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RFC3326ParserExtension.PProtocolCause">
            <summary>
            protocol-cause    =  "cause" EQUAL cause
            cause             =  1*DIGIT
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.InstantMessage">
            <summary>
            Represents a SIP instant message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InstantMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.InstantMessage"/> class.
            </summary>
            <param name="recipient">The recipient of the message.</param>
            <param name="content">The content of the message.</param>
        </member>
        <member name="M:Ozeki.VoIP.InstantMessage.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.InstantMessage"/> class.
            </summary>
            <param name="recipient">The recipient of the message.</param>
            <param name="content">The content of the message.</param>
            <param name="contentType">The content type of the message (eg. text/plain).</param>
        </member>
        <member name="M:Ozeki.VoIP.InstantMessage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.InstantMessage"/> class.
            </summary>
            <param name="sender">The sender of the message.</param>
            <param name="recipient">The recipient of the message.</param>
            <param name="content">The content of the message.</param>
            <param name="contentType">The content type of the message (eg. text/plain).</param>
        </member>
        <member name="M:Ozeki.VoIP.InstantMessage.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.InstantMessage"/> class.
            </summary>
            <param name="id">The unique ID of the message.</param>
            <param name="sender">The sender of the message.</param>
            <param name="recipient">The recipient who will receive the message.</param>
            <param name="content">The content of the message.</param>
            <param name="contentType">The content type of the message (eg. text/plain).</param>
        </member>
        <member name="M:Ozeki.VoIP.InstantMessage.Clone">
            <summary>
            Creates a new reference from the instant message instance.
            </summary>
            <returns>The cloned instant message.</returns>
        </member>
        <member name="P:Ozeki.VoIP.InstantMessage.ID">
            <summary>
            Gets the unique identifier of the message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InstantMessage.Sender">
            <summary>
            Gets the name of the sender who sent the message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InstantMessage.Recipient">
            <summary>
            Gets the recepient of the message set by the sender.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InstantMessage.Content">
            <summary>
            Gets the content of the message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InstantMessage.ContentType">
            <summary>
            Gets the type of the content (eg. text/plain, text/html)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPInstantMessageResult">
            <summary>
            Contains information about the response received to a sent MESSAGE request.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPResponseArgs">
            <summary>
            Provides data for SIP responses.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPResponseArgs.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.SIPResponseArgs"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPResponseArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.SIPResponseArgs"/> class.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:Ozeki.VoIP.SIPResponseArgs.IsProvisional">
            <summary>
            Returns a boolean value indicating whether it is a provisional (1xx) response.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPResponseArgs.IsSuccessful">
            <summary>
            Returns a boolean value indicating whether it is a successful (2xx) response.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPResponseArgs.IsRedirection">
            <summary>
            Returns a boolean value indicating whether it is a redirection (3xx) response.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPResponseArgs.StatusCode">
            <summary>
            Gets the status code of the SIP response.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPResponseArgs.ReasonPhrase">
            <summary>
            Gets the reason phrase of the SIP response.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPResponseArgs.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPResponseArgs.CSeq">
            <summary>
            Gets the CSeq number of the response.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPResponseArgs.CallID">
            <summary>
            Gets the Call-ID of the response.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPInstantMessageResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SIPInstantMessageResult"/> class.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPInstantMessageResult.Delivered">
            <summary>
            Gets a boolean value indicating whether the message was delivered.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPInstantMessageResult.SentMessage">
            <summary>
            Gets the original message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPInstantMessageResult.SupportedContentTypes">
            <summary>
            Gets the content types that the other party supports.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MessageMethodExtensionFactory">
            <summary>
            RFC 2976 The SIP INFO Method
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IInstantMessageManager">
            <summary>
            API interface
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InstantMessageUAC">
            <summary>
            Sends MESSAGE requests and receives responses to them.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ReferTo.SIPStringPart">
            <summary>
            Refer-To = ("Refer-To" / "r") HCOLON ( name-addr / addr-spec ) * (SEMI generic-param)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3515ParserExtension.ParseExtensionHeader(System.String)">
            <summary>
            Refer-To = ("Refer-To" / "r") HCOLON ( name-addr / addr-spec ) * (SEMI generic-param)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ReferMethodExtensionFactory">
            <summary>
            RFC3515
            The Session Initiation Protocol (SIP) Refer Method
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MessageContextClass">
            <summary>
            Defines the message-context-classes for a message summary notification.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MessageContextClass.Unknown">
            <summary>
            Unknown message type
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MessageContextClass.None">
            <summary>
            Message has no type
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MessageContextClass.VoiceMessage">
            <summary>
            Voice message type
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MessageContextClass.FaxMessage">
            <summary>
            Fax message type
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MessageContextClass.PagerMessage">
            <summary>
            Pager message type
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MessageContextClass.MultimediaMessage">
            <summary>
            Multimedia message type
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MessageContextClass.TextMessage">
            <summary>
            Text messsage type
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MessageContextClassEx">
            <summary>
            Contains extension methods for <see cref="T:Ozeki.VoIP.MessageContextClass"/> enum.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageContextClassEx.AsString(Ozeki.VoIP.MessageContextClass)">
            <summary>
            Returns the string representation of the given message-context-class.
            </summary>
            <param name="contextClass">The message-context-class.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Ozeki.VoIP.MessageContextClassEx.FromString(System.String)">
            <summary>
            Converts the given string to a message-context-class. 
            </summary>
            <param name="str">The string that will be converted.</param>
            <returns>The message-context-class.</returns>
        </member>
        <member name="T:Ozeki.VoIP.MessageSummary">
            <summary>
            Contains information about a message-summary notification.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageSummary.#ctor(System.Boolean,Ozeki.VoIP.SIPAddress,System.Collections.Generic.IEnumerable{Ozeki.VoIP.MessageSummaryLine},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.MessageSummary"/> class.
            </summary>
            <param name="messageWaiting">Indicates if there are waiting messages</param>
            <param name="messageAccount">The message account</param>
            <param name="messageSummaryLines">The message text</param>
            <param name="optionalMessageHeaders">The message header</param>
        </member>
        <member name="M:Ozeki.VoIP.MessageSummary.Serialize">
            <summary>
            Creates the message-summary body.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageSummary.MessageWaiting">
            <summary>
            Gets a boolean value indicating whether there is a new message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageSummary.MessageAccount">
            <summary>
            Gets the account for the message-summary.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageSummary.MessageSummaryLines">
            <summary>
            Gets the messages separeted by the message-context-class.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageSummary.OptionalMessageHeaders">
            <summary>
            Gets the optional headers sent in the message-summary notification.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MessageSummaryBuilder">
            <summary>
            Creates the message body.
            </summary>
            <remarks>
            message-summary = msg-status-line CRLF
                              [msg-account CRLF]
                              [*(msg-summary-line CRLF)]
                              [ *opt-msg-headers ]
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.MessageSummaryLine">
            <summary>
            Contains data of a message-summary line sent or received in a message-summary notification.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageSummaryLine.#ctor(Ozeki.VoIP.MessageContextClass,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.MessageSummaryLine"/> class.
            </summary>
            <param name="contextClass">The message-context-class</param>
            <param name="newMessages">The number of new messages</param>
            <param name="oldMessages">The number of old messages</param>
            <param name="urgentNewMessages">The number of urgent new messages.</param>
            <param name="urgentOldMessages">The number of urgent old messages.</param>
        </member>
        <member name="M:Ozeki.VoIP.MessageSummaryLine.#ctor(Ozeki.VoIP.MessageContextClass,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.MessageSummaryLine"/> class.
            </summary>
            <param name="contextClass">VoIP message-context-class</param>
            <param name="newMessages">The number of new messages</param>
            <param name="oldMessages">The number of old messages</param>
        </member>
        <member name="P:Ozeki.VoIP.MessageSummaryLine.MessageContextClass">
            <summary>
            Gets the message-context-class of the line. (eg. voice-message)
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageSummaryLine.NewMessages">
            <summary>
            Gets the total number of new messages.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageSummaryLine.OldMessages">
            <summary>
            Gets the total number of old messages.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageSummaryLine.UrgentNewMessages">
            <summary>
            Gets the number of urgent new messages.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageSummaryLine.UrgentOldMessages">
            <summary>
            Gets the number of urgent old messages.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPEventType">
            <summary>
            Defines SIP subscription event types.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPEventType.MessageSummary">
            <summary>
            Message-summary event type, for receiving voicemail notifications.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPEventType.Dialog">
            <summary>
            Dialog event type, for receiving call notifications.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ReplacesHeader.SIPStringPart">
            <summary>
            Replaces = "Replaces" HCOLON callid *(SEMI replaces-param)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ReplaceParserExtension.ParseExtensionHeader(System.String)">
            <summary>
            Replaces        = "Replaces" HCOLON callid *(SEMI replaces-param)
            replaces-param  = to-tag / from-tag / early-flag / generic-param
            to-tag          = "to-tag" EQUAL token
            from-tag        = "from-tag" EQUAL token
            early-flag      = "early-only"
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ReplaceExtensionFactory">
            <summary>
            RFC3891
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DotAtom.SIPStringPart">
            <summary>
            dot-atom = atom *( "." atom )
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPCleanMessageId.SIPStringPart">
            <summary>
            sip-clean-msg-id = LDQUOT dot-atom "@" (dot-atom / host) RDQUOT
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ReferredByHeader.SIPStringPart">
            <summary>
            Referred-By  =  ("Referred-By" / "b") HCOLON referrer-uri *( SEMI (referredby-id-param / generic-param) )
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3892ParserExtension.PReferredBy">
            <summary>
            Referred-By = ("Referred-By" / "b") HCOLON referrer-uri *( SEMI (referredby-id-param / generic-param) )
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC3892ParserExtension.PReferredIdParam">
            <summary>
            referredby-id-param = "cid" EQUAL sip-clean-msg-id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RFC3892ParserExtension.PSIPCleanMessageId">
            <summary>
            sip-clean-msg-id = LDQUOT dot-atom "@" (dot-atom / host) RDQUOT
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RFC3892ParserExtension.PDotAtom">
            <summary>
            dot-atom = atom *( "." atom )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.RFC3892ParserExtension.PAtom">
            <summary>
            atom = 1*( alphanum / "-" / "!" / "%" / "*" / "_" / "+" / "'" / "`" / "~"   )
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ReferredByExtensionFactory">
            <summary>
            RFC3892
            The Session Initiation Protocol (SIP) Referred-By Mechanism
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.RFC4538ParserExtension.ParseTargetDialog">
            <summary>
            Target-Dialog      =     "Target-Dialog" HCOLON callid *(SEMI td-param)    ;callid from RFC 3261
            td-param           =     remote-param / local-param / generic-param
            remote-param       =     "remote-tag" EQUAL token
            local-param        =     "local-tag" EQUAL token
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransferState">
            <summary>
            Specifies the state of the call transfer
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferState.Accepted">
            <summary>
            The transfer request has been accepted.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferState.Rejected">
            <summary>
            The transfer request has been rejected.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferState.Trying">
            <summary>
            Trying to contact with the transfer target.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferState.Busy">
            <summary>
            The transfer target was busy.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferState.NotFound">
            <summary>
            The transfer target was not found or not registered.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferState.Failed">
            <summary>
            The transfer target was contacted successfully, but an error occurred during the establishment of the call (eg. no common codecs found).
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferState.Completed">
            <summary>
            The call was transferred successfully.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransferStateEx">
            <summary>
            Contains methods for <see cref="T:Ozeki.VoIP.TransferState"/> enum.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.TransferStateEx.IsTransferFailed(Ozeki.VoIP.TransferState)">
            <summary>
            Retrieves a boolean value indicating whether the transfer has failed.
            </summary>
            <param name="state">The transfer state.</param>
            <returns>True, if transfer failed; otherwise false.</returns>
        </member>
        <member name="M:Ozeki.VoIP.TransferStateEx.FromStatusCode(System.Int32)">
            <summary>
            Creates a transfer state from a SIP status code.
            </summary>
            <param name="statusCode">The status code.</param>
            <returns>The transfer state for the status code.</returns>
        </member>
        <member name="T:Ozeki.VoIP.TransferType">
            <summary>
            Specifies transfer types.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferType.NoTransfer">
            <summary>
            No transfer
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferType.BlindTransfer">
            <summary>
            Blind transfer
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransferType.AttendedTransfer">
            <summary>
            Attended transfer
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISIPReferReceiver">
            <summary>
            Can receive incoming REFER requests and responses to sent REFER requests.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IReferSenderUA">
            <summary>
            Sends REFER requests and receives responses to REFER request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IReferSenderUA.SendRefer(Ozeki.VoIP.IUserAgentInstance,Ozeki.VoIP.ReferRequestArgs)">
            <summary>
            Sends REFER request initiating blind or attended transfer.
            </summary>
            <returns>The subscription for blind/attended transfer</returns>
        </member>
        <member name="M:Ozeki.VoIP.IReferSenderUA.SendReferResponse(Ozeki.VoIP.ReferResponseArgs)">
            <summary>
            Sends response to an incoming REFER request.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ReferUAC">
            <summary>
            Sends REFER requests and handles the responses.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InfoData">
            <summary>
            Provides information about a package received in SIP INFO request body.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InfoData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.InfoData"/> class.
            </summary>
            <param name="mimeType">The MIME type of the content.</param>
            <param name="subMimeType">The sub-MIME type of the content.</param>
            <param name="content">The content.</param>
        </member>
        <member name="P:Ozeki.VoIP.InfoData.MimeType">
            <summary>
            Gets the MIME type of the content.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InfoData.SubMimeType">
            <summary>
            Gets the sub-MIME type of the content.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InfoData.Content">
            <summary>
            Gets the string representation of the content.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InfoMethodExtensionFactory">
            <summary>
            RFC 6086
            Session Initiation Protocol (SIP) INFO Method and Package Framework
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IInfoSenderUA">
            <summary>
            Can send SIP INFO requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInfoSenderUA.SendINFORequest(Ozeki.VoIP.IUserAgentInstance,Ozeki.VoIP.DialogID,Ozeki.VoIP.InfoData)">
            <summary>
            Sends SIP INFO request.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InfoUAC">
            <summary>
            Sends INFO requests and handles the responses.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InfoUAS">
            <summary>
            Handles DTMF signal via SIP INFO
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPDialogState">
            <summary>
            Defines states for SIP dialogs.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPDialogState.UNDEFINED">
            <summary>
            Unknown state.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPDialogState.EARLY">
            <summary>
            The dialog is created with a provisional response.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPDialogState.CONFIRMED">
            <summary>
            The dialog is created by or transited to the confirmed state when a final response (2xx) received.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SIPDialogState.TERMINATED">
            <summary>
            The dialog has been closed.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.UASCreateDialog(Ozeki.VoIP.Response)">
            <summary>
            12.1.1 Creation of a Dialog / UAS behavior
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.UACCreateDialog(Ozeki.VoIP.Response)">
            <summary>
            12.1.2 Creation of a Dialog / UAC Behavior
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.AddUASContactHeader(Ozeki.VoIP.Response,System.String)">
            <summary>
            12.1.1 Creation of a Dialog / UAS behavior
            The URI provided in the Contact header field MUST be a SIP
            or SIPS URI.  If the request that initiated the dialog contained a
            SIPS URI in the Request-URI or in the top Record-Route header field
            value, if there was any, or the Contact header field if there was no
            Record-Route header field, the Contact header field in the response
            MUST be a SIPS URI.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.AddUACContactHeader(Ozeki.VoIP.Request,System.String)">
            <summary>
            12.1.2 Creation of a Dialog / UAC Behavior
            When a UAC sends a request that can establish a dialog (such as an
            INVITE) it MUST provide a SIP or SIPS URI with global scope in the
            Contact header field of the request.  If the request has a Request-URI
            or a topmost Route header field value with a SIPS URI, the
            Contact header field MUST contain a SIPS URI.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.UpdateRouteSet(Ozeki.VoIP.SIPMessage,System.Boolean)">
            <summary>
            Updates the route set of the dialog.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.CopyRecordRouteHeaders(Ozeki.VoIP.Request,Ozeki.VoIP.Response)">
            <summary>
            12.1.1 Creation of a Dialog / UAS behavior
            When a UAS responds to a request with a response that establishes a
            dialog (such as a 2xx to INVITE), the UAS MUST copy all Record-Route
            header field values from the request into the response (including the
            URIs, URI parameters, and any Record-Route header field parameters,
            whether they are known or unknown to the UAS) and MUST maintain the
            order of those values.         
            </summary>
            <param name="req">Record-Route from the request</param>
            <param name="resp">Record-Route into the response</param>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.HandleReceivedResponse(Ozeki.VoIP.Response)">
            <summary>
            Bejovo response lekezelese
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.IsTerminateReceivedResponse(Ozeki.VoIP.Response)">
            <summary>
            12.3 Termination of a Dialog
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.IsTerminateTransmitResponse(Ozeki.VoIP.Response)">
            <summary>
            12.3 Termination of a Dialog
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.HandleReceivedRequest(Ozeki.VoIP.Request)">
            <summary>
            12.2.2 Requests within a Dialog / UAS Behavior
            Bejovo Request lekezelese
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.Terminate(Ozeki.VoIP.DialogTerminationReason)">
            <summary>
            Terminates the dialog.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPDialog.IsSecure(Ozeki.VoIP.Request)">
            <summary>
            If the request that initiated the dialog contained a
            SIPS URI in the Request-URI or in the top Record-Route header field
            value, if there was any, or the Contact header field if there was no
            Record-Route header field, the Contact header field in the response
            MUST be a SIPS URI.
            </summary>
            <param name="req">The first request of the created dialog.</param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.DialogContainer.TryGetDialog(Ozeki.VoIP.DialogID)">
            <summary>
            Gets a dialog from the container.
            </summary>
            <param name="dialogID"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.DialogContainer.Contains(Ozeki.VoIP.DialogID)">
            <summary>
            Determines whether a dialog is in the container.
            </summary>
            <param name="dialogID"></param>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.ISIPProtocolLayer">
            <summary>
            Protocol layer design pattern.
            </summary>
            <remarks>
            http://www.eventhelix.com/realtimemantra/patterncatalog/protocol_layer.htm
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISIPProtocolLayer.HandleMessage(Ozeki.VoIP.SIPMessage)">
            <summary>
            Handle the message in this layer.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ozeki.VoIP.ISIPProtocolLayer.TransmitMessage(Ozeki.VoIP.SIPMessage)">
            <summary>
            Transmit some message from this layer.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Ozeki.VoIP.ISIPProtocolLayer.ItsUpperLayer">
            <summary>
            Upper layer of SIP Stack.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ISIPProtocolLayer.ItsLowerLayer">
            <summary>
            Lower layer of SIP Stack.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.IsAppropriateMessage(Ozeki.VoIP.SIPMessage)">
            <summary>
            A DialogManager alabbi esetekben tud lekezelni SIP uzenetet:
            - request indukal dialogust
            - request mid-dialog request
            - response kiepit egy dialogust
            - response mid-dialog request-re kapott response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.DoesCreateDialog(Ozeki.VoIP.Response)">
            <summary>
            Eldonti, hogy egy requestre kapott response kiepiti-e a dialogust.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.DoesCreateDialog(Ozeki.VoIP.Request)">
            <summary>
            Eldonti, hogy egy kuldott/fogadott request indukal-e dialogust.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.IsTargetRefreshRequest(Ozeki.VoIP.MethodType)">
            <summary>
            Eldonti, hogy egy request target refresh request-e. Alapesetben csak a re-INVITE szamit annak.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.IsTerminateRequest(Ozeki.VoIP.SIPMessage)">
            <summary>
            Ellenorzi, hogy egy mid-dialog request olyan uzenet, ami lezarja a dialogust.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.HandleTransmitRequest(Ozeki.VoIP.Request)">
            <summary>
            Kikuldott request lekezelese.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.HandleTransmitResponse(Ozeki.VoIP.Response)">
            <summary>
            Bejovo request-re kikuldjuk a valaszt.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.HandleReceivedResponse(Ozeki.VoIP.Response)">
            <summary>
            Bejovo response lekezelese.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.HandleReceivedRequest(Ozeki.VoIP.Request)">
            <summary>
            Bejovo request-ek lekezelese.
            The UAS will receive the request from the transaction layer. 
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.UACCreateDialog(Ozeki.VoIP.Response)">
            <summary>
            Kimeno INVITE-ra kaptunk valaszt, ami kiepiti a dialogust.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DialogLayer.UASCreateDialog(Ozeki.VoIP.Response)">
            <summary>
            Bejovo INVITE-ra kuldunk valaszt, ami kiepiti a dialogust.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPDialogWrapper">
            <summary>
            Dialog wrapper, ami sorban dobalja a SIP message-eket, hogy ne a UA szintjen kelljen kezelni
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPIDFactory">
             <summary>
             It generates random identifiers and tags for transactions and dialogs.
             </summary>
             <remarks>
            19.3 Tags
            
             The "tag" parameter is used in the To and From header fields of SIP
             messages.  It serves as a general mechanism to identify a dialog,
             which is the combination of the Call-ID along with two tags, one from
             each participant in the dialog.  When a UA sends a request outside of
             a dialog, it contains a From tag only, providing "half" of the dialog
             ID.  The dialog is completed from the response(s), each of which
             contributes the second half in the To header field.  The forking of
             SIP requests means that multiple dialogs can be established from a
             single request.  This also explains the need for the two-sided dialog
             identifier; without a contribution from the recipients, the
             originator could not disambiguate the multiple dialogs established
             from a single request.
            
             When a tag is generated by a UA for insertion into a request or
             response, it MUST be globally unique and cryptographically random
             with at least 32 bits of randomness.  A property of this selection
             requirement is that a UA will place a different tag into the From
             header of an INVITE than it would place into the To header of the
             response to the same INVITE.  This is needed in order for a UA to
             invite itself to a session, a common case for "hairpinning" of calls
             in PSTN gateways.  Similarly, two INVITEs for different calls will
             have different From tags, and two responses for different calls will
             have different To tags.
            
             Besides the requirement for global uniqueness, the algorithm for
             generating a tag is implementation-specific.  Tags are helpful in
             fault tolerant systems, where a dialog is to be recovered on an
             alternate server after a failure.  A UAS can select the tag in such a
             way that a backup can recognize a request as part of a dialog on the
             failed server, and therefore determine that it should attempt to
             recover the dialog and any other state associated with it.
             </remarks>
        </member>
        <member name="T:Ozeki.VoIP.TestIDFactory">
            <summary>
            Teszteléshez jól jöhet, mert mindig +1 el novekednek az id-k
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MessageFactory._supportedOptionTags">
            <summary>
            Supported option tags
            </summary>
            <remarks>
            See more: http://www.iana.org/assignments/sip-parameters
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateRequest(Ozeki.VoIP.Method,System.String,System.String,System.Int32,Ozeki.VoIP.SIPAddress,System.String,Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress,Ozeki.Network.TransportInfo,System.String)">
            <summary>
            8.1.1 Generating the Request
            
            A REGISTER-hez a <see cref="M:Ozeki.VoIP.MessageFactory.GenerateRegisterRequest(Ozeki.VoIP.SIPAddress,System.String,System.String,System.String,System.Int32,System.Int32,System.String,Ozeki.VoIP.SIPAddress,Ozeki.Network.TransportInfo,System.Boolean)"/> metodust kell hasznalni.
            A CANCEL-hez a <see cref="M:Ozeki.VoIP.MessageFactory.GenerateCancelRequest(Ozeki.VoIP.Request)"/> metodust kell hasznalni.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateRequest(Ozeki.VoIP.Method,Ozeki.VoIP.AddrSpec,Ozeki.VoIP.Via,System.String,System.Int32,Ozeki.VoIP.SIPAddress,System.String,Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress,Ozeki.Network.TransportInfo,System.String)">
            <summary>
            8.1.1 Generating the Request
            
            A valid SIP request formulated by a UAC MUST, at a minimum, contain
            the following header fields: To, From, CSeq, Call-ID, Max-Forwards,
            and Via; all of these header fields are mandatory in all SIP
            requests.
            
            A REGISTER-hez a PrepareNewRegister metodust kell hasznalni.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateRegisterRequest(Ozeki.VoIP.SIPAddress,System.String,System.String,System.String,System.Int32,System.Int32,System.String,Ozeki.VoIP.SIPAddress,Ozeki.Network.TransportInfo,System.Boolean)">
            <summary>
            10.2 Constructing the REGISTER Request
            Except as noted, the construction of the REGISTER request and the
            behavior of clients sending a REGISTER request is identical to the
            general UAC behavior described in Section 8.1 (UACGenerateRequest)
            
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateCancelRequest(Ozeki.VoIP.Request)">
            <summary>
            9.1 Canceling a Request / Client Behavior
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateResponse(Ozeki.VoIP.Request,System.Int32,Ozeki.VoIP.DialogID,Ozeki.VoIP.SIPAddress)">
            <summary>
            8.2.6 UAS Behavior / Generating the Response
            Ha a dialogID nem null, akkor a valasz To tag-jeben a dialogID LocalTag-je lesz, egyebkent general
            uj To tag-et.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateResponse(Ozeki.VoIP.Request,System.Int32,System.String,Ozeki.VoIP.DialogID,Ozeki.VoIP.SIPAddress)">
            <summary>
            8.2.6 UAS Behavior / Generating the Response
            Ha a dialogID nem null, akkor a valasz To tag-jeben a dialogID LocalTag-je lesz, egyebkent general
            uj To tag-et.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateResponse(Ozeki.VoIP.Request,System.Int32,System.Boolean,System.String,Ozeki.VoIP.SIPAddress)">
            <summary>
            8.2.6 UAS Behavior / Generating the Response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateResponse(Ozeki.VoIP.Request,System.Int32,System.String,System.Boolean,System.String,Ozeki.VoIP.SIPAddress)">
            <summary>
            8.2.6 UAS Behavior / Generating the Response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.SetupProvisionalResponse(Ozeki.VoIP.Request,Ozeki.VoIP.Response)">
            <summary>
            8.2.6.1 UAS Behavior / Sending a Provisional Response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateMidDialogRequest(Ozeki.VoIP.ISIPDialog,Ozeki.VoIP.Method,Ozeki.Network.TransportInfo)">
            <summary>
            12.2.1.1 Requests within a Dialog / UAC Behavior / Generating the Request.
            CSeq will be calculated automatically.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GenerateMidDialogRequest(Ozeki.VoIP.ISIPDialog,Ozeki.VoIP.Method,System.Int32,Ozeki.VoIP.SIPAddress,Ozeki.Network.TransportInfo)">
            <summary>
            12.2.1.1 Requests within a Dialog / UAC Behavior / Generating the Request (with Contact)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageFactory.GetDialogRequestUriAndRoute(Ozeki.VoIP.ISIPDialog)">
            <summary>
            The UAC uses the remote target and route set to build the Request-URI and Route header field of the request.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPStack">
            <summary>
            Felépíti a SIP Stack et
            A Stack 4 rétegből áll TransportLayer, Transaction, Dialog, UserAgent és ezek egymás felett helyezkednek el.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPStack.ConnectLayers(Ozeki.VoIP.ISIPProtocolLayer,Ozeki.VoIP.ISIPProtocolLayer)">
            <summary>
            Összekapcsolja a rétegeket
            </summary>
            <param name="lowerLayer"></param>
            <param name="upperLayer"></param>
        </member>
        <member name="P:Ozeki.VoIP.AbstractTransaction.InviteMode">
            <summary>
            True, if the request was an INVITE.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractTransactionState.OnTransportError(Ozeki.VoIP.SIPMessage)">
            <summary>
            Transport error occurred
            </summary>
            <param name="msg">The SIP message being sent.</param>
        </member>
        <member name="M:Ozeki.VoIP.ClientTransaction.DoesMatchResponse(Ozeki.VoIP.Response)">
            <summary>
            Determine whatever the given response is matched to the client transaction.
            </summary>
            <remarks>
            1.  If the response has the same value of the branch parameter in
                the top Via header field as the branch parameter in the top
                Via header field of the request that created the transaction.
                
            2.  If the method parameter in the CSeq header field matches the
                method of the request that created the transaction.  The
                method is needed since a CANCEL request constitutes a
                different transaction, but shares the same value of the branch
                parameter.
            </remarks>
            <param name="resp">The message</param>
            <returns>True if the message is good for the client transaction.</returns>
        </member>
        <member name="T:Ozeki.VoIP.CInviteAcceptedState">
            <summary>
            INVITE client transaction Accepted state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CInviteCallingState">
            <summary>
            INVITE client transaction "Calling" state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CInviteCompletedState">
            <summary>
            INVITE client transaction "Completed" state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CInviteProceedingState">
            <summary>
            INVITE client transaction "Proceeding" state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CNonInviteCompletedState">
            <summary>
            Non-INVITE client transaction "Completed" state, Non-INVITE mode
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CNonInviteProceedingState">
            <summary>
            Non-INVITE client transaction "Proceeding" state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CNonInviteTryingState">
            <summary>
            Non-INVITE client transaction "Trying" state, Non-INVITE mode
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ServerTransactionState.ResponseReceived(Ozeki.VoIP.Response)">
            <summary>
            Response received from TU.
            </summary>
            <param name="resp"></param>
        </member>
        <member name="M:Ozeki.VoIP.ServerTransactionState.RequestReceived(Ozeki.VoIP.Request)">
            <summary>
            Request received from transport.
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Ozeki.VoIP.SInviteAcceptedState">
            <summary>
            INVITE server transaction Accepted state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SInviteCompletedState">
            <summary>
            INVITE server transaction Completed state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SInviteConfirmedState">
            <summary>
            INVITE server transaction Confirmed state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SInviteProceedingState">
            <summary>
            INVITE server transaction Proceeding state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SNonInviteCompletedState">
            <summary>
            Non-INVITE server transaction Completed state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SNonInviteProceedingState">
            <summary>
            Non-INVITE server transaction Proceeding state
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SNonInviteTryingState">
            <summary>
            Non-INVITE server transaction Trying state
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.TransactionContainer.FindCancelTransaction(Ozeki.VoIP.TransactionID)">
            <summary>
            Megkeresi a CANCEL-hez tartozo tranzakciot.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransactionErrorInfo">
            <summary>
            Defines values for SIP transaction errors.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransactionErrorInfo.NO_ERROR">
            <summary>
            No error occurred.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransactionErrorInfo.TIMEOUT">
            <summary>
            Transaction timed out.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransactionErrorInfo.TRANSPORT_ERROR">
            <summary>
            Network error.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.TransactionErrorInfo.UNKNOWN">
            <summary>
            Other errors.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.TransactionLayer.HandleMessage(Ozeki.VoIP.SIPMessage)">
            <summary>
            Handle the message in this layer.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ozeki.VoIP.TransactionLayer.TransmitMessage(Ozeki.VoIP.SIPMessage)">
            <summary>
            Transmit some message from this layer.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Ozeki.VoIP.TransactionLayer.ItsUpperLayer">
            <summary>
            Upper layer of SIP Stack.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.TransactionLayer.ItsLowerLayer">
            <summary>
            Lower layer of SIP Stack.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransactionStates">
            <summary>
            Defines states for SIP transactions.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISIPTransportSelector.GetTransport(Ozeki.Network.TransportInfo)">
            <summary>
            Selects the transport when sending SIP messages.
            </summary>
            <returns>The transport or null if no transport selected.</returns>
        </member>
        <member name="T:Ozeki.VoIP.SIPTransportSelector">
            <summary>
            Any address listeneleskor ugyanazon a transporton kell kikuldeni az uzeneteket,
            mint amelyiken bejottek. Viszont a User-Agent-ben a normal local address-t
            hasznaljuk.
            Ez a selector nyilvan tartja a tenyleges (0.0.0.0) es az atirt (pl. 192.168.113.4)
            cimek kozti kapcsolatot. SIP uzenet kikuldesekor a GetTransport() kivalasztja
            visszafele 
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPTransportLayer">
            <summary>
            RFC 3261 - 18 Transport
            
            The transport layer is responsible for the actual transmission of
            requests and responses over network transports.  This includes
            determination of the connection to use for a request or response in
            the case of connection-oriented transports.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPTransportLayer.SendMessageOnExistingTransport(Ozeki.VoIP.SIPMessage)">
            <summary>
            Sends the SIP message to the default remote address and port.
            If no transport found or the connection is not opened returns false.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPTransportLayer.SendMessageToRemote(Ozeki.VoIP.SIPMessage,System.String,System.Int32)">
            <summary>
            Sends the SIP message to the given remote address and port. Tries to get
            an existing transport, if not found, creates one and then sends the message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPTransportLayer.HandleMessage(Ozeki.VoIP.SIPMessage)">
            <summary>
            Handle the message in this layer.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Ozeki.VoIP.SIPTransportLayer.ItsUpperLayer">
            <summary>
            Upper layer of SIP Stack.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPTransportLayer.ItsLowerLayer">
            <summary>
            Lower layer of SIP Stack.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ACKContainer">
            <summary>
            Az ACK kikuldesehez szukseg van az INVITE uzenetre, illetve a 2xx response-ra, amivel elfogadtak.
            Mivel event-ben jon fel, hogy a masik fel elkuldte az ACK-ot, igy sehonnan
            nem tudjuk elohalaszni az INVITE es 2xx uzeneteket.
            Ebben a kontenerben taroljuk oket. Amint kikuldtuk az ACK-ot, akkor ki kell venni innen.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ACKContainer.Add(System.String,System.Int32,Ozeki.VoIP.Request)">
            <summary>
            Key: INVITE.CSeq, Value: other.CallID, other.CSeq
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.AckUAC">
            <summary>
            Kimeno ACK requesteket kezeli.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.AckUAS">
            <summary>
            Bejovo ACK requesteket kezeli.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AuthManagerUAC.HandleResponse(Ozeki.VoIP.Response)">
            <summary>
            True, ha autentikacio tortent, false, ha nem
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AuthManagerUAC.GetAuthInfo(Ozeki.VoIP.Response)">
            <summary>
            Selects the SIP account for the given response from the authentication database.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ByeUAC">
            <summary>
            Sends BYE requests and handles the BYE responses.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IByeSenderUA.SendBye(Ozeki.VoIP.IUserAgentInstance,Ozeki.VoIP.DialogID,Ozeki.VoIP.SIPCallBasicInfo,Ozeki.VoIP.ByeRequestArgs)">
            <summary>
            Sends a BYE request to the remote party.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ByeUAC.SendBye(Ozeki.VoIP.IUserAgentInstance,Ozeki.VoIP.DialogID,Ozeki.VoIP.SIPCallBasicInfo,Ozeki.VoIP.ByeRequestArgs)">
            <summary>
            Sends a BYE request to the call.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ByeUAS">
            <summary>
            Handles incoming BYE requests.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallErrorHandler">
            <summary>
            Hivas kozben fellepo SIP hibak kezelese. (pl. request timed out, dialog terminated stb)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CancelUAC">
            <summary>
            Sends CANCEL requests and handles the responses for the outgoing CANCEL request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ICancelSenderUA.SendCancel(Ozeki.VoIP.TransactionID,Ozeki.VoIP.CancelRequestArgs)">
            <summary>
            Cancels a pending outgoing call by sending a CANCEL request to the INVITE.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CancelUAS">
            <summary>
            Handles incoming CANCEL requests.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.GeneralErrorHandler">
            <summary>
            Altalanos hibak kezelesere szolgal
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInviteSenderUA.SendInvite(Ozeki.VoIP.IBaseSIPCall,Ozeki.VoIP.InviteHeaders)">
            <summary>
            Starts a call session by sending an INVITE request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IInviteSenderUA.SendReInvite(Ozeki.VoIP.IBaseSIPCall,Ozeki.VoIP.InviteHeaders)">
            <summary>
            Sends a re-INVITE withing a dialog.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InternalDialInfo">
            <summary>
            Contains dial information of a call.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InternalDialInfo.#ctor">
            <summary>
            Constructor for cloning and other kind of marhasagok.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InternalDialInfo.#ctor(System.String,System.String,System.String,Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress)">
            <summary>
            For internal use only!
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InternalDialInfo.SetDefaults(Ozeki.VoIP.SIPAddress)">
            <summary>
            Updates the null values using the given SIP identity address.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InternalDialInfo.Clone">
            <summary>
            Creates a deep copy of the instance.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InternalDialInfo.CallerDisplay">
            <summary>
            Gets or sets the display name of the caller.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InternalDialInfo.CallerID">
            <summary>
            Gets the ID of the caller.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InternalDialInfo.Dialed">
            <summary>
            Gets the dialed number or dialed user ID.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InternalDialInfo.SIPCallerID">
            <summary>
            Gets the full SIP address of the caller.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InternalDialInfo.SIPDialed">
            <summary>
            Gets the full SIP address of the dialed number.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InviteArgs">
            <summary>
            Provides data for an INVITE request.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InviteResponseArgs.#ctor(System.Int32)">
            <summary>
            !!! CSAK ERROR ESETEN LEHET EZT A KONSTRUKTORT HASZNALNI !!!!
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteResponseArgs.UserID">
            <summary>
            Ki kuldi a response-t
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteResponseArgs.MediaDescription">
            <summary>
            Response-ban leveo media description
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.InviteResponseArgs.UserSIPInfo">
            <summary>
            A kuldo 
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InviteUAC">
            <summary>
            Sends INVITE requests and handles the responses for the outgoing INVITE requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InviteUAC.SendInvite(Ozeki.VoIP.IBaseSIPCall,Ozeki.VoIP.InviteHeaders)">
            <summary>
            Sends the initial INVITE request.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InviteUAS">
            <summary>
            Handles incoming INVITE requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISIPInviteReceiver.OnInviteReceived(Ozeki.VoIP.InviteHeaders,System.Boolean)">
            <summary>
            Erkezett egy re-INVITE, amiben az osszes lenyeges SIP header benne van.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Response2xxRetransmitter">
            <summary>
            RFC 3261 requires the TU to periodically retransmit the 2xx response until it receives an ACK.
            </summary>
            <remarks>
            2xx kikuldesnel a server INVITE tranzakcio Accepted allapotba lep. Elvileg nem az Accepted
            allapot dolga, hogy ujra kikuldje a 2xx uzenetet, igy ezert kellett bevezetni ezt az osztalyt.
            Az Accepted allapothoz azert nem lehet beletenni, mert az ACK mar nem a tranzakcio resze.
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.IOptionsManager">
            <summary>
            Defines events and methods for OPTIONS requests and responses.
            </summary>
            <remarks>
            API interface for OPTIONS
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.IOptionsManager.SendOptions">
            <summary>
            Sends an OPTIONS request to the remote end.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Ozeki.VoIP.IOptionsManager.ResponseReceived">
            <summary>
            Occurs when a response received to a sent OPTIONS request.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.IOptionsManager.OptionsReceived">
            <summary>
            Occurs when an OPTIONS request received from the remote end.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IOptionsReceiver">
            <summary>
            Handles incoming OPTIONS requests and incoming responses to sent OPTIONS requests.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IOptionsReceiver.GetResponseCode">
            <summary>
            Gets the resposne code for an incoming OPTIONS request.
            </summary>
            <remarks>When the phone line is busy, returns a 486 response code.</remarks>
        </member>
        <member name="T:Ozeki.VoIP.OptionsUAC">
            <summary>
            Sends OPTIONS requests and handles the responses.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.OptionsUAS">
            <summary>
            Handles incoming OPTIONS requests.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RegisterUAC">
            <summary>
            Handles incoming responses for outgoing REGISTER request.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.RequestContentBuffer">
            <summary>
            Message Contents
            </summary>
            <remarks>
            A komminukáció során szükség van arra, hogy a kiküldött üzenetek tartalmait nyilván tudjuk tartani.
            Ugyanis ezt eddig a tranzakciót indító üzenetekben tartottuk nyilván. Ezzel az a baj, hogy ezt a tartalmat
            csak a tranzakción keresztül lehetett elérni, ami referencuiális hivatkozást generált. Így például az 
            authentikációnál elő kell keresni a tranzakciót lekérni az ő üzenetét majd kimásolni a tartalmát.
            Egy ez az információ nem egy jól elkülönített helyen jelenik meg, hanem a kódban fragmentálva. Mivel 
            minket azonban pl csak az authentikálásnál az üzenet eredeti tartalma érdekelt, ezt ebben a bufferben
            tárolni tudjuk, így a magasabb rendű komponensek nem függnek az alacsonyabaktól.
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.UACContainer">
            <summary>
            kliens oldali clienteket azonosit
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IUserAgentExtension.HandleMessage(Ozeki.VoIP.SIPMessage)">
            <summary>
            Handle the message in this layer.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ozeki.VoIP.IUserAgentExtension.IsAppropriateMessage(Ozeki.VoIP.SIPMessage)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:Ozeki.VoIP.IUserAgentExtension.UserAgent">
            <summary>
            Az Extension UserAgent-je
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPMessageLogger">
            <summary>
            Captures incoming and outgoing SIP messages.
            </summary>
            <remarks>
            When using SIP message logger, it can severely decrease the performance of the program.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageLogger.Start">
            <summary>
            Starts logging the inbound and outbound SIP messages.
            NOTE: if the SIP message logger has started, it can severely decrease the performance of the program.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageLogger.Stop">
            <summary>
            Stops the SIP message logging.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.SIPMessageLogger.SIPMessageReceived">
            <summary>
            SIP message received by the SIP Stack.
            </summary>
        </member>
        <member name="E:Ozeki.VoIP.SIPMessageLogger.SIPMessageSent">
            <summary>
            SIP message sent by the SIP Stack.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Method">
            <summary>
            
            </summary>
            <grammar>
            Method            =  INVITEm / ACKm / OPTIONSm / BYEm
                                 / CANCELm / REGISTERm
                                 / extension-method
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.SIPUri">
            <summary>
            
            </summary>
            <grammar>
            sip-uri          =  "sip:" [ userinfo ] hostport
                                uri-parameters [ headers ]
            sips-uri         =  "sips:" [ userinfo ] hostport
                                uri-parameters [ headers ]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.SIPVersion">
            <summary>
            
            </summary>
            <grammar>
            SIP-Version    =  "SIP" "/" 1*DIGIT "." 1*DIGIT
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.UriParameter">
            <summary>
            
            </summary>
            <grammar>
            uri-parameter     =  transport-param / user-param / method-param
                                 / ttl-param / maddr-param / lr-param / other-param
            other-param       =  pname [ "=" pvalue ]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Accept">
            <summary>
            
            </summary>
            <grammar>
            Accept         =  "Accept" hcolon
                               [ accept-range *(comma accept-range) ]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.AcceptEncoding">
            <summary>
            
            </summary>
            <grammar>
            
            Accept-Encoding  =  "Accept-Encoding" hcolon
                                [ encoding *(comma encoding) ]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.AcceptLanguage">
            <summary>
            
            </summary>
            <grammar>
            Accept-Language  =  "Accept-Language" hcolon
                                 [ language *(comma language) ]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.AlertInfo">
            <summary>
            Alert-Info   =  "Alert-Info" hcolon alert-param *(comma alert-param)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Allow">
            <summary>
            
            </summary>
            <grammar>
            Allow  =  "Allow" hcolon [Method *(comma Method)]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.AuthenticationInfo">
            <summary>
            
            </summary>
            <grammar>
            Authentication-Info  =  "Authentication-Info" hcolon ainfo
                                    *(comma ainfo)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Authorization">
            <summary>
            
            </summary>
            <grammar>
            Authorization     =  "Authorization" hcolon credentials
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.CallID">
            <summary>
            Call-IDD  =  ( "Call-IDD" / "i" ) hcolon callid
            callid   =  word [ "@" word ]
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.CallInfoHeader">
            <summary>
            Call-Info   =  "Call-Info" hcolon info *(comma info)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Contact">
            <summary>
            Contact        =  ("Contact" / "m" ) hcolon
                              ( star / (contact-param *(comma contact-param)))
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ContentDisposition">
            <summary>
            
            </summary>
            <grammar>
            Content-Disposition   =  "Content-Disposition" hcolon
                                     disp-type *( semi disp-param )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ContentEncoding">
            <summary>
            
            </summary>
            <grammar>
            Content-Encoding  =  ( "Content-Encoding" / "e" ) hcolon
                                 content-coding *(comma content-coding)
            content-coding   =  token                      
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ContentLanguage">
            <summary>
            
            </summary>
            <grammar>
            Content-Language  =  "Content-Language" hcolon
                                 language-tag *(comma language-tag)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ContentLength">
            <summary>
            
            </summary>
            <grammar>
            Content-Length  =  ( "Content-Length" / "l" ) hcolon 1*DIGIT
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ContentType">
            <summary>
            
            </summary>
            <grammar>
            Content-Type     =  ( "Content-Type" / "c" ) hcolon media-type
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.CSeq">
            <summary>
            
            </summary>
            <grammar>
            CSeq  =  "CSeq" hcolon 1*DIGIT lws Method
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.AcceptRange">
            <summary>
            
            </summary>
            <grammar>
            accept-range   =  media-range *(semi accept-param)
            </grammar>
        </member>
        <member name="M:Ozeki.VoIP.AddrSpec.SIPStringPart">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ozeki.VoIP.AddrSpec.Username">
            <summary>
            A felhasználónév sip es sips esetében.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.AddrSpec.Address">
            <summary>
            Hostname port-al paraméterekkel együtt.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.AddrSpec.Host">
            <summary>
            Hostname
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.AddrSpec.Port">
            <summary>
            Ha találtunk portot a címben akkor azt megjegyeztük itt, nem biztos, hogy belekerül a meglévő port.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.AddrSpecType">
            <summary>
            Defines SIP address-spec types.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.AddrSpecType.Sip">
            <summary>
            SIP-URI
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.AddrSpecType.Sips">
            <summary>
            SIPS-URI
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.AddrSpecType.AbsoluteUri">
            <summary>
            Absolute-URI
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.AlertParam">
            <summary>
            
            </summary>
            <grammar>
            alert-param  =  laquot absoluteuri raquot *( semi generic-param )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ContactParam">
            <summary>
            
            </summary>
            <grammar>
            contact-param  =  (name-addr / addr-spec) *(semi contact-params)
            </grammar>
        </member>
        <member name="M:Ozeki.VoIP.ContactParamEx.GetTransportType(Ozeki.VoIP.ContactParam)">
            <summary>
            Gets the transport type from the contact parameter.
            </summary>
            <param name="contact">The contact parameter.</param>
            <returns>Item1: Contact Param contained tranport parameter; Item2: the transport type of the contact.</returns>
        </member>
        <member name="T:Ozeki.VoIP.DispType">
            <summary>
            
            </summary>
            <grammar>
            disp-type             =  "render" / "session" / "icon" / "alert"
                                       / disp-extension-token
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Encoding">
            <summary>
            
            </summary>
            <grammar>
            encoding         =  codings *(semi accept-param)
            codings          =  content-coding / "*"
            content-coding   =  token
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ErrorUri">
            <summary>
            
            </summary>
            <grammar>
            error-uri   =  laquot absoluteuri raquot *( semi generic-param )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.AcceptParam">
            <summary>
            
            </summary>
            <grammar>
            accept-param   =  ("q" equal qvalue) / generic-param
            qvalue         =  ( "0" [ "." 0*3DIGIT ] )
                              / ( "1" [ "." 0*3("0") ] )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ContactParams">
            <summary>
            </summary>
            <grammar>
            contact-params     =  c-p-q / c-p-expires
                                  / contact-extension
            c-p-q              =  "q" equal qvalue
            c-p-expires        =  "expires" equal delta-seconds
            contact-extension  =  generic-param
            delta-seconds      =  1*DIGIT
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.CpqParam">
            <summary>
            
            </summary>
            <grammar>
            c-p-q              =  "q" equal qvalue
            qvalue         =  ( "0" [ "." 0*3DIGIT ] )
                              / ( "1" [ "." 0*3("0") ] )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.HandlingParam">
            <summary>
            
            </summary>
            <grammar>
            disp-param            =  handling-param / generic-param
            handling-param        =  "handling" equal
                                     ( "optional" / "required"
                                     / other-handling )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.CpExpires">
            <summary>
            
            </summary>
            <grammar>
            c-p-expires        =  "expires" equal delta-seconds
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.FromParam">
            <summary>
            
            </summary>
            <grammar>
            from-param  =  tag-param / generic-param
            tag-param   =  "tag" equal token
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.InfoParam">
            <summary>
            
            </summary>
            <grammar>
            info-param  =  ( "purpose" equal ( "icon" / "info" / "card" / token ) ) / generic-param
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.RetryParam">
            <summary>
            
            </summary>
            <grammar>
            retry-param  =  ("duration" equal delta-seconds)
                            / generic-param
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ToParam">
            <summary>
            
            </summary>
            <grammar>
            to-param  =  tag-param / generic-param
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ViaParams">
            <summary>
            
            </summary>
            <grammar>
            via-params        =  via-ttl / via-maddr
                                 / via-received / via-branch
                                 / via-extension
            via-ttl           =  "ttl" equal ttl
            via-maddr         =  "maddr" equal host
            via-received      =  "received" equal (IPv4address / IPv6address)
            via-branch        =  "branch" equal token
            via-extension     =  generic-param
            </grammar>
        </member>
        <member name="P:Ozeki.VoIP.ViaParams.ViaType">
            <summary>
            A Via paraméter statikus típusa.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.ViaParams.ViaToken">
            <summary>
            A Via paraméter extension típusa.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Info">
            <summary>
            
            </summary>
            <grammar>
            info  =  laquot absoluteuri raquot *( semi info-param)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Language">
            <summary>
            
            </summary>
            <grammar>
            language         =  language-range *(semi accept-param)
            language-range   =  ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.LanguageTag">
            <summary>
            
            </summary>
            <grammar>
            language-tag      =  primary-tag *( "-" subtag )
            primary-tag       =  1*8ALPHA
            subtag            =  1*8ALPHA
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.MediaType">
            <summary>
            
            </summary>
            <grammar>
            media-type       =  m-type slash m-subtype *(semi m-parameter)
            m-type           =  discrete-type / composite-type
            discrete-type    =  "text" / "image" / "audio" / "video"
                                / "application" / extension-token
            composite-type   =  "message" / "multipart" / extension-token
            extension-token  =  ietf-token / x-token
            ietf-token       =  token
            x-token          =  "x-" token
            m-subtype        =  extension-token / iana-token
            iana-token       =  token
            m-parameter      =  m-attribute equal m-value
            m-attribute      =  token
            m-value          =  token / quoted-string
            </grammar>
        </member>
        <member name="M:Ozeki.VoIP.MediaType.#ctor">
            <summary>
            application/sdp konstruktor.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.NameAddress">
            <summary>
            
            </summary>
            <grammar>
            name-addr =  [ display-name ] laquot addr-spec raquot
            display-name = *(token lws)/ quoted-string
            quoted-string  =  [lws] DQUOTE *(qdtext / quoted-pair ) DQUOTE
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.PriorityValue">
            <summary>
            
            </summary>
            <grammar>
            priority-value  =  "emergency" / "urgent" / "normal"
                               / "non-urgent" / other-priority
            other-priority  =  token
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.RecRoute">
            <summary>
            
            </summary>
            <grammar>
            rec-route     =  name-addr *( semi rr-param )
            rr-param      =  generic-param
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.RouteParam">
            <summary>
            
            </summary>
            <grammar>
            route-param  =  name-addr *( semi rr-param )
            rr-param      =  generic-param
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.SendProtocol">
            <summary>
            
            </summary>
            <grammar>
            sent-protocol     =  protocol-name slash protocol-version
                                 slash transport
            protocol-name     =  "SIP" / token
            protocol-version  =  token                     
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ServerVal">
            <summary>
            
            </summary>
            <grammar>
            server-val       =  product / comment
            product          =  token [slash product-version]
            product-version  =  token
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Transport">
            <summary>
            
            </summary>
            <grammar>
            transport         =  "UDP" / "TCP" / "TLS" / "SCTP"
                                 / other-transport
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ViaParam">
            <summary>
            
            </summary>
            <grammar>
            via-parm = sent-protocol lws sent-by *( semi via-params )
            sent-by           =  host [ colon port ]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.WarningValue">
            <summary>
            
            </summary>
            <grammar>
            warning-value  =  warn-code SP warn-agent SP warn-text
            warn-code      =  3DIGIT
            warn-agent     =  hostport / pseudonym
            warn-text      =  quoted-string
            pseudonym      =  token
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Date">
            <summary>
            
            </summary>
            <grammar>
            Date          =  "Date" hcolon SIP-date
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ErrorInfo">
            <summary>
            
            </summary>
            <grammar>
            Error-Info  =  "Error-Info" hcolon error-uri *(comma error-uri)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ExpiresHeader">
            <summary>
            
            </summary>
            <grammar>
            Expires     =  "Expires" hcolon delta-seconds
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ExtensionHeader">
            <grammar>
            extension-header  =  header-name hcolon header-value
            header-name       =  token
            header-value      =  *(text-utf8char / UTF8-CONT / lws)
            </grammar>
            <summary>
            
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.From">
            <summary>
            
            </summary>
            <grammar>
            From        =  ( "From" / "f" ) hcolon from-spec
            from-spec   =  ( name-addr / addr-spec )
                           *( semi from-param )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.InReplyTo">
            <summary>
            
            </summary>
            <grammar>
            In-Reply-To  =  "In-Reply-To" hcolon callid *(comma callid)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.MaxForwards">
            <summary>
            
            </summary>
            <grammar>
            Max-Forwards  =  "Max-Forwards" hcolon 1*DIGIT
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.MIMEVersion">
            <summary>
            
            </summary>
            <grammar>
            MIME-Version  =  "MIME-Version" hcolon 1*DIGIT "." 1*DIGIT
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.MinExpires">
            <summary>
            
            </summary>
            <grammar>
            Min-Expires  =  "Min-Expires" hcolon delta-seconds
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Organization">
            <summary>
            
            </summary>
            <grammar>
            Organization  =  "Organization" hcolon [text-utf8-trim]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Priority">
            <summary>
            
            </summary>
            <grammar>
            Priority        =  "Priority" hcolon priority-value
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ProxyAuthenticate">
            <summary>
            
            </summary>
            <grammar>
            Proxy-Authenticate  =  "Proxy-Authenticate" hcolon challenge
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ProxyAuthorization">
            <summary>
            
            </summary>
            <grammar>
            Proxy-Authorization  =  "Proxy-Authorization" hcolon credentials
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ProxyRequire">
            <summary>
            
            </summary>
            <grammar>
            Proxy-Require  =  "Proxy-Require" hcolon option-tag
                              *(comma option-tag)
            option-tag = token                  
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.RecordRoute">
            <summary>
            Record-route header
            </summary>
            <grammar>
            Record-Route  =  "Record-Route" hcolon rec-route *(comma rec-route)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ReplyTo">
            <summary>
            
            </summary>
            <grammar>
            Reply-To      =  "Reply-To" hcolon rplyto-spec
            rplyto-spec   =  ( name-addr / addr-spec )
                             *( semi rplyto-param )
            rplyto-param  =  generic-param
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Require">
            <summary>
            
            </summary>
            <grammar>
            Require       =  "Require" hcolon option-tag *(comma option-tag)
            option-tag = token
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.RetryAfter">
            <summary>
            
            </summary>
            <grammar>
            Retry-After  =  "Retry-After" hcolon delta-seconds
                           [ comment ] *( semi retry-param )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Route">
            <summary>
            
            </summary>
            <grammar>
            Route        =  "Route" hcolon route-param *(comma route-param)
            route-param  =  name-addr *( semi rr-param )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.ServerHeader">
            <summary>
            
            </summary>
            <grammar>
            Server           =  "Server" hcolon server-val *(lws server-val)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Subject">
            <summary>
            
            </summary>
            <grammar>
            Subject  =  ( "Subject" / "s" ) hcolon [text-utf8-trim]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Supported">
            <summary>
            
            </summary>
            <grammar>
            Supported  =  ( "Supported" / "k" ) hcolon
                          [option-tag *(comma option-tag)]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Timestamp">
            <summary>
            
            </summary>
            <grammar>
            Timestamp  =  "Timestamp" hcolon 1*(DIGIT)
                          [ "." *(DIGIT) ] [ lws delay ]
            delay      =  *(DIGIT) [ "." *(DIGIT) ]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.To">
            <summary>
            
            </summary>
            <grammar>
            To        =  ( "To" / "t" ) hcolon ( name-addr
                         / addr-spec ) *( semi to-param )
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Unsupported">
            <summary>
            
            </summary>
            <grammar>
            Unsupported  =  "Unsupported" hcolon option-tag *(comma option-tag)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.UserAgentHeader">
            <summary>
            
            </summary>
            <grammar>
            User-Agent  =  "User-Agent" hcolon server-val *(lws server-val)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Via">
            <summary>
            Via header field.
            </summary>
            <grammar>
            Via =  ( "Via" / "v" ) hcolon via-parm *(comma via-parm)
            </grammar>
        </member>
        <member name="P:Ozeki.VoIP.Via.ViaParam">
            <summary>
            Lehetséges Via mezők.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Warning">
            <summary>
            
            </summary>
            <grammar>
            Warning        =  "Warning" hcolon warning-value *(comma warning-value)
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.WWWAuthenticate">
            <summary>
            
            </summary>
            <grammar>
            WWW-Authenticate  =  "WWW-Authenticate" hcolon challenge
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.AddrSpecParser">
            <summary>
            Parses the AddrSpec header
            </summary>
            <example>
            sip:alice@atlanta.example.com;lr;transport=udp?Call-ID=ABC123
            sip:192.168.1.2?Call-ID=ABC123
            atlanta.example.com
            atlanta.example.com?Call-ID=ABC123
            sip:atlanta.example.com;lr;transport=udp
            </example>
        </member>
        <member name="T:Ozeki.VoIP.InvaildProxyAuthenticateParser">
            <summary>
            Proxy-Authenticate header-ben nem megfelelo ertek erkezik
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PStatusLine">
            <grammar>
            Status-Line     =  SIP-Version SP Status-Code SP Reason-Phrase crlf
            </grammar>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PRequestLine">
            <summary>
            Request-Line   =  Method SP Request-uri SP SIP-Version crlf
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PWWWAuthenticate">
            <summary>
            WWW-Authenticate  =  "WWW-Authenticate" HCOLON challenge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PChallange">
            <summary>
            challenge           =  ("Digest" LWS digest-cln *(COMMA digest-cln))
                                  / other-challenge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PDigestCln">
            <summary>
            digest-cln          =  realm / domain / nonce
                                    / opaque / stale / algorithm
                                    / qop-options / auth-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PLdqout">
            <summary>
            LDQUOT  =  SWS DQUOTE; open double quotation mark
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PRdqout">
            <summary>
            RDQUOT  =  DQUOTE SWS ; close double quotation mark
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.POtherChallange">
            <summary>
            other-challenge     =  auth-scheme LWS auth-param
                                   *(COMMA auth-param)
            auth-scheme       =  token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PWarning">
            <summary>
            Warning        =  "Warning" HCOLON warning-value *(COMMA warning-value)
            warning-value  =  warn-code SP warn-agent SP warn-text
            warn-code      =  3DIGIT
            warn-text      =  quoted-string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PVia">
            <summary>
            Via               =  ( "Via" / "v" ) HCOLON via-parm *(COMMA via-parm)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PViaParm">
            <summary>
            via-parm          =  sent-protocol LWS sent-by *( SEMI via-params )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PHost">
            <summary>
            host =  hostname / IPv4address / IPv6reference
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PSentBy">
            <summary>
            sent-by           =  host [ COLON port ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PSentProtocol">
            <summary>
            sent-protocol     =  protocol-name SLASH protocol-version
                                 SLASH transport
            protocol-name     =  "SIP" / token
            protocol-version  =  token
            transport         =  "UDP" / "TCP" / "TLS" / "SCTP"
                                 / other-transport
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PViaParams">
            <summary>
            via-ttl           =  "ttl" EQUAL ttl
            via-maddr         =  "maddr" EQUAL host
            via-received      =  "received" EQUAL (IPv4address / IPv6address)
            via-branch        =  "branch" EQUAL token
            via-extension     =  generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PUserAgent">
            <summary>
            User-Agent  =  "User-Agent" HCOLON server-val *(LWS server-val)
            server-val       =  product / comment
            product          =  token [SLASH product-version]
            product-version  =  token
            comment  =  LPAREN *(ctext / quoted-pair / comment) RPAREN
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PUnsupported">
            <summary>
            Unsupported  =  "Unsupported" HCOLON option-tag *(COMMA option-tag)
            option-tag = token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PTo">
            <summary>
            To        =  ( "To" / "t" ) HCOLON ( name-addr / addr-spec ) *( SEMI to-param )
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PToParam">
            <summary>
            to-param  =  tag-param / generic-param
            tag-param   =  "tag" EQUAL token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PTimestamp">
            <summary>
            Timestamp  =  "Timestamp" HCOLON 1*(DIGIT)
                          [ "." *(DIGIT) ] [ LWS delay ]
            delay      =  *(DIGIT) [ "." *(DIGIT) ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PSupported">
            <summary>
            Supported  =  ( "Supported" / "k" ) HCOLON
                          [option-tag *(COMMA option-tag)]
            option-tag     =  token              
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PSubject">
            <summary>
            Subject  =  ( "Subject" / "s" ) HCOLON [TEXT-UTF8-TRIM]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PServer">
            <summary>
            Server           =  "Server" HCOLON server-val *(LWS server-val)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PServerVal">
            <summary>
            server-val       =  product / comment
            product          =  token [SLASH product-version]
            product-version  =  token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PRoute">
            <summary>
            Route        =  "Route" HCOLON route-param *(COMMA route-param)
            route-param  =  name-addr *( SEMI rr-param )
            rr-param     = generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PRetryAfter">
            <summary>
            Retry-After  =  "Retry-After" HCOLON delta-seconds
                            [ comment ] *( SEMI retry-param )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PRetryParam">
            <summary>
            retry-param  =  ("duration" EQUAL delta-seconds)
                            / generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PRequire">
            <summary>
            Require       =  "Require" HCOLON option-tag *(COMMA option-tag)
            option-tag     =  token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PReplyTo">
            <summary>
            Reply-To      =  "Reply-To" HCOLON rplyto-spec
            rplyto-spec   =  ( name-addr / addr-spec )
                             *( SEMI rplyto-param )
            rplyto-param  =  generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PRecordRoute">
            <summary>
            Record-Route  =  "Record-Route" HCOLON rec-route *(COMMA rec-route)
            rec-route     =  name-addr *( SEMI rr-param )
            rr-param      =  generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PProxyRequire">
            <summary>
            Proxy-Require  =  "Proxy-Require" HCOLON option-tag
                              *(COMMA option-tag)
            option-tag     =  token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PProxyAuthenticate">
            <summary>
            Proxy-Authenticate  =  "Proxy-Authenticate" HCOLON challenge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PPriority">
            <summary>
            Priority        =  "Priority" HCOLON priority-value
            priority-value  =  "emergency" / "urgent" / "normal"
                              / "non-urgent" / other-priority
            other-priority  =  token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.POrganization">
            <summary>
            Organization  =  "Organization" HCOLON [TEXT-UTF8-TRIM]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PMinExpires">
            <summary>
            Min-Expires  =  "Min-Expires" HCOLON delta-seconds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PMIMEVersion">
            <summary>
            MIME-Version  =  "MIME-Version" HCOLON 1*DIGIT "." 1*DIGIT
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PMaxForwards">
            <summary>
            Max-Forwards  =  "Max-Forwards" HCOLON 1*DIGIT
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PInReplyTo">
            <summary>
            In-Reply-To  =  "In-Reply-To" HCOLON callid *(COMMA callid)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PFrom">
            <summary>
            From        =  ( "From" / "f" ) HCOLON from-spec
            from-spec   =  ( name-addr / addr-spec )
                           *( SEMI from-param )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PFromParam">
            <summary>
            from-param  =  tag-param / generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PExpires">
            <summary>
            Expires     =  "Expires" HCOLON delta-seconds
            delta-seconds = 1*DIGIT
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PErrorInfo">
            <summary>
            Error-Info  =  "Error-Info" HCOLON error-uri *(COMMA error-uri)
            error-uri   =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PErrorUri">
            <summary>
            error-uri   =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PDate">
            <summary>
            Date          =  "Date" HCOLON SIP-date
            SIP-date      =  rfc1123-date
            rfc1123-date  =  wkday "," SP date1 SP time SP "GMT"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PCSeq">
            <summary>
            CSeq  =  "CSeq" HCOLON 1*DIGIT LWS Method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PContentType">
            <summary>
            Content-Type     =  ( "Content-Type" / "c" ) HCOLON media-type
            media-type       =  m-type SLASH m-subtype *(SEMI m-parameter)
            m-type           =  discrete-type / composite-type
            discrete-type    =  "text" / "image" / "audio" / "video"
                                / "application" / extension-token
            composite-type   =  "message" / "multipart" / extension-token
            extension-token  =  ietf-token / x-token
            ietf-token       =  token
            x-token          =  "x-" token
            m-subtype        =  extension-token / iana-token
            iana-token       =  token
            m-parameter      =  m-attribute EQUAL m-value
            m-attribute      =  token
            m-value          =  token / quoted-string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PContentLength">
            <summary>
            Content-Length  =  ( "Content-Length" / "l" ) HCOLON 1*DIGIT
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PContentLanguage">
            <summary>
            Content-Language  =  "Content-Language" HCOLON
                                language-tag *(COMMA language-tag)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PLanguageTag">
            <summary>
            language-tag      =  primary-tag *( "-" subtag )
            primary-tag       =  1*8ALPHA
            subtag            =  1*8ALPHA
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PContentEncoding">
            <summary>
            Content-Encoding  =  ( "Content-Encoding" / "e" ) HCOLON
                                 content-coding *(COMMA content-coding)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PComma">
            <summary>
            COMMA   =  SWS "," SWS ; comma
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PContentDisposition">
            <summary>
            Content-Disposition   =  "Content-Disposition" HCOLON
                                     disp-type *( SEMI disp-param )
            disp-type             =  "render" / "session" / "icon" / "alert"
                                     / disp-extension-token
            
            disp-param            =  handling-param / generic-param
            handling-param        =  "handling" EQUAL
                                     ( "optional" / "required"
                                     / other-handling )
            other-handling        =  token
            disp-extension-token  =  token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PContact">
            <summary>
            Contact        =  ("Contact" / "m" ) HCOLON
                              ( STAR / (contact-param *(COMMA contact-param)))
            contact-param  =  (name-addr / addr-spec) *(SEMI contact-params)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PContactParam">
            <summary>
            contact-param  =  (name-addr / addr-spec) *(SEMI contact-params)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PContactParams">
            <summary>
            contact-params     =  c-p-q / c-p-expires
                                  / contact-extension
            c-p-q              =  "q" equal qvalue
            c-p-expires        =  "expires" equal delta-seconds
            contact-extension  =  generic-param
            delta-seconds      =  1*DIGIT
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PQvalue">
            <summary>
            qvalue         =  ( "0" [ "." 0*3DIGIT ] )
                             / ( "1" [ "." 0*3("0") ] )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PGenericParam">
            <summary>
            generic-param  =  token [ EQUAL gen-value ]
            gen-value      =  token / host / quoted-string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PEqual">
            <summary>
            EQUAL   =  SWS "=" SWS 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PNameAddr(System.Boolean)">
            <summary>
            name-addr      =  [ display-name ] LAQUOT addr-spec RAQUOT
            addr-spec      =  SIP-URI / SIPS-URI / absoluteURI
            display-name   =  *(token LWS)/ quoted-string
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PDisplayName(System.Char)">
            <summary>
            display-name   =  *(token LWS)/ quoted-string
            sajnos ez nem kornyezetfuggetlen
            </summary>
            <param name="endChar"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAddrSpec(System.String,System.Boolean)">
            <summary>
             addr-spec =  SIP-URI / SIPS-URI / absoluteURI
            </summary>
            <returns></returns>
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „M:Ozeki.VoIP.SIP3261Parser.PUriHeaders” -->
        <member name="M:Ozeki.VoIP.SIP3261Parser.PUriHeader">
            <summary>
            hname "=" hvalue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PUriParameters">
            <summary>
            uri-parameters    =  *( ";" uri-parameter)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PUriParameter">
            <summary>
            uri-parameter     =  transport-param / user-param / method-param
                                 / ttl-param / maddr-param / lr-param / other-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PCallInfo">
            <summary>
            Call-Info   =  "Call-Info" HCOLON info *(COMMA info)
            info        =  LAQUOT absoluteURI RAQUOT *( SEMI info-param) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PInfoParam">
            <summary>
            info-param  =  ( "purpose" EQUAL ( "icon" / "info"
                           / "card" / token ) ) / generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PCallID">
            <summary>
            Call-ID  =  ( "Call-ID" / "i" ) HCOLON callid
            callid   =  word [ "@" word ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAuthorization">
            <summary>
            Authorization     =  "Authorization" HCOLON credentials
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PProxyAuthorization">
            <summary>
            Proxy-Authorization  =  "Proxy-Authorization" HCOLON credentials
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PCredentials">
            <summary>
            credentials       =  ("Digest" LWS digest-response)
                                 / other-response
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PDigestResponse">
            <summary>
            dig-resp *(COMMA dig-resp)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PDigResp">
            <summary>
            dig-resp          =  username / realm / nonce / digest-uri
                                  / dresponse / algorithm / cnonce
                                  / opaque / message-qop
                                  / nonce-count / auth-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAuthParam">
            <summary>
            auth-param        =  auth-param-name EQUAL
                                 ( token / quoted-string )
            auth-param-name   =  token
            </summary> 
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.POtherResponse">
            <summary>
            other-response    =  auth-scheme LWS auth-param
                                 *(COMMA auth-param)
            auth-scheme       =  token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAuthenticationInfo">
            <summary>
            Authentication-Info  =  "Authentication-Info" HCOLON ainfo
                                    *(COMMA ainfo)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAinfo">
            <summary>
            ainfo                =  nextnonce / message-qop
                                     / response-auth / cnonce
                                    / nonce-count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAllow">
            <summary>
            Allow  =  "Allow" HCOLON [Method *(COMMA Method)]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAlertInfo">
            <summary>
            Alert-Info   =  "Alert-Info" HCOLON alert-param *(COMMA alert-param)
            alert-param  =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAcceptLanguage">
            <summary>
            Accept-Language  =  "Accept-Language" HCOLON
                                 [ language *(COMMA language) ]
            language         =  language-range *(SEMI accept-param)
            language-range   =  ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )
            accept-param   =  ("q" EQUAL qvalue) / generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PLanguage">
            <summary>
            language         =  language-range *(SEMI accept-param)
            language-range   =  ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )
            accept-param   =  ("q" EQUAL qvalue) / generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAccept">
            <summary>
            Accept         =  "Accept" HCOLON
                              [ accept-range *(COMMA accept-range) ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAcceptRange">
             <summary>
             accept-range   =  media-range *(SEMI accept-param)
             media-range    =  ( "*/*"
                              / ( m-type SLASH "*" )
                              / ( m-type SLASH m-subtype )
                              ) *( SEMI m-parameter )
            accept-param   =  ("q" EQUAL qvalue) / generic-param
             </summary>
             <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAcceptParam">
            <summary>
            accept-param   =  ("q" EQUAL qvalue) / generic-param
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PAcceptEncoding">
            <summary>
            Accept-Encoding  =  "Accept-Encoding" HCOLON
                                 [ encoding *(COMMA encoding) ]
            encoding         =  codings *(SEMI accept-param)
            codings          =  content-coding / "*"
            content-coding   =  token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.SIP3261Parser.PRequestUri(System.String)">
            <summary>
            Request-URI  =  SIP-URI / SIPS-URI / absoluteURI
            </summary>
            <remarks>
            Same to the AddrSpec.
            </remarks>
        </member>
        <member name="T:Ozeki.VoIP.SIP3261ParserEx">
            <summary>
            Szálbiztos változat
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.Request">
            <summary>
            
            </summary>
            <grammar>
            Request        =  Request-Line
                              *( message-header )
                              crlf
                              [ message-body ]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.SIPMessage">
            <summary>
            
            </summary>
            <grammar>
            SIP-message    =  Request / Response
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.RequestLine">
            <summary>
            
            </summary>
            <grammar>
            Request-Line   =  Method SP Request-uri SP SIP-Version crlf
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.Response">
            <summary>
            
            </summary>
            <grammar>
            Response          =  Status-Line
                                 *( message-header )
                                 crlf
                                 [ message-body ]
            </grammar>
        </member>
        <member name="T:Ozeki.VoIP.StatusLine">
            <summary>
            
            </summary>
            <grammar>
            Status-Line     =  SIP-Version SP Status-Code SP Reason-Phrase crlf
            </grammar>
        </member>
        <member name="M:Ozeki.VoIP.SIPHeaderBuilder.Via(Ozeki.Network.TransportType,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            8.1.1.7 Via
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageEx.GetUserAgent(Ozeki.VoIP.SIPMessage)">
            <summary>
            Gets the value of the User-Agent or the Server header.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageEx.GetUserAgentNameVersion(Ozeki.VoIP.SIPMessage)">
            <summary>
            Gets the name and the version of the user-agent from the SIP message.
            </summary>
            <returns>Name, Version</returns>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageEx.GetVersion(System.String)">
            <summary>
            Gets the version number from the given string.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageEx.GetContacts(Ozeki.VoIP.SIPMessage)">
            <summary>
            Retrieves the contacts from the SIP message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageEx.GetContact(Ozeki.VoIP.SIPMessage)">
            <summary>
            Retrieves the first contact from the SIP message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageEx.GetAllowedMethods(Ozeki.VoIP.SIPMessage)">
            <summary>
            Retrieves the allowed methods from the SIP message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageEx.GetAcceptContentTypes(Ozeki.VoIP.SIPMessage)">
            <summary>
            Retrieves the allowed methods from the SIP message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.Util.InnerSepPrintList(System.Collections.Generic.IEnumerable{Ozeki.VoIP.ISIPMessagePart},System.String)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.Util.FirstSepPrintList(System.Collections.Generic.IEnumerable{Ozeki.VoIP.ISIPMessagePart},System.Char)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.Util.InnerSepPrintObjectList(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Ozeki.VoIP.Util.GetNamedParam(System.Collections.Generic.IEnumerable{Ozeki.VoIP.GenericParam},System.String)">
            <summary>
            Egy adott nevű általános SIP paramétert keres meg a paraméter listában.
            </summary>
            <param name="gps">Általános paraméterek listája.</param>
            <param name="name">A keresendő paraméter neve.</param>
            <returns>Ha megtalálta a paramétert akkor a paramétert reprezentáló objektummal tér vissza, ha nem akkor null-al.</returns>
        </member>
        <member name="M:Ozeki.VoIP.Util.GetNamedUriParam(System.Collections.Generic.IEnumerable{Ozeki.VoIP.UriParameter},System.String)">
            <summary>
            Egy adott nevű Uri paramétert keres meg a paraméter listában.
            </summary>
            <param name="gps">Általános paraméterek listája.</param>
            <param name="name">A keresendő paraméter neve.</param>
            <returns>Ha megtalálta a paramétert akkor a paramétert reprezentáló objektummal tér vissza, ha nem akkor null-al.</returns>
        </member>
        <member name="T:Ozeki.VoIP.MimeType">
            <summary>
            Defines MIME types.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MimeType.Text_Plain">
            <summary>
            text/plain
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MimeType.Text_Html">
            <summary>
            text/html
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MimeType.Application_DTMF">
            <summary>
            application/dtmf
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MimeType.Application_SDP">
            <summary>
            application/sdp
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.MimeType.Application_MsgIsComposing">
            <summary>
            application/im-iscomposing+xml
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.MimeTypeEx">
            <summary>
            Defines extension methods for <see cref="T:Ozeki.VoIP.MimeType"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MimeTypeEx.AsMediaType(Ozeki.VoIP.MimeType)">
            <summary>
            Converts the MIME type to media type.
            </summary>
            <param name="mimeType">The MIME type.</param>
            <returns>The media type.</returns>
        </member>
        <member name="M:Ozeki.VoIP.MimeTypeEx.AsString(Ozeki.VoIP.MimeType)">
            <summary>
            Retrieves the string representation of the MIME type.
            </summary>
            <param name="mimeType">The MIME type.</param>
            <returns>The string format of the MIME type.</returns>
        </member>
        <member name="M:Ozeki.VoIP.MimeTypeEx.FromString(System.String)">
            <summary>
            Creates a MIME type from a string.
            </summary>
            <param name="mimeType">The string.</param>
            <returns>The MIME type.</returns>
        </member>
        <member name="T:Ozeki.VoIP.AbstractMessageModifier">
            <summary>
            Base class for modifying SIP or SDP messages.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.AbstractMessageModifier.AddOutgoingModifier(Ozeki.VoIP.IHeaderModifier)">
            <summary>
            Adds an object that will modify the content of the outgoing messages.
            </summary>
            <param name="modifier"></param>
        </member>
        <member name="M:Ozeki.VoIP.AbstractMessageModifier.AddIncomingModifier(Ozeki.VoIP.IHeaderModifier)">
            <summary>
            Adds an object that will modify the content of the incoming messages.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.AbstractMessageModifier.Separator">
            <summary>
            Gets the separator characters for the lines.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.IHeaderModifier">
            <summary>
            Interface for SIP header or SDP attribute modifiers.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.IHeaderModifier.Modify(System.String)">
            <summary>
            Modifies the value of the header.
            </summary>
            <param name="originalValue">The original value of the header.</param>
        </member>
        <member name="P:Ozeki.VoIP.IHeaderModifier.Name">
            <summary>
            Gets the name of the header which value will be modified.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.IHeaderModifier.CompactName">
            <summary>
            Gets the short name of the header which value will be modified.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ISDPMessageManipulator">
            <summary>
            Input/Output SDP Message Manipulator.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ISDPMessageManipulator.ModifyIncomingMessage(Ozeki.VoIP.MessageModifierInfo)">
            <summary>
            Transforms the incoming SIP message.
            </summary>
            <param name="incomingMessageInfo">Contains information about the incoming SDP message.</param>
            <returns>Text representation of the manipulated SDP message.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISDPMessageManipulator.ModifyOutgoingMessage(Ozeki.VoIP.MessageModifierInfo)">
            <summary>
            Transforms the outgoing SIP message.
            </summary>
            <param name="outgoingMessageInfo">Contains information about the outgoing SDP message.</param>
            <returns>Text representation of the manipulated SDP message.</returns>
        </member>
        <member name="T:Ozeki.VoIP.ISIPMessageManipulator">
            <summary>
            Input/Output SIP Message Manipulator.
            </summary>
            <remarks>
            During the SIP communication the SIP stack sends and receives messages that can be manipulated
            through this Manipulator interface. As the system is totally closed, therefore the messages
            can only be modified by string manipulation right before sending or after receiving them.
            It is possible to inster new extension headers into the messages according to the content.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.ISIPMessageManipulator.ModifyIncomingMessage(Ozeki.VoIP.MessageModifierInfo)">
            <summary>
            Modifies the incoming SIP message.
            </summary>
            <param name="incomingMessageInfo">Contains information about the incoming SIP message.</param>
            <returns>Text representation of the modified SIP message.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISIPMessageManipulator.ModifyOutgoingMessage(Ozeki.VoIP.MessageModifierInfo)">
            <summary>
            Modifies the outgoing SIP message.
            </summary>
            <param name="outgoingMessageInfo">Contains information about the incoming SIP message.</param>
            <returns>Text representation of the modified SIP message.</returns>
        </member>
        <member name="M:Ozeki.VoIP.ISIPMessageManipulator.PrepareAdditionalHeaders(Ozeki.VoIP.MessageModifierInfo)">
            <summary>
            Calculates additional header fields for the outgoing SIP message.
            </summary>
            <param name="outgoingMessageInfo">The text representation of outgoing SIP message.</param>
            <returns>Nonempty list of extra header field, otherwise null.</returns>
        </member>
        <member name="T:Ozeki.VoIP.MessageModifierInfo">
            <summary>
            Provides data for message manipulators.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.MessageModifierInfo.#ctor(System.String,Ozeki.Network.TransportInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.MessageModifierInfo"/> class.
            </summary>
            <param name="content">The content of the message.</param>
            <param name="transportInfo">The transport info for the message.</param>
        </member>
        <member name="P:Ozeki.VoIP.MessageModifierInfo.Message">
            <summary>
            Gets the incoming or outgoing message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageModifierInfo.LocalEndpoint">
            <summary>
            Gets the local endpoint from the outgoing message will be sent, or where the incoming message has arrived to.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.MessageModifierInfo.RemoteEndpoint">
            <summary>
            Gets the remote endpoint from the incoming message has received, or the incoming message will be sent to.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.NullSDPMessageManipulator">
            <summary>
            Represents Input/Output SDP Message Manipulator objects
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.PreparedExtensionHeader">
            <summary>
            Extra SIP header provided by the SIP manipulator
            </summary>
            <remarks>
            The ISIPMessageManipulator can insert extra headers into the SIP messages,
            the name-value pairs of these headers are converted into SIP headers in this class.
            </remarks>
        </member>
        <member name="M:Ozeki.VoIP.PreparedExtensionHeader.#ctor(System.String,System.String)">
            <summary>
            Extra SIP header provided by the SIP manipulator
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:Ozeki.VoIP.SDPAttributeModifier">
            <summary>
            Modifies the attributes of the incoming and outgoing SDP messages.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPHeaderModifier">
            <summary>
            Modifies the headers of the incoming and outgoing SIP messages.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.ResponseCodes">
            <summary>
            Specifies SIP response codes.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.Trying">
            <summary>
            (100) This response indicates that the request has been received by the next-hop server and that some unspecified action is being taken on behalf of this call.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.Ringing">
            <summary>
            (180) This response may be used to initiate local ringback.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.CallIsBeingForwarded">
            <summary>
            (181) A server may use this status code to indicate that the call is being forwarded to a different set of destinations.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.Queued">
            <summary>
            (182) The called party is temporarily unavailable, but the server has ecided to queue the call rather than reject it.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.SessionProgress">
            <summary>
            (183) The 183 (Session Progress) response is used to convey information about the progress of the call that is not otherwise classified.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.OK">
            <summary>
            (200) The request has succeeded.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.MultipleChoices">
            <summary>
            (300) The address in the request resolved to several choices, each with its own specific location, and the user (or UA) can select a preferred communication end point and redirect its request to that location.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.MovedPermanently">
            <summary>
            (301) The user can no longer be found at the address in the Request-URI, and the requesting client should retry at the new address given by the Contact header field.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.MovedTemporarily">
            <summary>
            (302) The requesting client should retry the request at the new address(es) given by the Contact header field.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.UseProxy">
            <summary>
            (305) The requested resource must be accessed through the proxy given by the Contact field.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.AlternativeService">
            <summary>
            (380) The call was not successful, but alternative services are possible.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.BadRequest">
            <summary>
            (400) The request could not be understood due to malformed syntax.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.Unauthorized">
            <summary>
            (401) The request requires user authentication.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.PaymentRequired">
            <summary>
            (402) Reserved for future use.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.Forbidden">
            <summary>
            (403) The server understood the request, but is refusing to fulfill it.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.NotFound">
            <summary>
            (404) The server has definitive information that the user does not exist at the domain specified in the Request-URI.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.MethodNotAllowed">
            <summary>
            (405) The method specified in the Request-Line is understood, but not allowed for the address identified by the Request-URI.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.NotAcceptable">
            <summary>
            (406) The resource identified by the request is only capable of generating response entities that have content characteristics not acceptable according to the Accept header field sent in the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.ProxyAuthenticationRequired">
            <summary>
            (407) This code is similar to 401 (Unauthorized), but indicates that the client must first authenticate itself with the proxy.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.RequestTimedOut">
            <summary>
            (408) The server could not produce a response within a suitable amount of time.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.Gone">
            <summary>
            (410) The requested resource is no longer available at the server and no forwarding address is known.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.RequestEntityTooLarge">
            <summary>
            (413) The server is refusing to process a request because the request entity-body is larger than the server is willing or able to process.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.RequestURITooLong">
            <summary>
            (414) The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.UnsupportedMediaType">
            <summary>
            (415) The server is refusing to service the request because the message body of the request is in a format not supported by the server for the requested method.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.UnsupportedURIScheme">
            <summary>
            (416) The server cannot process the request because the scheme of the URI in the Request-URI is unknown to the server.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.BadExtension">
            <summary>
            (420) The server did not understand the protocol extension specified in a Proxy-Require or Require header field.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.ExtensionRequired">
            <summary>
            (421) The UAS needs a particular extension to process the request, but this extension is not listed in a Supported header field in the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.IntervalTooBrief">
            <summary>
            (423) The server is rejecting the request because the expiration time of the resource refreshed by the request is too short.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.TemporarilyUnavailable">
            <summary>
            (480) The callee's end system was contacted successfully but the callee is currently unavailable.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.CallDoesNotExist">
            <summary>
            (481) This status indicates that the UAS received a request that does not match any existing dialog.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.LoopDetected">
            <summary>
            (482) The server has detected a loop.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.TooManyHops">
            <summary>
            (483) The server received a request that contains a Max-Forwards header field with the value zero.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.AddressIncomplete">
            <summary>
            (484) The server received a request with a Request-URI that was incomplete.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.Ambiguous">
            <summary>
            (485) The Request-URI was ambiguous.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.BusyHere">
            <summary>
            (486) The callee's end system was contacted successfully, but the callee is currently not willing or able to take additional calls at this end system.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.RequestTerminated">
            <summary>
            (487) The request was terminated by a BYE or CANCEL request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.NotAcceptableHere">
            <summary>
            (488) The session description such as the bandwidth, addressing type or codecs were not acceptable.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.RequestPending">
            <summary>
            (491) There is a pending request within the same call.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.Undecipherable">
            <summary>
            (493) The request was received by a UAS that contained an encrypted MIME body for which the recipient does not possess or will not provide an appropriate decryption key.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.ServerInternalError">
            <summary>
            (500) The server encountered an unexpected condition that prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.NotImplemented">
            <summary>
            (501) The server does not support the functionality required to fulfill the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.BadGateway">
            <summary>
            (502) The server, while acting as a gateway or proxy, received an invalid response from the downstream server it accessed in attempting to fulfill the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.ServiceUnavailable">
            <summary>
            (503) The server is temporarily unable to process the request due to a temporary overloading or maintenance of the server.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.ServerTimeout">
            <summary>
            (504) The server did not receive a timely response from an external server it accessed in attempting to process the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.VersionNotSupported">
            <summary>
            (505) The server does not support, or refuses to support, the SIP protocol version that was used in the request.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.MessageTooLarge">
            <summary>
            (513) The server was unable to process the request since the message length exceeded its capabilities.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.BusyEverywhere">
            <summary>
            (600) The callee's end system was contacted successfully but the callee is busy and does not wish to take the call at this time.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.GlobalFailureDecline">
            <summary>
            (603) The callee's machine was successfully contacted but the user explicitly does not wish to or cannot participate.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.DoesNotExistAnywhere">
            <summary>
            (604) The server has authoritative information that the user does not exist anywhere.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.ResponseCodes.GlobalFailureNotAcceptable">
            <summary>
            (606) The session description such as the bandwidth, addressing type or codecs were not acceptable.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPAddress">
            <summary>
            Represents an address that is used in SIP messages such as From or To.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPAddress.#ctor">
            <summary>
            Constructor for serialization.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SIPAddress"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPAddress.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SIPAddress"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPAddress.#ctor(Ozeki.VoIP.AddrSpecType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SIPAddress"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPAddress.PartiallyEquals(Ozeki.VoIP.SIPAddress)">
            <summary>
            Checks only the username and address without the parameteres.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPAddress.GetFormattedString">
            <summary>
            Hogy ne a ToString() legyen, mert ki tudja mire irjuk at azt.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ozeki.VoIP.SIPAddress.UriScheme">
            <summary>
            Gets or sets the URI scheme of the addr-spec-type.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAddress.AddrSpecType">
            <summary>
            Gets or sets the addr-spec-type of the address.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAddress.UserName">
            <summary>
            Gets or sets the user part of the address.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAddress.DisplayName">
            <summary>
            Gets or sets the display name part of the address.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAddress.Host">
            <summary>
            Gets or sets the host part of the address.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAddress.Port">
            <summary>
            Gets or sets the port part of the address.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAddress.Parameters">
            <summary>
            Gets the extra parameters of the address.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPAddress.Address">
            <summary>
            Gets or sets the address part of the SIP address.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InternalSIPAddressEx.GetSIPAddress(System.String,System.String)">
            <summary>
            Egy stringbol keszit SIP address-t. A string formatumai user inputnak megfelelo ertekek lehetnek (pl. '4001', '4001@example.com' stb.).
            Ha nincs megadva a stringben address, akkor a defaultAddress lesz hasznalva.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPMessageInfo">
            <summary>
            Represents structure of a SIP message.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SIPMessageInfo"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageInfo.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SIPMessageInfo"/> class.
            </summary>
            <param name="isRequest">Indicates whether the message is a request.</param>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageInfo.GetHeader(System.String)">
            <summary>
            Gets the SIP header field.
            </summary>
            <param name="headerName">The name of the SIP header.</param>
            <returns>The SIP header, if the headers collection contains the specified header name; otherwise null.</returns>
        </member>
        <member name="M:Ozeki.VoIP.SIPMessageInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ozeki.VoIP.SIPMessageInfo.IsRequest">
            <summary>
            Gets or sets a boolean value indicating whether the SIP message is a request.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPMessageInfo.FirstLine">
            <summary>
            Gets or sets the Request-Line or the Status-Line of the SIP message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPMessageInfo.Headers">
            <summary>
            Gets or sets the headers fields of the SIP message.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPMessageInfo.Body">
            <summary>
            Gets or sets the body of the SIP message.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SIPParam">
            <summary>
            Provides data SIP header parameters.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPParam.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.SIPParam"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPParam.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.SIPParam"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="P:Ozeki.VoIP.SIPParam.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SIPParam.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SIPUriParser.Parse(System.String,System.String)">
            <summary>
            Converts a string to a SIP address.
            </summary>
            <param name="uri">Examples: 856, 856@pbx.com, 856@192.168.112.111, sip:856@192.168.112.111</param>
            <param name="defaultAddress">Default address, if not given.</param>
            <returns></returns>
        </member>
        <member name="T:Ozeki.VoIP.InDialogRequestRouter">
            <summary>
            A user-agentek es a call-ok osszekapcsolasat vegzi.
            </summary>
            <remarks>Kivalasztja a megfelelo call-t a feldobott eventargs alapjan, es tovabbitja neki a callnak a requestet/response-t.</remarks>
        </member>
        <member name="M:Ozeki.VoIP.InDialogRequestRouter.MessageUAS_InDialogMessageReceived(System.Object,Ozeki.VoIP.SIPInstantMessageRequestArgs)">
            <summary>
            Incoming MESSAGE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InDialogRequestRouter.InfoUA_InfoRequestReceived(System.Object,Ozeki.VoIP.InfoRequestArgs)">
            <summary>
            Incoming INFO
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ScheduledInviteManager.BeginIncomingCall(Ozeki.VoIP.UserSIPInfo)">
            <summary>
            Elso INVITE bejovetele
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ScheduledInviteManager.SendInitialInvite(Ozeki.VoIP.InviteArgs)">
            <summary>
            Elso INVITE kuldese
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ScheduledInviteManager.SendReInvite(Ozeki.VoIP.InviteArgs)">
            <summary>
            In-dialog INVITE kuldese
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ScheduledInviteManager.SendResponse(Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            Bejovo INVITE-ra response kuldese
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ScheduledInviteManager.SendACK(Ozeki.VoIP.AckArgs)">
            <summary>
            Kikuldott INVITE-ra ACK kuldese
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ScheduledInviteManager.OnInviteReceived(Ozeki.VoIP.InviteHeaders,System.Boolean)">
            <summary>
            Network felol erkezo INVITE (initial vagy in-dialog)
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ScheduledInviteManager.OnResponseReceived(Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            Network felol erkezo kikuldott INVITE-ra response
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InviteSenderTask">
            <summary>
            INVITE kuldes task ososztalya (initial INVITE, re-INVITE, hold, stb. ososztalya)
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InviteReceiverTask">
            <summary>
            Elso INVITE-ot es a re-INVITE-okat fogado task.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InviteReceiverTask.SendResponse(Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            Bejovo INVITE-ra response kuldese
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.InviteReceiverTask.OnRequestReceived(Ozeki.VoIP.ICallRequestArgs)">
            <summary>
            Elkuldte a SIP kliens az ACK-ot a kikuldott response-ra
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.InstantMessageManager">
            <summary>
            Sends and receives MESSAGE requests.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.OptionsManager">
            <summary>
            Sends and receives OPTIONS requests and responses to the remote party.
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.TransferStateChangedEventArgs">
            <summary>
            Contains information about the state of the transfer.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.TransferStateChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.TransferStateChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.TransferStateChangedEventArgs.#ctor(Ozeki.VoIP.TransferState)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.TransferStateChangedEventArgs"/> class.
            </summary>
            <param name="state">The state of the transfer.</param>
        </member>
        <member name="M:Ozeki.VoIP.TransferStateChangedEventArgs.#ctor(System.Int32,System.String,Ozeki.VoIP.TransferState)">
            <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.TransferStateChangedEventArgs"/> class.
            </summary>
            <param name="statusCode">The status code of the target call.</param>
            <param name="reasonPhrase">The reason phrase of the target call.</param>
            <param name="state">The state of the transfer.</param>
        </member>
        <member name="P:Ozeki.VoIP.TransferStateChangedEventArgs.StatusCode">
            <summary>
            Gets the status code received from the target call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.TransferStateChangedEventArgs.ReasonPhrase">
            <summary>
            Gets the reason phrase received from the target call.
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.TransferStateChangedEventArgs.TransferState">
            <summary>
            Gets the state of the transfer.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_InitialInviteReceived(System.Object,Ozeki.VoIP.InviteArgs)">
            <summary>
            First INVITE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_CancelReceived(System.Object,Ozeki.VoIP.CancelRequestArgs)">
            <summary>
            CANCEL
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_AckReceived(System.Object,Ozeki.VoIP.AckArgs)">
            <summary>
            ACK
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_InviteResponseReceived(System.Object,Ozeki.VoIP.InviteResponseArgs)">
            <summary>
            INVITE response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_ReInviteReceived(System.Object,Ozeki.VoIP.InviteArgs)">
            <summary>
            re-INVITE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_ByeReceived(System.Object,Ozeki.VoIP.ByeRequestArgs)">
            <summary>
            BYE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_InfoReceived(System.Object,Ozeki.VoIP.InfoRequestArgs)">
            <summary>
            INFO
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_InfoResponseReceived(System.Object,Ozeki.VoIP.SIPInfoResponse)">
            <summary>
            INFO response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_MessageReceived(System.Object,Ozeki.VoIP.InstantMessage)">
            <summary>
            MESSAGE
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_MessageResponseReceived(System.Object,Ozeki.VoIP.SIPInstantMessageResult)">
            <summary>
            MESSAGE response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_BlindTransferRequested(System.Object,Ozeki.VoIP.BlindTransferArgs)">
            <summary>
            REFER request
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_TransferResponseReceived(System.Object,Ozeki.VoIP.TransferResponseArgs)">
            <summary>
            REFER response
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.ClientSessionCallLeg.Call_TransferStateChanged(System.Object,Ozeki.VoIP.TransferStateChangedEventArgs)">
            <summary>
            REFER NOTIFY request
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.DirectIPDialInfo">
            <summary>
            Provides data for direct IP dialing.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DirectIPDialInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.DirectIPDialInfo"/> class.
            </summary>
            <param name="remoteHostPort">The remote address that will be called.</param>
        </member>
        <member name="M:Ozeki.VoIP.DirectIPDialInfo.#ctor(System.String,Ozeki.VoIP.SIPAddress)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.DirectIPDialInfo"/> class.
            </summary>
            <param name="remoteHostPort">The remote address that will be called.</param>
            <param name="callerID">The caller ID for outbound call.</param>
        </member>
        <member name="M:Ozeki.VoIP.DirectIPDialInfo.#ctor(Ozeki.VoIP.SIPAddress)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.DirectIPDialInfo"/> class.
            </summary>
            <param name="dialed">The SIP address that will be dialed.</param>
        </member>
        <member name="M:Ozeki.VoIP.DirectIPDialInfo.#ctor(Ozeki.VoIP.SIPAddress,Ozeki.VoIP.SIPAddress)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.DirectIPDialInfo"/> class.
            </summary>
            <param name="dialed">The SIP address that will be dialed.</param>
            <param name="callerID">The caller ID for outbound call.</param>
        </member>
        <member name="T:Ozeki.VoIP.DirectIPDialParameters">
            <summary>
            Provides parameters for direct IP dialing.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.DirectIPDialParameters.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.DirectIPDialInfo"/> class.
            </summary>
            <param name="remoteHostPort">The remote address that will be called.</param>
        </member>
        <member name="M:Ozeki.VoIP.DirectIPDialParameters.#ctor(Ozeki.VoIP.DirectIPDialInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Ozeki.VoIP.DirectIPDialInfo"/> class.
            </summary>
            <param name="info">The dial info.</param>
        </member>
        <member name="T:Ozeki.VoIP.SoftphoneCallFactory">
            <summary>
            Softphone call-t hoz letre. Letrehoz egy server callt, egy SIP callt, illetve a client sessiont.
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SRTPCipherCTR.getCipherStream(Org.BouncyCastle.Crypto.IBlockCipher,System.Byte[],System.Int32,System.Byte[])">
            Computes the cipher stream for AES CM mode. See section 4.1.1 in RFC3711
            for detailed description.
            
            @param outC
                       byte array holding the output cipher stream
            @param length
                       length of the cipher stream to produce, in bytes
            @param iv
                       initialization vector used to generate this cipher stream
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.REPLAY_WINDOW_SIZE">
            <summary>
            The replay check windows size
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.seqNumSet">
            <summary>
            Whether we have the sequence number of current packet
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.keyDerivationRate">
            <summary>
            Key Derivation Rate, used to derive session keys from master keys
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.replayWindow">
            <summary>
            Bit mask for replay check
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.masterKey">
            <summary>
            Master encryption key
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.masterSalt">
            <summary>
            Master salting key
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.encKey">
            <summary>
            Derived session encryption key
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.authKey">
            <summary>
            Derived session authentication key
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.saltKey">
            <summary>
            Derived session salting key
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.tagStore">
            <summary>
            Temp store. 
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.policy">
            <summary>
            Encryption / Authentication policy for this session
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.mac">
            <summary>
            The HMAC object we used to do packet authentication
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.cipherCtr">
            <summary>
            implements the counter cipher mode for RTP according to RFC 3711
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.cipher">
            <summary>
             The symmetric cipher engines
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.rbStore">
            <summary>
            Temp store.
            </summary>
        </member>
        <member name="F:Ozeki.VoIP.SRTPCryptoContext.tempStore">
            <summary>
             this is a working store, used by some methods to avoid new operations
            the methods must use this only to store results for immediate processing
            </summary>
        </member>
        <member name="M:Ozeki.VoIP.SRTPCryptoContext.DeriveSrtpKeys(System.Int64)">
            <summary>
            Derives the srtp session keys from the master key
            </summary>
            <param name="index">the 48 bit SRTP packet index</param>
        </member>
        <member name="M:Ozeki.VoIP.SRTPCryptoContext.ComputeIv(System.Int64,System.Int64)">
             Compute the initialization vector, used later by encryption algorithms,
             based on the lable, the packet index, key derivation rate and master
             salt key.
            
             @param label label specified for each type of iv
             @param index 48bit RTP packet index
        </member>
        <member name="M:Ozeki.VoIP.SRTPCryptoContext.ReverseTransformPacket(Ozeki.VoIP.RTPPacket)">
             Transform a SRTP packet into a RTP packet.
             This method is called when a SRTP packet is received.
            
             Operations done by the this operation include:
             Authentication check, Packet replay check and decryption.
            
             Both encryption and authentication functionality can be turned off
             as long as the SRTPPolicy used in this SRTPCryptoContext is requires no
             encryption and no authentication. Then the packet will be sent out
             untouched. However this is not encouraged. If no SRTP feature is enabled,
             then we shall not use SRTP TransformConnector. We should use the original
             method (RTPManager managed transportation) instead.
            
             @param pkt the RTP packet that is just received
             @return true if the packet can be accepted
                     false if the packet failed authentication or failed replay check
        </member>
        <member name="M:Ozeki.VoIP.SRTPCryptoContext.checkReplay(System.Int32,System.Int64)">
             Checks if a packet is a replayed on based on its sequence number.
            
             This method supports a 64 packet history relative the the given
             sequence number.
            
             Sequence Number is guaranteed to be real (not faked) through
             authentication.
            
             @param seqNo sequence number of the packet
             @param guessedIndex guessed roc
             @return true if this sequence number indicates the packet is not a
             replayed one, false if not
        </member>
        <member name="M:Ozeki.VoIP.SRTPCryptoContext.update(System.Int32,System.Int64)">
             Update the SRTP packet index.
            
             This method is called after all checks were successful.
             See section 3.3.1 in RFC3711 for detailed description.
            
             @param seqNo sequence number of the accepted packet
             @param guessedIndex guessed roc
        </member>
        <member name="M:Ozeki.VoIP.SRTPCryptoContext.ProcessPacketAESCM(Ozeki.VoIP.RTPPacket)">
            Perform Counter Mode AES encryption / decryption
            @param pkt the RTP packet to be encrypted / decrypted
        </member>
        <member name="M:Ozeki.VoIP.SRTPCryptoContext.authenticatePacketHMCSHA1(Ozeki.VoIP.RTPPacket,System.Int32)">
             Authenticate a packet.
             Calculated authentication tag is returned.
            
             @param pkt the RTP packet to be authenticated
             @param rocIn Roll-Over-Counter
        </member>
        <member name="P:Ozeki.VoIP.SRTPCryptoContext.Ssrc">
            <summary>
            RTP SSRC of this cryptographic context
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SRTPCryptoContext.Mki">
            <summary>
            Master key identifier
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SRTPCryptoContext.Roc">
            <summary>
             Roll-Over-Counter, see RFC3711 section 3.2.1 for detailed description
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SRTPCryptoContext.guessedRoc">
            <summary>
            Roll-Over-Counter guessed from packet
            </summary>
        </member>
        <member name="P:Ozeki.VoIP.SRTPCryptoContext.seqNum">
            <summary>
             RTP sequence number of the packet current processing
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.SRTPEngine">
            <summary>
            Megkapja az RTP csomagot dekódolja
            </summary>
        </member>
        <member name="T:Ozeki.VoIP.VoIPNetworkChangeHandler">
            <summary>
            A halozat valtozasanak megfeleloen megszunteti a PhoneLine-okat, PhoneCall-okat.
            </summary>
        </member>
    </members>
</doc>
